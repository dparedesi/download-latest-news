List of news related to Microsoft stock price MSFT:

Title: Microsoft (MSFT) Gets $600 Price Target—Oppenheimer Calls It a Long-Term AI Winner
URL: https://finance.yahoo.com/news/microsoft-msft-gets-600-price-104121525.html
Time Published: 2025-07-11T10:41:21Z
Description: Microsoft Corporation (NASDAQ:MSFT) is one of the AI Stocks Making Waves on Wall Street. On July 9, Oppenheimer upgraded the stock to “Outperform” from...
--------------------------------------------------

Title: Microsoft Corporation (MSFT) Has Had An “Incredible” Run, Says Jim Cramer
URL: https://finance.yahoo.com/news/microsoft-corporation-msft-had-incredible-074120103.html
Time Published: 2025-07-11T07:41:20Z
Description: We recently published Jim Cramer Discusses These 12 Stocks & Says Trump’s Winning. Microsoft Corporation (NASDAQ:MSFT) is one of the stocks Jim Cramer...
--------------------------------------------------

Title: Veteran analyst sends bold message on Palantir stock target
URL: https://www.thestreet.com/investing/veteran-analyst-sends-bold-message-on-palantir-stock-target
Time Published: 2025-07-10T17:47:00Z
Description: Here’s what could be next for Palantir.
--------------------------------------------------

Title: Nvidia Just Became the First $4 Trillion Company in the World. Should You Buy NVDA Stock?
URL: https://www.barchart.com/story/news/33305583/nvidia-just-became-the-first-4-trillion-company-in-the-world-should-you-buy-nvda-stock
Time Published: 2025-07-09T17:42:57Z
Description: Nvidia extended gains to become the world’s first $4 trillion company on Wednesday. BofA analyst still sees further upside in NVDA shares.
--------------------------------------------------

Title: Nvidia Hits New Record as Its CEO Bets Big on Robotics and AI. Is a $10 Trillion Market Cap Next?
URL: https://www.barchart.com/story/news/33305437/nvidia-hits-new-record-as-its-ceo-bets-big-on-robotics-and-ai-is-a-10-trillion-market-cap-next
Time Published: 2025-07-09T17:33:51Z
Description: Nvidia has reached a $4 trillion market cap, and it’s just the beginning.
--------------------------------------------------

Title: Microsoft Isn't in the '$4 Trillion Club'—Yet
URL: https://www.investopedia.com/microsoft-isnt-in-the-usd4-trillion-club-yet-stock-nvidia-11768946
Time Published: 2025-07-09T17:04:18Z
Full Content:
Microsoft won't be the first company to see its market cap touch $4 trillion—but its shares still have plenty of room to rise, one analyst said. Oppenheimer cited growth in Microsoft's (MSFT) AI revenue among its reasons on Wednesday to upgrade the software giant's shares to a bullish "outperform" rating. It set a $600 price target that is well above Visible Alpha's average of just over $548 and one of a few that is $5 below the highest one out there. The target represents about a 20% premium to Tuesday's close; the shares were recently up nearly 1% to nearly $501, perhaps on track for their first close above $500 apiece. (You can read Investopedia's full coverage of today's trading here.) The company's market cap is around $3.7 trillion today, according to Visible Alpha data. Growing AI revenue offers "not only valuation support ... but also upside potential as this revenue stream continues scaling fast and investors embrace Microsoft as one of the long-term AI winners in software," Oppenheimer wrote. The analysts also said Microsoft was one of "only a few vendors in the software industry" capable of a so-called "Rule of 60" profile, a reference to the concept of a company having a combined annual revenue growth rate and EBITDA margin above 60. That, they said, "lends good support to premium multiples" for Microsoft's stock. Microsoft is one of only three companies with a market cap above $3 trillion. Nvidia (NVDA) this morning became the first to top $4 trillion; Wedbush analyst Dan Ives in a note earlier today said he figures Microsoft will get there "this summer." Apple (AAPL) has a market cap of about $3.1 trillion.
--------------------------------------------------

Title: Jensen Huang-led Nvidia shocks Wall Street: Becomes world’s first $4 trillion company, beating Apple and Microsoft
URL: https://economictimes.indiatimes.com/news/international/us/jensen-huang-led-nvidia-shocks-wall-street-becomes-worlds-first-4-trillion-company-beating-apple-and-microsoft/articleshow/122346752.cms
Time Published: 2025-07-09T15:39:03Z
Full Content:
Nvidia becomes world’s first $4 trillion company, marking a historic milestone in the AI-driven tech race. Surging 2.5% in stock value, Nvidia outpaced Apple and Microsoft to claim the top global spot. Fueled by skyrocketing demand for AI chips powering platforms like Microsoft, Google, and Amazon, the chipmaker reported $44.1 billion in revenue last quarter. Despite export restrictions and challenges from Chinese rivals, Nvidia has rallied 74% since April. CEO Jensen Huang sees global AI expansion just beginning. With future projections hitting $6 trillion, Nvidia remains at the center of the AI revolution, reshaping the world’s industries, infrastructure, and innovation. (Catch all the US News, UK News, Canada News, International Breaking News Events, and Latest News Updates on The Economic Times.) Download The Economic Times News App to get Daily International News Updates. (Catch all the US News, UK News, Canada News, International Breaking News Events, and Latest News Updates on The Economic Times.) Download The Economic Times News App to get Daily International News Updates. Vedanta ‘Ponzi’ Allegation, Trump Hits BRICS & Copper Two IAF pilots killed as Jaguar aircraft crashes How Trump 'stole' Rubio’s grandfather clock DOJ arrests 10 after attack on Texas ICE agents 'There was vote theft…' Maria Zakharova briefs on Russia’s foreign policy ‘We will not cooperate with ICE’: Chicago mayor Vadodara: At least nine killed as vehicles fall into river Rahul, Tejashwi lead protest against electoral rolls revision in Bihar Trump imposes 50% tariff on copper imports Vedanta ‘Ponzi’ Allegation, Trump Hits BRICS & Copper Two IAF pilots killed as Jaguar aircraft crashes How Trump 'stole' Rubio’s grandfather clock DOJ arrests 10 after attack on Texas ICE agents 'There was vote theft…' Maria Zakharova briefs on Russia’s foreign policy ‘We will not cooperate with ICE’: Chicago mayor Vadodara: At least nine killed as vehicles fall into river Rahul, Tejashwi lead protest against electoral rolls revision in Bihar Trump imposes 50% tariff on copper imports Hot on Web In Case you missed it Top Searched Companies Top Calculators Top Definitions Top Commodities Top Slideshow Private Companies Top Prime Articles Top Story Listing Latest News Follow us on: Find this comment offensive? Choose your reason below and click on the Report button. This will alert our moderators to take action Reason for reporting: Your Reason has been Reported to the admin. Log In/Connect with: Will be displayed Will not be displayed Will be displayed Stories you might be interested in
--------------------------------------------------

Title: Stocks Climb on Strength in the Magnificent Seven Stocks
URL: https://www.barchart.com/story/news/33302467/stocks-climb-on-strength-in-the-magnificent-seven-stocks
Time Published: 2025-07-09T15:26:52Z
Description: The S&P 500 Index ($SPX ) (SPY ) today is up +0.25%, the Dow Jones Industrials Index ($DOWI ) (DIA ) is up +0.19%, and the Nasdaq 100 Index ($IUXX ) (QQQ...
--------------------------------------------------

Title: Nvidia becomes first company to reach $4 trillion market value
URL: https://finance.yahoo.com/news/nvidia-becomes-first-company-to-reach-4-trillion-market-value-141526534.html
Time Published: 2025-07-09T14:15:26Z
Description: Nvidia's market cap crossed $4 trillion for the first time Wednesday.
--------------------------------------------------

Title: Nvidia stock eyes more gains after chipmaker becomes first company to reach $4 trillion market value
URL: https://finance.yahoo.com/news/nvidia-stock-eyes-more-gains-after-chipmaker-becomes-first-company-to-reach-4-trillion-market-value-141526893.html
Time Published: 2025-07-09T14:15:26Z
Description: Nvidia's market cap crossed $4 trillion for the first time Wednesday.
--------------------------------------------------

Title: Stocks See Support as Investors Await Tariff News
URL: https://www.barchart.com/story/news/33300277/stocks-see-support-as-investors-await-tariff-news
Time Published: 2025-07-09T13:58:16Z
Description: The S&P 500 Index ($SPX ) (SPY ) today is up +0.66%, the Dow Jones Industrials Index ($DOWI ) (DIA ) is up +0.64%, and the Nasdaq 100 Index ($IUXX ) (QQQ...
--------------------------------------------------

Title: Apple Needs Acquisition To Catch Up In AI Race, Analyst Says
URL: https://www.investors.com/news/technology/apple-stock-perplexity-acquisition-called-no-brainer/
Time Published: 2025-07-09T13:03:36Z
Description: If Apple is going to be a major player in artificial intelligence, it needs to acquire Perplexity, an analyst says. Apple stock is flat.
--------------------------------------------------

Title: Microsoft Is Cutting 9,000 Jobs in the Latest Round of Layoffs. How Should You Play MSFT Stock Here?
URL: https://www.barchart.com/story/news/33295396/microsoft-is-cutting-9-000-jobs-in-the-latest-round-of-layoffs-how-should-you-play-msft-stock-here
Time Published: 2025-07-09T12:00:02Z
Description: Microsoft’s layoffs will not halt the stock’s uptrend.
--------------------------------------------------

Title: 5 Things to Know Before the Stock Market Opens
URL: https://www.investopedia.com/5-things-to-know-before-the-stock-market-opens-july-09-2025-11768815
Time Published: 2025-07-09T11:42:10Z
Full Content:
U.S. stock futures are ticking higher as investors continue to monitor the White House for updates on tariff policies; Nvidia (NVDA) stock approaches a $4 trillion market capitalization; Starbucks (SBUX) reportedly has attracted offers for a potential stake sale in its Chinese operations that value the unit at up to $10 billion; U.S.-listed shares of Verona Pharma (VRNA) are jumping in premarket trading after Merck (MRK) agreed to purchase the company for $10 billion; and AES (AES) shares are soaring on a report that the renewable energy provider is exploring a potential sale. Here's what investors need to know today. U.S. stock futures are pointing slightly higher as investors watch for more tariffs developments. Dow Jones Industrial Average futures are up 0.2% after the blue-chip index shed 0.4% in the prior session. S&P 500 futures are edging higher after the benchmark index declined slightly yesterday, while Nasdaq futures are up slightly after the tech-heavy index inched higher Tuesday. Bitcoin (BTCUSD) is ticking higher to trade at around $109,000. The 10-year Treasury note yield is little changed. Oil futures are slightly higher. Gold futures are declining. Nvidia (NVDA) shares are in focus as the AI chipmaker comes close to becoming the most valuable company in history. Nvidia stock rose just over 1% Tuesday to close at an all-time high of exactly $160, pushing its market capitalization to $3.90 trillion. That's just below Apple's (AAPL) closing record of $3.91 trillion last December. Nvidia could reach a market cap of $4 trillion if its share price moves to $163.93. Nvidia shares are edging higher in premarket trading. Starbucks (SBUX) reportedly has attracted offers for a potential stake sale in its Chinese operations that value the unit at up to $10 billion. CNBC said that "almost 30 domestic and foreign private equity firms in China have submitted non-binding offers," adding that Starbucks may retain a 30% stake. According to Bloomberg, which cited people familiar with the matter, most prospective investors in Starbucks' Chinese business "are eyeing a controlling stake in the operation." Starbucks shares are nearly 2% higher in premarket trading. U.S.-listed shares of London-based Verona Pharma (VRNA) are surging 20% in premarket trading after the firm agreed to be acquired by U.S. drug giant Merck (MRK) for $107 per American depositary share, or about $10 billion. The acquisition will add chronic obstructive pulmonary disease (COPD) treatment Ohtuvayre, which the Food and Drug Administration approved in June 2024, to Merck's drug portfolio. The deal is expected to close in the fourth quarter. AES (AES) shares are soaring nearly 15% in premarket trading on a Bloomberg report that the renewable energy provider "is exploring options including a potential sale amid takeover interest." AES has signed deals several tech firms, including Microsoft (MSFT), Alphabet (GOOGL), and Amazon (AMZN), to provide renewable power for data centers. Infrastructure investors including BlackRock's (BLK) Global Infrastructure Partners unit and Brookfield Asset Management "have been studying AES after the company's shares lost about half their value over the past two years," the report said.
--------------------------------------------------

Title: What To Expect From Conagra’s (CAG) Q2 Earnings
URL: https://finance.yahoo.com/news/expect-conagra-cag-q2-earnings-030129067.html
Time Published: 2025-07-09T03:01:29Z
Description: Packaged foods company Conagra Brands (NYSE:CAG) will be announcing earnings results this Thursday before market open. Here’s what investors should know.
--------------------------------------------------

Title: 1 Hypergrowth Stock to Buy and Hold Through 2030
URL: https://www.barchart.com/story/news/33276448/1-hypergrowth-stock-to-buy-and-hold-through-2030
Time Published: 2025-07-08T16:40:26Z
Description: If you're looking for one hypergrowth stock to buy and hold until 2030, Microsoft might be your best bet.
--------------------------------------------------

Title: Microsoft Amends Bylaws to Streamline Shareholder Nominations
URL: https://finance.yahoo.com/news/microsoft-amends-bylaws-streamline-shareholder-151230480.html
Time Published: 2025-07-08T15:12:30Z
Description: Microsoft Corporation (NASDAQ:MSFT) is among the 11 best places to invest money without risk. On Monday, the Board of Directors of Microsoft Corporation...
--------------------------------------------------

Title: Earnings To Watch: Methode Electronics (MEI) Reports Q1 Results Tomorrow
URL: https://finance.yahoo.com/news/earnings-watch-methode-electronics-mei-030058986.html
Time Published: 2025-07-08T03:00:58Z
Description: Custom-engineered solutions manufacturer Methode Electronics (NYSE:MEI) will be announcing earnings results this Wednesday after the bell. Here’s what you...
--------------------------------------------------

Title: Tesla and Apple don’t belong in the ‘Magnificent Seven’ anymore. These two hot tech stocks should replace them.
URL: https://www.marketwatch.com/story/this-new-magnificent-seven-kicks-out-two-favorites-and-adds-these-turbocharged-tech-stocks-e31701ec
Time Published: 2025-07-07T20:36:00Z
Description: Top tech-fund manager says Oracle and Broadcom are better buys right now. Here’s why.
--------------------------------------------------

Title: TikTok building new US app as Trump says deal 'pretty much' done with American buyer
URL: https://finance.yahoo.com/news/tiktok-building-new-us-app-as-trump-says-deal-pretty-much-done-with-american-buyer-162035028.html
Time Published: 2025-07-07T16:20:35Z
Description: TikTok's owner ByteDance is developing a replacement app intended for US-based users, according to a report, as President Trump says a deal is 'pretty much...
--------------------------------------------------

Title: Unleashing the Power of End-User Programmable AI
URL: https://queue.acm.org/detail.cfm?id=3746223
Time Published: 2025-07-07T15:18:53Z
Full Content:
PDF As a demonstration of what can be accomplished with contemporary LLMs (large language models), this paper outlines the high-level design of an AI-first, program-synthesis framework built around a new programming language, Universalis, designed for knowledge workers to read, optimized for our neural computer (Automind; queue.acm.org) to execute, and ready to be analyzed and manipulated by an accompanying set of tools. We call the language Universalis in honor of Gottfried Wilhelm Leibniz, a 17th century German polymath who had an amazing vision long before our time. Leibniz's centuries-old program of a universal science (scientia universalis; wikipedia.org) for coordinating all human knowledge into a systematic whole comprises two parts: (1) a universal notation (characteristica universalis; oxfordreference.com) by use of which any item of information whatsoever can be recorded naturally and systematically, and (2) a means of manipulating the knowledge thus recorded in a computational fashion, to reveal its logical interrelations and consequences (calculus ratiocinator; wikipedia.org). Exactly what current day LLMs provide! This may sound a bit abstract and academic, but it is extremely concrete and practical. Here is an example of a question that can be asked in natural language (the what): Question Alice bought a kilo of apples for $[@B]. She sold them for $[@S]. How much percent %[@P] profit or loss did Alice make? This is the generated Universalis implementation (the how): Answer The apples cost $[@B], and the selling price was $[@S], so Alice made a profit of $[@D is (@S-@B)].The profit percentage is therefore [@P is (@D/@B)*100)]%. To actually run a Universalis program, users need to be able to enter initial values for variables and view the values of computed variables. Depending on the environment in which Universalis code runs, the user interface can vary. Assuming a spreadsheet-style "live programming" environment where you can toggle between showing formulas and showing values, setting @B=10 and @S=17, @P=70 and the code renders as follows: Question Alice bought a kilo of apples for $[10]. She sold them for $[17]. How much percent %[70] profit or loss did Alice make? Answer The apples cost $[10], and the selling price was $[17], so Alice made a profit of $[7 is (17-10)].The profit percentage is therefore [70 is (7/10)*100)]%. Unlike traditional programming languages, which prioritize syntax and structure optimized for writing by professional developers, Universalis is designed with the philosophy that code should be read by domain experts and written by machines. This design tradeoff means that Universalis scripts are structured in a way that closely resembles natural language, making them intuitive and accessible even to those without formal programming training. A simple language reduces the complexity that an AI model needs to handle, making it easier for the model to generate accurate and error-free code. This shift in focus from writing to reading represents a significant departure from conventional programming paradigms, paving the way for a more inclusive and user-friendly approach to harnessing the power of AI. Think of Universalis clauses as some kind of literate Excel spreadsheet formulas such as [@D is (@S-@B)] over named tables, or relations, enclosed in hedges surrounded by natural language explanation, where cells in the table correspond to variables such as @B, @S, and @D (figure 1). The main goal in designing Universalis was that any user who can write basic Excel formulas should be able to understand Universalis scripts. Technically, Universalis is based on Prolog, and code fragments inside [...] hedges are logic predicates. You can also optionally specify, or let Automind generate, pre-conditions that are checked before the code is run by Automind: and post-conditions that are checked after Automind has run the code: Based on these pre- and post-condition contracts, you can reason about whether your program does what you think it does and raise an error if a condition is violated. Note that pre- and post-conditions are also vanilla Universalis programs, thus limiting the concept count for the user. By embedding pre- and post-conditions directly into the language semantics, Universals provides a pragmatic and extensible method for implementing AI safety. This approach allows developers to monitor and enforce the logical correctness and ethical compliance of all Automind computations. The concept of pre- and post-conditions should be familiar to Excel users as they correspond directly to Excel's data-validation rules. For example, the pre-condition [@B>0] corresponds to the rule in figure 2. The rest of the program text of the pre-condition corresponds to the input message that explains to the user why the constraint is put in place (figure 3). When the user enters a value that violates the pre-condition, an error is raised (figure 4). In addition, post-conditions are data-validation rules that are checked when the value of a cell is recalculated and serve as a test to catch potential errors in the cell's formula (figure 5). In Excel, however, validation conditions are not automatically run after a cell's value is calculated, but validation can be enforced on recalculated cells using VBA to implement post-condition checks. To allow for more complex calculations, besides chaining or sequential composition, of clauses, Universalis also supports conditionals, implicit lifting over sequences, and query comprehensions. In problem-solving and decision-making processes, people need a way to handle different scenarios based on varying conditions or inputs. Conditionals make it possible to define specific actions or outcomes that depend on whether certain conditions are met. Traditional programming often makes conditionals complex and difficult to read for non-developers. By structuring conditionals as checklists and explaining each branch in natural language, Universalis ensures that the logic is clear and intuitive for the human reader, while the Universalis interpreter Automind can still recognize them as control-flow decision points as it executes the program. Question Erik has [@btc] BTC. If that is enough to buy [@msft] MSFT, he'll do it; otherwise, he'll keep the BTC. Help Erik decide, and compute how much BTC he has left as [@btc_left]. Answer First, we need to get today's date [TODAY(@today)]. Next, let's find the current price of MSFT stocks [STOCK("MSFT", @today, {..."close":@msft_price...})]. The total cost of [@msft] MSFT stocks is [@msft_total is @msft_price*@msft]. Then, let's find the current price of BTC [SEARCH("current price of BTC in USD", {..."price":@btc_price...})]. The total value of [@btc] BTC is [@btc_total is @btc_price*@btc]. Now, let's compare the two values: This example assumes that the condition [@btc_total >= @msft_total] is false, so that branch is not taken. With different initial values for @btc and @msft, however, the result of the test might be true, leading to the other branch being taken. In such cases, the Universalis user interface crosses out the other branch as unused, clearly indicating the chosen path, while still displaying all possible continuations. When solving tasks, you often want to apply an operation to a collection of values rather than a single value. This need arises frequently, and traditional programming languages address it with for- and while-loops, or higher-order functions such as map and forEach. These constructs can be an unnecessary distraction for users who lack a computer science background. In Universalis, this is handled by implicitly broadcasting operations on single elements to collections, similar to how NumPy or Pandas operate in Python or how dynamic array formulas and spilled array behavior in Excel allow for loopless programming. Consider a primitive [toPdf(@src: File, @dst: File)] that converts a single file to PDF, and another primitive [listFiles(@directory: Directory, @files: List<File>)] that lists all files in a given directory. Question Convert all files in [@dir] to pdf. Answer List all files in the [@src] directory [listFiles(@directory, @files)]. Then, convert each file in [@files] to pdf [toPdf(@files, @dst)]. Even though toPdf is defined to convert a single file to PDF, the Universalis implementation implicitly converts the call [toPdf(@files, @dst)] on a list of files to something equivalent to [map(toPDF, @files, @dst)]. This means the user does not need to worry about how to stretch an operation on single files to collections of files similar to the conventions used in Excel and Cω (researchgate.net), the precursor of LINQ (learn.microsoft.com). In Excel, dynamic array formulas allow users to perform operations across multiple cells without needing to write separate formulas for each cell as well. For example, to apply a unary operation, such as calculating the square of each number column A in a named table Data, you can simply enter the formula =Data[A]^2 in the first cell of column B. Excel will automatically spill the results into the appropriate range in column B, applying the formula to each element in column A. A common scenario is where users want to process data by counting, filtering, grouping, aggregating, etc. By focusing on a structured natural-language approach for comprehending queries, Universalis ensures that even those with minimal experience in programming can perform advanced data manipulations. Here is a very simple example that requires filtering and counting: Question How many [@customers] live in Palo Alto in [@total]? Answer Consider each customer [@c = { ..."city": @city, ...}] from [@customers]: The corresponding query in SQL would be SELECT COUNT(*) FROM customers WHERE city = 'Palo Alto'. While the SQL version looks more concise, consider that both the SQL as well as the Universalis query are expressing how to solve the user's original question, and it is not what the users themselves write but what they should read. The Universalis query expresses the same solution in a way that is easier to understand for users who might be a little intimidated by SQL. If a model were asked to explain the SQL query, it would answer with something close to the Universalis formulation. Of course, if users ever wish to see the equivalent SQL for a Universalis query, they can ask Automind to provide it, allowing them to understand the underlying structure from another perspective. The next question generates a complex answer that involves grouping and aggregation: Question Given [@Players], I need to select the best team for the next World Cup soccer. Answer Consider each player [@P = {"position": @Position, "stats": @Stats, "games": @Games, "age": @Age}] from [@Players]. Group each player [@P] by their position [@Position]. This organizes players into groups based on their playing positions (e.g., Forward, Defender). For each group of players in the same position: Keep only groups where [@AverageStats > 100] and [@MinimumGames > 3]. This ensures that only groups with high overall performance and sufficient experience are considered. Writing this query in SQL is quite difficult since SQL does not support nested tables, but assuming you have a COLLECT aggregate, the equivalent SQL for this query would be something like: SELECT P.Position, AVG(P.Stats) AS averageStats, MIN(P.Games) AS minGames, COLLECT(P) AS players FROM Players P WHERE P.Age > 18 GROUP BY P.Position HAVING AVG(P.Stats) > 100 AND MIN(P.Games) > 3 To make this query work in SQL, you would have to collect the rows into a JSON list, but the syntax and details for this differ among the various SQL dialects. Despite the tenacity of SQL, its lack of compositionality makes it a suboptimal query language for average users. To implement, or approximate, this query in Excel requires pivot tables and the use of XLOOKUP and VLOOKUP functions. Users who can manage that themselves are so sophisticated that they do not need Automind and Universalis. The actual implementation of Universalis uses Kotlin DataFrames, and Automind translates the query into the following code: players.groupBy(Player::position).aggregate { it.mean(Player::stats) into AggregatedPlayerGroup::averageStats it.min(Player::games) into AggregatedPlayerGroup::minGames it into AggregatedPlayerGroup::players }.filter { it[AggregatedPlayerGroup::averageStats] > 100 && it[AggregatedPlayerGroup::minGames] > 3 } While this implementation does support nesting, it is even less accessible for the nondeveloper user than the corresponding SQL. A lot of people seem to be focused on guiding LLMs to generate correct JSON. The real issue is not generating JSON, however, but making sense of the messy and complex JSON data that tools often produce. Consider an example where a tool generates JSON data for a stock query like [STOCK("IBM", @json)]. The resulting JSON might look like this: {"data": [{"symbol":"IBM", "name":"International Business Machines Corp", "exchange":"NYSE", "mic_code":"XNYS", "currency":"USD", "datetime":"2024-04-19", "timestamp":1713533400, "open":"182.42999", "high":"182.80000", "low":"180.57001", "close":"181.58000", "volume":"3037600", "previous_close":"181.47000", "change":"0.11000", "percent_change":"0.06062", "average_volume":"0", "is_market_open":false, "fifty_two_week":{ "low":"180.17000", "high":"183.46001", "low_change":"1.41000", "high_change":"-1.88000", "low_change_percent":"0.78260", "high_change_percent":"-1.02475", "range":"180.169998 - 183.460007"} }], "status":"ok"} From this blob, a user might want to extract specific information such as "volume" and "closing" price. Writing code to parse and extract this information can be daunting, even for those with a strong programming background, let alone for end users. This is where Universalis excels with its pattern-matching capability. Users can simply specify the patterns they want to match within the JSON structure: { ... "volume": @V ... "closing": @P ... "currency": @X } This pattern matching creates the bindings @V=3037600, @P=181.58000, and @X="USD.". Pattern matching in Universalis streamlines the process of working with complex structured data, ensuring that even those with minimal programming experience can effectively interact with and use JSON data. A typical compiler stack is implemented by first lexing (tokenizing) and parsing the program text into an AST (abstract syntax tree), doing semantic analysis on the AST to check for type errors, undefined variables, etc. Next, the AST is lowered into an IR (intermediate representation) to prepare for code generation and optimization. Finally, the optimized IR is mapped to target (machine) code. In Lisp, the lexing and parsing steps are trivial since the concrete syntax is the same as the data structure that represents the AST. Language geeks like to say that Lisp is homoiconic. Similarly, Intentional Programming abstracts from concrete syntax by focusing on representing programs as ASTs based on the high-level intent of the developer. The same AST can then be rendered into different concrete syntaxes based on the context. Since Universalis programs are trying to capture the high-level intent of the user as well, Automind does not generate the concrete syntax seen in the examples so far but instead creates an abstract, intentional representation of the Universalis code: [{ "comment": "Let's first calculate the worth of the apples in dollars." }, { "expression": "@W is @A*@X" }, { "comment": "Next, we need to find the current price of gold (assumed to be in dollars per ounce)." }, { "expression": "WOLFRAM(\"gold price per ounce\", ...$@G/ounce...)" }, { "comment": "Convert the result to a number." }, { "expression": "TO_DOUBLE(@G, @GD)" }, { "comment": "Finally, convert the worth of apples from dollars to ounces of gold." }, { "expression": "@WorthInGold is @W/@GD" }, { "comment": "ounces of gold." }] This representation can be rendered in different concrete syntaxes depending on the domain in which Automind is deployed. Universalis enables users to instruct LLMs on performing various tasks through a natural and systematic approach. Complementing this, the neural computer, Automind, executes these programs using LLMs as its virtual machine. Universalis is designed to be as intuitive as possible, allowing users to write, understand, and interact with AI-generated code with ease. By incorporating pre- and post-conditions directly into language, Universal ensures logical correctness and ethical compliance, offering a robust method for AI safety. Moreover, as we have seen above, Universalis supports advanced features such as conditionals, bulk processing, and query comprehensions, further extending its capabilities while maintaining a natural language feel. This versatility ensures that Universalis can handle a wide range of computational tasks, from simple arithmetic and pattern matching to complex data processing and workflow execution. Erik Meijer brings a rare combination of technical expertise and people leadership to his latest quest to use AI to democratize end-user programming. As a renowned computer scientist, entrepreneur, and tech influencer, Meijer has made pioneering contributions to programming languages, compilers, cloud infrastructures, and AI throughout his tenures at Microsoft, Meta (Facebook), Utrecht University, and Delft University of Technology. Copyright © 2025 held by owner/author. Publication rights licensed to ACM. Originally published in Queue vol. 23, no. 3— Comment on this article in the ACM Digital Library Michael Gschwind - AI: It's All About Inference Now As the scaling of pretraining is reaching a plateau of diminishing returns, model inference is quickly becoming an important driver for model performance. Today, test-time compute scaling offers a new, exciting avenue to increase model performance beyond what can be achieved with training, and test-time compute techniques cover a fertile area for many more breakthroughs in AI. Innovations using ensemble methods, iterative refinement, repeated sampling, retrieval augmentation, chain-of-thought reasoning, search, and agentic ensembles are already yielding improvements in model quality performance and offer additional opportunities for future growth. Vijay Janapa Reddi - Generative AI at the Edge: Challenges and Opportunities Generative AI at the edge is the next phase in AI's deployment: from centralized supercomputers to ubiquitous assistants and creators operating alongside humans. The challenges are significant but so are the opportunities for personalization, privacy, and innovation. By tackling the technical hurdles and establishing new frameworks (conceptual and infrastructural), we can ensure this transition is successful and beneficial. Erik Meijer - From Function Frustrations to Framework Flexibility The principle of indirection can be applied to introduce a paradigm shift: replacing direct value manipulation with symbolic reasoning using named variables. This simple yet powerful trick directly resolves inconsistencies in tool usage and enables parameterization and abstraction of interactions. The transformation of function calls into reusable and interpretable frameworks elevates tool calling into a neuro-symbolic reasoning framework. This approach unlocks new possibilities for structured interaction and dynamic AI systems. Chip Huyen - How to Evaluate AI that's Smarter than Us Evaluating AI models that surpass human expertise in the task at hand presents unique challenges. These challenges only grow as AI becomes more intelligent. However, the three effective strategies presented in this article exist to address these hurdles. The strategies are: Functional correctness: evaluating AI by how well it accomplishes its intended tasks; AI-as-a-judge: using AI instead of human experts to evaluate AI outputs; and Comparative evaluation: evaluating AI systems in relationship with each other instead of independently. © ACM, Inc. All Rights Reserved.
--------------------------------------------------

Title: Unleashing the Power of End-User Programmable AI
URL: https://queue.acm.org/detail.cfm?ref=rss&id=3746223
Time Published: 2025-07-07T15:18:53Z
Full Content:
PDF As a demonstration of what can be accomplished with contemporary LLMs (large language models), this paper outlines the high-level design of an AI-first, program-synthesis framework built around a new programming language, Universalis, designed for knowledge workers to read, optimized for our neural computer (Automind; queue.acm.org) to execute, and ready to be analyzed and manipulated by an accompanying set of tools. We call the language Universalis in honor of Gottfried Wilhelm Leibniz, a 17th century German polymath who had an amazing vision long before our time. Leibniz's centuries-old program of a universal science (scientia universalis; wikipedia.org) for coordinating all human knowledge into a systematic whole comprises two parts: (1) a universal notation (characteristica universalis; oxfordreference.com) by use of which any item of information whatsoever can be recorded naturally and systematically, and (2) a means of manipulating the knowledge thus recorded in a computational fashion, to reveal its logical interrelations and consequences (calculus ratiocinator; wikipedia.org). Exactly what current day LLMs provide! This may sound a bit abstract and academic, but it is extremely concrete and practical. Here is an example of a question that can be asked in natural language (the what): Question Alice bought a kilo of apples for $[@B]. She sold them for $[@S]. How much percent %[@P] profit or loss did Alice make? This is the generated Universalis implementation (the how): Answer The apples cost $[@B], and the selling price was $[@S], so Alice made a profit of $[@D is (@S-@B)].The profit percentage is therefore [@P is (@D/@B)*100)]%. To actually run a Universalis program, users need to be able to enter initial values for variables and view the values of computed variables. Depending on the environment in which Universalis code runs, the user interface can vary. Assuming a spreadsheet-style "live programming" environment where you can toggle between showing formulas and showing values, setting @B=10 and @S=17, @P=70 and the code renders as follows: Question Alice bought a kilo of apples for $[10]. She sold them for $[17]. How much percent %[70] profit or loss did Alice make? Answer The apples cost $[10], and the selling price was $[17], so Alice made a profit of $[7 is (17-10)].The profit percentage is therefore [70 is (7/10)*100)]%. Unlike traditional programming languages, which prioritize syntax and structure optimized for writing by professional developers, Universalis is designed with the philosophy that code should be read by domain experts and written by machines. This design tradeoff means that Universalis scripts are structured in a way that closely resembles natural language, making them intuitive and accessible even to those without formal programming training. A simple language reduces the complexity that an AI model needs to handle, making it easier for the model to generate accurate and error-free code. This shift in focus from writing to reading represents a significant departure from conventional programming paradigms, paving the way for a more inclusive and user-friendly approach to harnessing the power of AI. Think of Universalis clauses as some kind of literate Excel spreadsheet formulas such as [@D is (@S-@B)] over named tables, or relations, enclosed in hedges surrounded by natural language explanation, where cells in the table correspond to variables such as @B, @S, and @D (figure 1). The main goal in designing Universalis was that any user who can write basic Excel formulas should be able to understand Universalis scripts. Technically, Universalis is based on Prolog, and code fragments inside [...] hedges are logic predicates. You can also optionally specify, or let Automind generate, pre-conditions that are checked before the code is run by Automind: and post-conditions that are checked after Automind has run the code: Based on these pre- and post-condition contracts, you can reason about whether your program does what you think it does and raise an error if a condition is violated. Note that pre- and post-conditions are also vanilla Universalis programs, thus limiting the concept count for the user. By embedding pre- and post-conditions directly into the language semantics, Universals provides a pragmatic and extensible method for implementing AI safety. This approach allows developers to monitor and enforce the logical correctness and ethical compliance of all Automind computations. The concept of pre- and post-conditions should be familiar to Excel users as they correspond directly to Excel's data-validation rules. For example, the pre-condition [@B>0] corresponds to the rule in figure 2. The rest of the program text of the pre-condition corresponds to the input message that explains to the user why the constraint is put in place (figure 3). When the user enters a value that violates the pre-condition, an error is raised (figure 4). In addition, post-conditions are data-validation rules that are checked when the value of a cell is recalculated and serve as a test to catch potential errors in the cell's formula (figure 5). In Excel, however, validation conditions are not automatically run after a cell's value is calculated, but validation can be enforced on recalculated cells using VBA to implement post-condition checks. To allow for more complex calculations, besides chaining or sequential composition, of clauses, Universalis also supports conditionals, implicit lifting over sequences, and query comprehensions. In problem-solving and decision-making processes, people need a way to handle different scenarios based on varying conditions or inputs. Conditionals make it possible to define specific actions or outcomes that depend on whether certain conditions are met. Traditional programming often makes conditionals complex and difficult to read for non-developers. By structuring conditionals as checklists and explaining each branch in natural language, Universalis ensures that the logic is clear and intuitive for the human reader, while the Universalis interpreter Automind can still recognize them as control-flow decision points as it executes the program. Question Erik has [@btc] BTC. If that is enough to buy [@msft] MSFT, he'll do it; otherwise, he'll keep the BTC. Help Erik decide, and compute how much BTC he has left as [@btc_left]. Answer First, we need to get today's date [TODAY(@today)]. Next, let's find the current price of MSFT stocks [STOCK("MSFT", @today, {..."close":@msft_price...})]. The total cost of [@msft] MSFT stocks is [@msft_total is @msft_price*@msft]. Then, let's find the current price of BTC [SEARCH("current price of BTC in USD", {..."price":@btc_price...})]. The total value of [@btc] BTC is [@btc_total is @btc_price*@btc]. Now, let's compare the two values: This example assumes that the condition [@btc_total >= @msft_total] is false, so that branch is not taken. With different initial values for @btc and @msft, however, the result of the test might be true, leading to the other branch being taken. In such cases, the Universalis user interface crosses out the other branch as unused, clearly indicating the chosen path, while still displaying all possible continuations. When solving tasks, you often want to apply an operation to a collection of values rather than a single value. This need arises frequently, and traditional programming languages address it with for- and while-loops, or higher-order functions such as map and forEach. These constructs can be an unnecessary distraction for users who lack a computer science background. In Universalis, this is handled by implicitly broadcasting operations on single elements to collections, similar to how NumPy or Pandas operate in Python or how dynamic array formulas and spilled array behavior in Excel allow for loopless programming. Consider a primitive [toPdf(@src: File, @dst: File)] that converts a single file to PDF, and another primitive [listFiles(@directory: Directory, @files: List<File>)] that lists all files in a given directory. Question Convert all files in [@dir] to pdf. Answer List all files in the [@src] directory [listFiles(@directory, @files)]. Then, convert each file in [@files] to pdf [toPdf(@files, @dst)]. Even though toPdf is defined to convert a single file to PDF, the Universalis implementation implicitly converts the call [toPdf(@files, @dst)] on a list of files to something equivalent to [map(toPDF, @files, @dst)]. This means the user does not need to worry about how to stretch an operation on single files to collections of files similar to the conventions used in Excel and Cω (researchgate.net), the precursor of LINQ (learn.microsoft.com). In Excel, dynamic array formulas allow users to perform operations across multiple cells without needing to write separate formulas for each cell as well. For example, to apply a unary operation, such as calculating the square of each number column A in a named table Data, you can simply enter the formula =Data[A]^2 in the first cell of column B. Excel will automatically spill the results into the appropriate range in column B, applying the formula to each element in column A. A common scenario is where users want to process data by counting, filtering, grouping, aggregating, etc. By focusing on a structured natural-language approach for comprehending queries, Universalis ensures that even those with minimal experience in programming can perform advanced data manipulations. Here is a very simple example that requires filtering and counting: Question How many [@customers] live in Palo Alto in [@total]? Answer Consider each customer [@c = { ..."city": @city, ...}] from [@customers]: The corresponding query in SQL would be SELECT COUNT(*) FROM customers WHERE city = 'Palo Alto'. While the SQL version looks more concise, consider that both the SQL as well as the Universalis query are expressing how to solve the user's original question, and it is not what the users themselves write but what they should read. The Universalis query expresses the same solution in a way that is easier to understand for users who might be a little intimidated by SQL. If a model were asked to explain the SQL query, it would answer with something close to the Universalis formulation. Of course, if users ever wish to see the equivalent SQL for a Universalis query, they can ask Automind to provide it, allowing them to understand the underlying structure from another perspective. The next question generates a complex answer that involves grouping and aggregation: Question Given [@Players], I need to select the best team for the next World Cup soccer. Answer Consider each player [@P = {"position": @Position, "stats": @Stats, "games": @Games, "age": @Age}] from [@Players]. Group each player [@P] by their position [@Position]. This organizes players into groups based on their playing positions (e.g., Forward, Defender). For each group of players in the same position: Keep only groups where [@AverageStats > 100] and [@MinimumGames > 3]. This ensures that only groups with high overall performance and sufficient experience are considered. Writing this query in SQL is quite difficult since SQL does not support nested tables, but assuming you have a COLLECT aggregate, the equivalent SQL for this query would be something like: SELECT P.Position, AVG(P.Stats) AS averageStats, MIN(P.Games) AS minGames, COLLECT(P) AS players FROM Players P WHERE P.Age > 18 GROUP BY P.Position HAVING AVG(P.Stats) > 100 AND MIN(P.Games) > 3 To make this query work in SQL, you would have to collect the rows into a JSON list, but the syntax and details for this differ among the various SQL dialects. Despite the tenacity of SQL, its lack of compositionality makes it a suboptimal query language for average users. To implement, or approximate, this query in Excel requires pivot tables and the use of XLOOKUP and VLOOKUP functions. Users who can manage that themselves are so sophisticated that they do not need Automind and Universalis. The actual implementation of Universalis uses Kotlin DataFrames, and Automind translates the query into the following code: players.groupBy(Player::position).aggregate { it.mean(Player::stats) into AggregatedPlayerGroup::averageStats it.min(Player::games) into AggregatedPlayerGroup::minGames it into AggregatedPlayerGroup::players }.filter { it[AggregatedPlayerGroup::averageStats] > 100 && it[AggregatedPlayerGroup::minGames] > 3 } While this implementation does support nesting, it is even less accessible for the nondeveloper user than the corresponding SQL. A lot of people seem to be focused on guiding LLMs to generate correct JSON. The real issue is not generating JSON, however, but making sense of the messy and complex JSON data that tools often produce. Consider an example where a tool generates JSON data for a stock query like [STOCK("IBM", @json)]. The resulting JSON might look like this: {"data": [{"symbol":"IBM", "name":"International Business Machines Corp", "exchange":"NYSE", "mic_code":"XNYS", "currency":"USD", "datetime":"2024-04-19", "timestamp":1713533400, "open":"182.42999", "high":"182.80000", "low":"180.57001", "close":"181.58000", "volume":"3037600", "previous_close":"181.47000", "change":"0.11000", "percent_change":"0.06062", "average_volume":"0", "is_market_open":false, "fifty_two_week":{ "low":"180.17000", "high":"183.46001", "low_change":"1.41000", "high_change":"-1.88000", "low_change_percent":"0.78260", "high_change_percent":"-1.02475", "range":"180.169998 - 183.460007"} }], "status":"ok"} From this blob, a user might want to extract specific information such as "volume" and "closing" price. Writing code to parse and extract this information can be daunting, even for those with a strong programming background, let alone for end users. This is where Universalis excels with its pattern-matching capability. Users can simply specify the patterns they want to match within the JSON structure: { ... "volume": @V ... "closing": @P ... "currency": @X } This pattern matching creates the bindings @V=3037600, @P=181.58000, and @X="USD.". Pattern matching in Universalis streamlines the process of working with complex structured data, ensuring that even those with minimal programming experience can effectively interact with and use JSON data. A typical compiler stack is implemented by first lexing (tokenizing) and parsing the program text into an AST (abstract syntax tree), doing semantic analysis on the AST to check for type errors, undefined variables, etc. Next, the AST is lowered into an IR (intermediate representation) to prepare for code generation and optimization. Finally, the optimized IR is mapped to target (machine) code. In Lisp, the lexing and parsing steps are trivial since the concrete syntax is the same as the data structure that represents the AST. Language geeks like to say that Lisp is homoiconic. Similarly, Intentional Programming abstracts from concrete syntax by focusing on representing programs as ASTs based on the high-level intent of the developer. The same AST can then be rendered into different concrete syntaxes based on the context. Since Universalis programs are trying to capture the high-level intent of the user as well, Automind does not generate the concrete syntax seen in the examples so far but instead creates an abstract, intentional representation of the Universalis code: [{ "comment": "Let's first calculate the worth of the apples in dollars." }, { "expression": "@W is @A*@X" }, { "comment": "Next, we need to find the current price of gold (assumed to be in dollars per ounce)." }, { "expression": "WOLFRAM(\"gold price per ounce\", ...$@G/ounce...)" }, { "comment": "Convert the result to a number." }, { "expression": "TO_DOUBLE(@G, @GD)" }, { "comment": "Finally, convert the worth of apples from dollars to ounces of gold." }, { "expression": "@WorthInGold is @W/@GD" }, { "comment": "ounces of gold." }] This representation can be rendered in different concrete syntaxes depending on the domain in which Automind is deployed. Universalis enables users to instruct LLMs on performing various tasks through a natural and systematic approach. Complementing this, the neural computer, Automind, executes these programs using LLMs as its virtual machine. Universalis is designed to be as intuitive as possible, allowing users to write, understand, and interact with AI-generated code with ease. By incorporating pre- and post-conditions directly into language, Universal ensures logical correctness and ethical compliance, offering a robust method for AI safety. Moreover, as we have seen above, Universalis supports advanced features such as conditionals, bulk processing, and query comprehensions, further extending its capabilities while maintaining a natural language feel. This versatility ensures that Universalis can handle a wide range of computational tasks, from simple arithmetic and pattern matching to complex data processing and workflow execution. Erik Meijer brings a rare combination of technical expertise and people leadership to his latest quest to use AI to democratize end-user programming. As a renowned computer scientist, entrepreneur, and tech influencer, Meijer has made pioneering contributions to programming languages, compilers, cloud infrastructures, and AI throughout his tenures at Microsoft, Meta (Facebook), Utrecht University, and Delft University of Technology. Copyright © 2025 held by owner/author. Publication rights licensed to ACM. Originally published in Queue vol. 23, no. 3— Comment on this article in the ACM Digital Library Michael Gschwind - AI: It's All About Inference Now As the scaling of pretraining is reaching a plateau of diminishing returns, model inference is quickly becoming an important driver for model performance. Today, test-time compute scaling offers a new, exciting avenue to increase model performance beyond what can be achieved with training, and test-time compute techniques cover a fertile area for many more breakthroughs in AI. Innovations using ensemble methods, iterative refinement, repeated sampling, retrieval augmentation, chain-of-thought reasoning, search, and agentic ensembles are already yielding improvements in model quality performance and offer additional opportunities for future growth. Vijay Janapa Reddi - Generative AI at the Edge: Challenges and Opportunities Generative AI at the edge is the next phase in AI's deployment: from centralized supercomputers to ubiquitous assistants and creators operating alongside humans. The challenges are significant but so are the opportunities for personalization, privacy, and innovation. By tackling the technical hurdles and establishing new frameworks (conceptual and infrastructural), we can ensure this transition is successful and beneficial. Erik Meijer - From Function Frustrations to Framework Flexibility The principle of indirection can be applied to introduce a paradigm shift: replacing direct value manipulation with symbolic reasoning using named variables. This simple yet powerful trick directly resolves inconsistencies in tool usage and enables parameterization and abstraction of interactions. The transformation of function calls into reusable and interpretable frameworks elevates tool calling into a neuro-symbolic reasoning framework. This approach unlocks new possibilities for structured interaction and dynamic AI systems. Chip Huyen - How to Evaluate AI that's Smarter than Us Evaluating AI models that surpass human expertise in the task at hand presents unique challenges. These challenges only grow as AI becomes more intelligent. However, the three effective strategies presented in this article exist to address these hurdles. The strategies are: Functional correctness: evaluating AI by how well it accomplishes its intended tasks; AI-as-a-judge: using AI instead of human experts to evaluate AI outputs; and Comparative evaluation: evaluating AI systems in relationship with each other instead of independently. © ACM, Inc. All Rights Reserved.
--------------------------------------------------

Title: Why Alibaba Stock Looks Like a Screaming Buy After Falling 27% From Its 2025 Highs
URL: https://www.barchart.com/story/news/33248720/why-alibaba-stock-looks-like-a-screaming-buy-after-falling-27-from-its-2025-highs
Time Published: 2025-07-07T14:12:39Z
Description: Alibaba stock is down over 27% from its 2025 highs. The stock, however, looks like a good buy given its valuation and can outperform markets over the medium ...
--------------------------------------------------

Title: MSFT Stock To $1,000?
URL: https://www.forbes.com/sites/greatspeculations/2025/07/07/msft-stock-to-1000/
Time Published: 2025-07-07T14:00:57Z
Full Content:
ByTrefis Team ByTrefis Team, Contributor. The OpenAI logo appears on a smartphone screen and the Microsoft logo on a laptop screen as the ... More background in Athens, Greece, on July 4, 2025. Microsoft cuts up to 9,000 more jobs as it invests in AI. (Photo by Nikolas Kokovlis/NurPhoto via Getty Images) Microsoft’s stock (NASDAQ:MSFT) has already achieved remarkable gains, increasing over 2x from $235 in early 2023 to about $500 now. What factors could drive the stock to double from its current value over the next few years? The answer is found in Azure and AI – the main growth engine for Microsoft. The company’s AI strategy is yielding tangible results, with notable uptake of its AI-driven features across its product offerings. This momentum, especially in its cloud computing sector, positions Microsoft for significant future expansion as businesses progressively adopt AI solutions in their operations. On another note, if you seek an upside with a smoother experience than a single stock, you might explore the High Quality portfolio, which has outperformed the S&P 500, garnering >91% returns since its inception. Additionally, check out – SOUN Stock To $20? Microsoft is making a significant investment in its AI infrastructure, with capital expenditures expected to rise from approximately $44 billion in 2024 to over $80 billion in 2025. This considerable investment is largely driven by the growing demands of artificial intelligence. Azure is the primary beneficiary of this investment in AI infrastructure, experiencing over 30% growth that is anticipated to persist in the near future. However, Microsoft’s integration of AI extends well beyond Azure. Hundreds of thousands of customers are already utilizing Microsoft 365 Copilot to transform their daily workflows. This represents a major transition for Microsoft, shifting from the sale of traditional software licenses to providing AI-driven productivity improvements, which command premium pricing and encourage deeper customer dependence. For instance, more than 230,000 organizations—including 90% of the Fortune 500—have already embraced Copilot Studio to create AI agents, indicating Microsoft’s successful shift from pilot projects to widespread enterprise implementation. Microsoft’s Intelligent Cloud segment serves as the company’s foremost revenue driver, producing roughly $105 billion in 2024 with impressive 20% growth. This segment is Microsoft’s fastest-growing and highest-margin area, benefiting from its unique status as both a cloud infrastructure provider and a leader in enterprise software. The incorporation of AI capabilities into Azure services further increases its value, while strong enterprise relationships ensure customer loyalty and opportunities for upselling. While Azure’s rapid growth garners significant attention, Microsoft’s Productivity and Business Processes segment provides an essential foundation. This segment, which includes Microsoft 365, generated $78 billion in 2024, delivering stable, recurring income. This dependable revenue source allows Microsoft to finance investments in high-growth fields such as AI and cloud services. The 82.5 million Office 365 subscriptions, an increase of 10% year-over-year, highlight the stickiness of this business. With total annual revenues exceeding $245 billion, this stable base enables Microsoft to aggressively invest in AI and cloud infrastructure while maintaining strong profitability across its varied business portfolio. For Microsoft’s stock to double, the company must maintain its impressive growth, predominantly driven by its strategic leadership in AI and cloud computing. This growth will likely be propelled by the increasing adoption of AI across its Azure platform and the robust monetization of its AI-driven software, especially Microsoft 365 Copilot. Examining the figures, we estimate Microsoft’s revenues will surpass $405 billion within the next four years, with adjusted earnings exceeding $20 per share. Currently trading around $500, MSFT stock is valued at about 14 times its trailing revenues. Although this is slightly higher than its four-year average price-to-sales (P/S) ratio of over 12 times, the substantial growth in Azure and Copilot may justify a premium. If Azure sustains its remarkable 30%+ growth rate, the accelerated revenue could merit even higher valuation multiples. Additionally, AI services often yield higher margins than traditional cloud infrastructure. As AI becomes a more significant contributor to Microsoft’s revenue, operational leverage could lead to considerable profit growth. If Microsoft establishes a clear lead in enterprise AI, mirroring its historical dominance in productivity software, investors might attribute a lasting premium valuation to the stock. Even a minor increase in the P/S ratio to 18 times could push the stock beyond $1,000 within the next four years. The combination of growing revenues across all segments and improved profitability stemming from AI efficiencies could substantially enhance investor confidence in Microsoft. As the company showcases its ability to monetize significant AI investments while preserving market leadership, investors may begin to apply premium valuation multiples typically reserved for high-growth technology firms. This multiple expansion, coupled with fundamental business growth, provides a mathematical foundation for the stock to double. This outcome relies on both sustained revenue growth and a reevaluation of Microsoft’s long-term earnings potential within the AI economy. While Microsoft’s trajectory appears optimistic, a number of factors could impede the stock from doubling. The primary concern is the normalization of AI spending. Companies might become more cautious about initiating new Azure projects, implying that the current rate of AI investment may not be sustainable over the long term. Additionally, competition from Google, Amazon, and emerging competitors could also challenge Microsoft’s pricing power in the AI market and its ability to gain market share. High-interest rates could render growth stocks like Microsoft less attractive compared to fixed-income alternatives. In summary, investors considering a position in Microsoft should also account for these risks. Now, we implement a risk assessment framework while developing the Trefis High Quality (HQ) Portfolio, which, consisting of 30 stocks, has a record of significantly outperforming the S&P 500 over the last four years. Why is that? Collectively, HQ Portfolio stocks have delivered superior returns with lower risk compared to the benchmark index; experiencing less volatility, as shown in HQ Portfolio performance metrics.
--------------------------------------------------