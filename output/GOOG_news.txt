List of news related to Alphabet Inc stock price GOOG:

Title: Spring AI MCP Servers OAuth2 Example
URL: https://www.javacodegeeks.com/spring-ai-mcp-servers-oauth2-example.html
Time Published: 2025-08-26T15:17:41Z
Full Content:
The Model Context Protocol (MCP) allows AI models to securely access external data and tools. Let us delve into understanding how to secure Spring AI MCP Servers with OAuth2. Spring AI is an extension of the popular Spring Boot framework that allows developers to integrate large language models (LLMs) and AI capabilities directly into their applications. It simplifies building intelligent features such as chatbots, recommendation engines, and natural language understanding within Spring-based systems. OAuth2 is an open-standard authorization framework that allows applications to securely access resources on behalf of a user. In the context of Spring AI MCP servers, OAuth2 ensures that only authorized clients can interact with AI services, protecting sensitive data and AI endpoints. MCP is an open protocol that standardizes how applications connect LLMs to data and tools, like how USB-C connects devices to peripherals. It enables building agents and complex workflows by linking models with the world. Learn more about MCP here. Spring Security is a powerful framework for securing Spring applications. In the context of MCP servers, it ensures that only authorized clients can access AI model endpoints, protecting sensitive data and services. Key features of Spring Security for MCP servers: Using Spring Security, developers can: Overall, Spring Security provides the backbone for safely exposing AI model endpoints, ensuring that only authenticated and authorized clients can interact with the MCP server. Add these dependencies to your pom.xml: Define a controller that provides realistic stock data in MCP format. In production, you could fetch real stock data from APIs like Alpha Vantage or Yahoo Finance. This Spring Boot controller, annotated with @RestController and @RequestMapping("/stocks"), provides a simple API to fetch stock information. It stores stock symbols and their prices in an immutable Map called stockPrices. The @GetMapping("/{symbol}") method takes a stock symbol as a path variable, looks up the price, and if not found, throws a ResponseStatusException with a 404 status. If the stock exists, it creates a Map containing the symbol, price, currency (“USD”), company name (determined by the private getCompanyName method using a switch expression), and the current timestamp. The resulting map is returned as JSON when the API endpoint is called. Enable OAuth2 security for your MCP server: This Spring configuration class, annotated with @Configuration, sets up security for the application using Spring Security. It defines a SecurityFilterChain bean that customizes HTTP security. CSRF protection is disabled with csrf().disable() and CORS support is enabled using cors(). The configuration requires that any request to endpoints under /stocks/** must be authenticated. Finally, it configures the application as an OAuth2 resource server using JWT tokens (oauth2ResourceServer().jwt()), ensuring that only requests with valid JWTs can access the secured stock endpoints. To enable your MCP server to authenticate and authorize clients using OAuth2, you need to configure a client in application.properties. This configuration registers a client with the authorization server, specifying the client ID, secret, authentication method, and allowed grant types. With this configuration, your MCP server can request JWT tokens from the authorization server and include them in requests to secured endpoints. This setup ensures that only authorized clients can access your stock data API. For this tutorial, we will use Keycloak as the authorization server to register the client. The focus is on the MCP server, so Keycloak setup is not covered here. Note: Before configuring the OAuth2 client, you need to register your MCP server as a client in Keycloak. Create a new client, set the client ID (e.g., stocks-client), configure the client secret, and enable the client_credentials grant type. This allows your MCP server to obtain access tokens to secure its endpoints. After adding the dependencies, creating the controller, and configuring security, you can run your MCP server as a standard Spring Boot application. Use your IDE or execute mvn spring-boot:run from the command line in the project directory. Once the application starts, it will listen on the default port 8080. Obtain an access token using the client_credentials grant: Use the token to query stock information. Please note localhost:8080 will act as the mcp.example.com. The server will return a JSON response like: Unauthorized requests will be rejected with a 401 error. This setup ensures that only authenticated clients can access stock data, making the MCP server production-ready and secure. We created a Stocks Info MCP Server with Spring AI and secured it using OAuth2. The server returns stock data only to authorized clients, ensuring secure access while keeping the setup simple and easy to use. We will contact you soon. Δ Δ This site uses Akismet to reduce spam. Learn how your comment data is processed.
--------------------------------------------------