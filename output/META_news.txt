List of news related to Meta stock price META:

Title: See Jane 128 by Arktronics run (ft. Magic Desk, 3-Plus-1 and the Thomson MO5)
URL: http://oldvcr.blogspot.com/2025/06/see-jane-128-by-arktronics-run.html
Time Published: 2025-06-21T23:43:59Z
Full Content:
REWIND and PLAY I never used Jane myself back in the day, or for that matter any 128 native word processor, and even when we got a 128 I still wrote my term papers in Pocket Writer 64 or Timeworks Word Writer. However, that faulty but repairable Australian Commodore 128DCR I got last Christmas came with a big box of software and in there was a complete copy of Jane 128 along with the data disk the previous owners' family had used. They were delighted when I said I wanted to take a whack at converting their files as a thank you — and along the way we'll take a look at Jane's oddball history, the original Apple II version, the Commodore 128 version and its all-but-unknown port to the French Thomson MO5, plus those other attempts at productivity applications Commodore tried in the mid-1980s. PETs, of course, had many productivity software options and even the VIC-20, if suitably upgraded, could manage basic tasks. Some small businesses reportedly even used them for simple finances. The 64 itself was hardly an ideal productivity machine when introduced in 1982, but it was certainly far more up to the task than the VIC-20 was and many such software packages were naturally available later on. Initially, however, dealers and customers openly groused about the absence of a spreadsheet or even a word processor, much to Commodore chief Jack Tramiel's profound displeasure. The task of rectifying this situation was handed to executive Sigmund Hartmann and his recently consolidated Commodore Software division, formed in April 1983 from the prior two separate software units handling system software (under Paul Goheen) and games (under Bill Wade). At least one side project would become critical to the reworked division. Engineer John Feagans had been the initial developer of the PET Kernal, its internal ROM-based operating system, which pioneered the then-novel idea of separating I/O and other system routines from the built-in Microsoft BASIC. (Prior versions of BASIC on early microcomputers often simply drove devices directly.) Feagans' innovation facilitated the use of these routines by user-written machine language programs through a standardized jump table, which was reused and greatly expanded by Bob Russell for the VIC-20 and 64. Feagans' side project was a PET demonstration of a small picture-based file manager, using an office filing cabinet as its central metaphor and drawn with PETSCII graphic characters. In 1982 the Commodore office in Moorpark, California where Feagans worked was closed and he was reassigned to their then-executive offices in Santa Clara. With little else to do at the time, Feagans rewrote his file cabinet demo for the new 64 to get familiar with the hardware, primarily in BASIC. As an exploration of the 64's joystick and moveable sprite capabilities, he additionally implemented an animated "hand" controlled by the joystick that served as a pointer. By this time Hartmann had just weeks until Summer CES in June 1983, the deadline he had promised Tramiel. While working on licensing deals with outside firms, Hartmann also ordered Andy Finkel, promoted from the VIC team to technical manager, to find anything the software division was already working on that could get finished fast. Finkel saw Feagans' new demo and convinced Hartmann that it was both feasible and viable as a product. Magic Desk was completed by Feagans, Finkel and other Commodore developers at record speed, recruiting resources from Rich Wiggins' speech group in Dallas, Texas and marketing and documentation head Michael Tomczyk, who in turn brought in artist and programmer Jeff Bruette to develop the sprite-based icons and additional PETSCII backgrounds. With time being a severely limited resource, after completion of the typewriter and filing cabinet it was instead decided that this Magic Desk would be the first of a whole line of Magic Desk software between which data could be exchanged. This was Magic Desk I: Type & File, and it made it to CES along with almost 70 other programs for the 64 and VIC-20. "We want everyone to know that Commodore's in the software business," Hartmann declared to COMPUTE!'s Gazette. Like many Commodore Software titles Magic Desk was released on cartridge, a wise decision as it started up within seconds, and its interface was colourful, audacious and unlike anything else at that year's CES. (At the time Feagans claimed never to have seen the Apple Lisa or Xerox PARC machines when he developed it, though his recollection later varied.) As a result it quickly overshadowed the software division's other C64 productivity titles licensed from outside companies, such as Easy Script from British developer Precision Software Ltd which débuted at the same show. When it eventually emerged for sale in the fall, however, reviewers were somewhat less enamoured. Although the user-friendly appearance was praised, RUN found the hand pointer difficult to manipulate and complained "the Help screens [were] little or no help," and Ahoy! noted the file cabinet required a disk drive and the questionable use of RELative files for storage, slowing access and hampering interchange. Reviewers also were quick to notice the icons for later planned Magic Desk modules, nevertheless already on the desktop yet programmed to do absolutely nothing. But the most unanimous and direct criticism came for what few built-in applications there were, especially the centrepiece typewriter which was seen as limited and idiosyncratic — and moreso given Magic Desk initially sold for $71.95 (in 2025 dollars over $230) at a time when other, better and often cheaper options had since become available, including from Commodore themselves. InfoWorld was the harshest of its detractors, concluding, "We really question whether Commodore's approach with Magic Desk is the best way to develop 'people literacy.'" Part of this cost was the expense of manufacture. Magic Desk initially came as 32K of ROM in four 8K chips, quite possibly the largest cartridge developed for the 64 at that time and requiring additional logic on the PCB for bank switching. (Its design is still used to this day for large multicarts, now supporting as much as a megabyte of ROM.) Internally, although some code had been converted to machine language using a custom compiler, there wasn't enough time to do it all and a fair portion of Magic Desk thus remained written in BASIC (moved up to start at $0a01 instead of $0801). As part of initialization this BASIC program is read out of the ROMs and copied to RAM for execution, which is the slight pause at the beginning before the title screen appears. Despite the cool press reception, Magic Desk sold surprisingly well to new 64 users, and in numbers sufficient to solve its production problems such that its price dropped in half by late 1984. Sales were enough to propose an upgraded version called Magic Desk II for Commodore's new (and, ultimately to its detriment, incompatible) 264 series, capable of speech prompts when paired with the speech group's Magic Voice synthesizer hardware, and featuring a more sophisticated interface with "Lisa-like" pulldown menus and icons. At the same time the software division finished the remaining pieces of the original 64 Magic Desk (now simply called "The Magic Desk"), also with speech capability; the screenshots here of the presumably completed budget and phone modules are from prototype ROMs in an auction lot of Feagans' old Commodore memorabilia, double the size of the original version. Commodore intended the upper-tier 264s to be home and small business productivity systems, designing their hardware and TED video chip to match, with the 64 remaining as their general purpose gaming and home computer. Tramiel strongly believed, as Michael Tomczyk wrote in The Home Computer Wars, that "home computers would have the power of small business computers like IBM and Apple — but would be priced like home computers, perhaps as low as under $500." Smaller versions of the 264, with their much lower part counts, could even compete in the ultra-low market segment against systems like the ZX series in the UK. As Hartmann, Tomczyk and others in the software group felt the 264 would be most meaningful with built-in software, Magic Desk II became one of several possible option ROMs representing potential machine configurations, along with others featuring different programming languages or applications like a spreadsheet or terminal program. Tramiel embraced the idea, seeing it as a car with different models "just like General Motors." At least three "flavours," aligning with the internal groups in the software division (business, home and education), were envisioned — though the concept also met swift resistance from dealers and even Commodore's own sales team who protested having to handle multiple different versions of one computer. (One possible unspoken reason is that it was already known not to be 64 compatible, and dealers were undoubtedly unhappy about taking stock space away from a financial anchor.) With time yet again a factor, for the top-end "business flavour" the software division looked for a quick potential port and found it in Trilogy, a forthcoming 64 software package from Orange County, California-based Tri Micro demonstrated at Spring Comdex 1983. Trilogy was to be a combination of three existing Tri Micro programs, Your Home Office (word processor and spreadsheet) and The Write File (word processor and database) merged into a single application, and Plus Graph (charting) — what would have been called "integrated software" in those days. Commodore contracted with David Johnson, its developer and Tri Micro's VP of software engineering, to also port it to the 264. In January 1984 Jack Tramiel was forced out of the company he founded by chairman Irving Gould and shortly thereafter the 264 line was slashed by new CEO Marshall Smith. Three models were chosen from the various prototypes and experiments, the 16K 16 (and in Europe the 116 as well) to serve as the low-end, and the 64K 264, now renamed the Plus/4, as the high-end. Both the completed Magic Desk and Magic Desk II were cut, as was the education flavour based on a built-in Logo implementation. Only the Plus/4 would offer Trilogy, renamed to 3-Plus-1, and its ROM size was cut to 32K to reduce production costs further which in turn forced Johnson to make serious reductions in functionality. As a result 3-Plus-1 became nearly as maligned as the Plus/4 itself (mocked in the press as the "Minus/60" for its idiosyncrasies, deliberately incompatible ports and lack of 64 software compatibility), though yours truly actually used the spreadsheet for a household budget when I was a starving student, and it wasn't that bad. Nevertheless, as evidence of the hasty last-minute switch, the Plus/4 manual still makes vague reference to "built-in software packages," saying the computer will tell you "which packages are available and which function key to use to activate them." There was only ever one in the production model, and it was 3+1. As Tri-Micro had still maintained the rights, Trilogy was subsequently released in its original form for the 64 as Team-Mate to the rave reviews 3-Plus-1 never got (in July 1985 RUN called it "a high-performance program that Commodore users will discover to be one of the best available"). Johnson later got his chance to show what 3+1 was really capable of with Plus/Extra, a full disk version sold by Tri Micro, but it lacked the close integration of both Team-Mate and 3+1 and ended up tainted in the market by its predecessor. Commodore never adopted it. The failure of the Plus/4 to succeed the 64, much less overtake it, demonstrated clearly to Commodore management that 64 compatibility was essential in their next computer. Around this same time Sig Hartmann had noted the success of Atari's own first-party software unit Atarisoft on non-Atari platforms (though AtariLab was developed externally), even for the 64, and said there were similar plans to port Commodore first-party software and licenses to the Apple II, IBM PC and PCjr. (NARRATOR: This didn't happen.) However, by mid-1984 the software division had also developed a reputation for poor quality, with Scott Mace commenting in InfoWorld that — hits like International Soccer notwithstanding — "so far, the normal standard for Commodore software is mediocrity." In the meantime, Tramiel had bought the ailing Atari from Warner Communications and lured several Commodore managers, including Hartmann (who was already in conflict with Smith over cuts to the software division), to defect. Paul Goheen, the former systems software group head, became the new software chief. As the Commodore 128 neared completion, management constructed a new sales strategy to put it head to head against the Apple IIc and PCjr in specialty stores as well as Tramiel's favoured mass market retailers. To more plausibly bill it as a productivity machine, once again the software division had to look outside the company. Arktronics started in the dorms of the University of Michigan as a partnership between sophomore Robert "Bobby" Kotick and junior Howard Marks, who were then roommates. "We knew that unlike other industries," said Kotick in a 1984 interview, "there was a place for 19 and 20 year olds [in computers]." In July 1983 the company was formed to capitalize on Marks' ideas to envision a friendlier user interface for productivity applications. Marks, who was French, had previously worked for Apple and had access to its peripherals, including the then-novel use of a mouse as a pointer device. "This was way before there was ever a Lisa," Kotick added. "We realized that the biggest problem was that people like us couldn't use these things [computers] yet because they were too difficult and time-consuming to learn." They crafted a wish list and design document oriented to systems with 64K of RAM or less but featuring a picture (now we'd say icon-based) interface driven by a pointing device, such as a joystick or mouse, and an extensive on-line tutorial. Marks and Kotick hired students and even lured away some professors to work on the application, christened Jane after the Dick and Jane introductory reading books, who accepted shares in the company in lieu of salary. To fund development by their team of about thirty, Kotick tagged along with a friend to the annual Cattle Baron's Ball in Dallas at which he met real estate and casino investor Steve Wynn. Kotick managed to hitch a ride back to the East Coast on Wynn's plane where he pitched him on their company and Wynn encouraged him to write up a business plan. Three months later Marks and Kotick were summoned to Wynn's offices in Manhattan and flown to Atlantic City, whereupon Wynn handed them a cheque for $300,000 (in 2025 approximately $970,000) in exchange for a third of the company, providing business advice as the product progressed. Jane missed a first deadline for Comdex in December 1983 due to testing delays and finally launched at Softcon in February 1984 for the Apple II/II+ with 64K and the IIe at an MSRP of $295 [$920], later reduced to $179 [$560]. The program shipped on three colour-coded floppies, a grey bootable "systems disk" containing the word processor, database and spreadsheet applications (Janewrite, Janelist and Janecalc, respectively), a yellow "help disk" with the tutorial, and a black "data disk" for the user to save files. To ease the need for disk swapping, it would hunt for the right disk in either disk drive if you had two. Versions for the IBM PC and Atari 8-bits were said to be in progress. The initial release was uniquely accompanied by its own single-button mouse (Instagram link), a lower-cost unit — Kotick admitted settling for "a lesser quality product" — manufactured under contract by joystick maker Wico and incompatible with Apple's own later mouse options. This mouse interfaced to the Apple with a custom card and an 8-pin connector. Jane's appearance at the show attracted attention from another Steve, but at the Apple booth instead: Steve Jobs. Jobs visited the company in Ann Arbor and, suitably impressed, told Kotick and Marks they were wasting their time in college. Kotick duly dropped out to concentrate on the company, much to the consternation of his parents. Because it was intended to run on any existing Apple II with sufficient RAM, pretty much nothing was assumed about the hardware. It displayed strictly in monochrome and used the Apple hi-res mode to display upper and lowercase since the II/II+'s text mode was purely uppercase. Additionally, as 80-column capability wasn't universal, it used a software text shaper to display 60-column text in the word processor and, here, in the file requester. Basic windows like these, with title and information in the actual window bars, served for dialogue boxes and file selection. Although no emulator presently supports Jane's oddball original mouse, the PBS MacNeil/Lehrer NewsHour did a piece on Arktronics in 1984 (the photo above of Marks and an open Apple II case is from this clip) and, along with pictures of the Arktronics offices which I've scattered throughout this article, had some screenshots that illustrate its capabilities. Here a document is being edited in Janewrite. You can see close, scroll and size gadgets in the window frame, but interestingly the control to maximize the current window is in the lower right. The top of the screen shows the editing tools (hand pointer, arrow, scissors [cut], camera [copy] and paste jar), icons for the three core apps, and then system-wide icons for on-line help, printing, the file manager, preferences and "STOP" to globally cancel an operation. Across the bottom, beside the window maximize gadget, are tools for adjusting line justification, font style (bold, underline, bold and underline, superscript, subscript), print settings and search. I'll have more to say about all of these when we get to Jane's Commodore port. Document windows could also be moved and resized, and multiple windows from different Jane applications could be open simultaneously. If you hit Control-Reset, a Easter egg briefly flashes on-screen with the names of the Apple II programmers: Mike Lagae, John R. Haggis, Brent Iverson, Jim Poje, Peter Lee, Uwe Pleban, Allen Leibowitz and Ken Roe. Because portability to other, sometimes wildly different, systems was always contemplated, application-level components were written in a high level language and compiled for the target (allegedly an early microcomputer dialect of C), with the graphics and I/O drivers written directly in assembly. With the release of the IIc Arktronics updated the program to support Apple's mouse as well. Reviews of the Apple II version were decidedly mixed. In June 1984, InfoWorld called it "innovative" but also observed that "overbearing use of icons, some slow features, and some awkwardness mar the product, which could benefit from an emphasis on efficiency rather than gimmickry." Down under, Your Computer in November 1984 liked the simple interface and believed it would appeal to undemanding users but criticized the 236-page manual and found the mouse unreliable. "When the mouse works properly, it is good," wrote reviewer Evan McHugh, but "when it doesn't it's the pits." Likewise, although A+'s 1985 review also liked the interface and the fact that multiple windows from each module could be open at once, the magazine also felt that "the individual modules in Jane are not up to professional productivity quality." Perhaps because of the software display, Janewrite "was too slow to respond to the keystrokes of a moderately proficient typist," and Janecalc, equally slow, was also panned as "crippled" because it only supported a 24x20 maximum spreadsheet. "Thank you, Jane," quipped reviewer Danny Goodman, "[l]eave your number at the door." Jane was also billed as available for the Commodore 64, even in contemporary advertising, but COMPUTE!'s Gazette in January 1985 said it was "scheduled to be released for the Commodore 64 by the time you read this. The price is expected to be about $80 [$240]." Interviewed for the article, Marks said that Jane for the 64 was to come as a combination cartridge and disk package, where a "32K plug-in cartridge" would quickly and automatically bring up the system. The article claimed the cartridge would autoboot the applications from (now) just a single floppy plus the data disk, though I suspect the actual configuration was that the cartridge contained the applications and the disk contained the online tutorial, simultaneously furnishing a modicum of both instant access and copy protection. Notably, this version didn't come with its own mouse; Marks said they were working to support third-party mice as well as joystick and "touch pad" (presumably KoalaPad) options instead. Accounting for publishing delays, the Gazette piece would have been written several months prior in the fall of 1984 — after advertisements for the C64 version of Jane had been in multiple periodicals such as Creative Computing and Family Computing claiming you could purchase it already. In fact, the 64 version of Jane would never be released — it was simply cancelled once Commodore paid Arktronics to port it to the 128 and badged it as a Commodore product. As the 128's graphic and sound capabilities are virtually identical to the 64's in 40-column mode, save for the extra colour RAM, the port was relatively straightforward. (At the same time Commodore also rebadged the CP/M-based Perfect Software series from Thorn EMI for the 128, but this was non-exclusive, and their rebranded versions were exactly the same as sold for other CP/M-compatible systems. Goheen promised "comprehensive and professional developer support" for the new computer.) The new Jane could also be made cheaper: since the 128 is capable of autobooting a suitably coded floppy disk in drive 8, the cartridge could be dispensed with and the less expensive three-floppy scheme restored (though the grey disk was now called the "application disk"). A 128-mode 1541 fastloader is used if the new and much faster 1570 or 1571 disk drives aren't detected, though the 1571 still boots Jane noticeably faster than the fastloader. (Parenthetically, a frequent misconception is that the Z80 in the 128 does the boot sector check to start CP/M. In fact, the 8502 does that after the Z80 has already checked the Commodore key isn't down and entered 128 mode. In CP/M's case, the code in the CP/M disk boot sector instructs the 8502 to give control back to the Z80 so it can finish the boot sequence — if this weren't the case, the BASIC BOOT command wouldn't be able to start CP/M. Interestingly, 1581s booting CP/M have a special startup file to keep their own CP/M boot sector in a different location.) Otherwise, Jane 128 openly betrayed its origins on the 64: other than fastbooting with the 1571, which it mostly got for free, and support for the 128's new keys it took no advantage of any other 128 features, in particular no 2MHz support nor true VDC 80-column mode. Although the manual and box copy say using a mouse is supported, only the original 1350 mouse works, which strictly emulates a joystick. All three applications that were in the Apple II version are included. Under the hood the apps are implemented as overlays for a central kernel called JANEGM. Sadly, I didn't see any obvious credits while scanning through the disk files. The manual, which appears to have been written by a third party, insists on camelcasing the apps as JaneWrite, JaneCalc and JaneList even though the rear box copy doesn't distinguish them that way and the Apple II version and Arktronics' own advertising called them Janewrite, Janecalc and Janelist. I'll use the latter here. Commodore also included some official marketing material with the box, hawking their new 1902 monitor (with 80 column mode, which was useless for Jane), 1571 disk drive (which works well with Jane), 1670 Modem/1200 (which Jane doesn't use), 512K REU (which Jane doesn't use either) and the 1350 mouse — which in this photo is somewhat different-appearing than the released 1350/1351, and might have been a mockup. Actually, this system would have been a very nice 128 setup and very similar to the one we'll be using both for real and in VICE. Too bad Jane 128 could use relatively little of it. Both Jane and the Perfect series were demonstrated with the 128 for Winter CES 1985, though Commodore didn't announce MSRPs then for any of them at the time. It eventually emerged later that year for $49.95 [$150]; by the next year some retailers were selling it for as low as $35 [$100], compared to each of the Perfect titles then going for $45 apiece [$130]. Plus, the Perfect titles, being CP/M-based, were bland and text-based and failed to show off the C128's graphics, so Commodore ended up emphasizing Jane more in its contemporary marketing. Booting Jane 128 from the 128DCR's internal 1571 drive with my own 1902 monitor. Although its interface is similar to the Apple II's in broad strokes, Jane 128's most obvious difference is colour. However, there are numerous more subtle UI changes in this version, sufficient for it to be called "Jane 2.0" internally before release. We'll step through them here and in the next set of screenshots because they're an interesting comparison point to modern human interface practice. As with the Apple II, across the top of the screen are the various icons, or what the manual calls "pictures." These were slightly altered for the 128 from the Apple II originals. The blue icons again set the mode of the pointer ("tools") from the hand pointer, the insertion arrow, scissors (cut), camera (copy) and paste jar. The current tool is highlighted. You select a new tool by clicking on it, but you can also use the function keys (CLR/HOME, F1, F3, F5 and F7). By modern conventions Jane's tools are used backwards: instead of selecting a text range and "choosing a tool" (e.g., Command-C for copy) to operate on it, you choose a tool first and with that tool select the text range it operates on. I'll demonstrate this specific functionality in a couple instances, but any verb-object operation in Jane will work this way. (Linguistically, this makes Jane a head-initial language, while most modern GUIs are head-final.) Next to the tools are the main apps, Janewrite (now in purple), Janecalc (in green) and Janelist (in cyan), and next to them in grey are the same standard applets built into the kernel (online help, print dialogue, disk/file manager and setup). Finally, the STOP icon, now a solid red, stops the current app, and can be used to escape some screens, though not all. Unexpectedly it doesn't serve to quit Jane entirely: you just turn the computer off. Jane remembers what app is loaded and doesn't reload the overlay if you exit and re-enter it. However, unlike Jane for the Apple II, Jane 128 does not allow you to have multiple documents open simultaneously, a limitation that challenges the definition of "integrated software." In fact, of the three official Commodore productivity packages we've looked at so far, only poor abused 3-Plus-1 could do so. If you're working in one app and select another, Jane 128 will prompt you to save your work as if you'd clicked STOP, and the window will close. Given that the Apple II version managed to implement multiple documents in 64K of RAM, the Commodore 64 version — let alone the 128 — would seem to have little excuse, though I can think of two potential explanations. One is to increase the amount of memory available for any one document, which the Apple II version was indeed criticized for. The second is particular to the 128: its default memory configuration doesn't have a lot of free RAM, and it may have been judged too complicated to span or swap working sets across banks. (Some fiddling in the monitor shows that the documents simply occupy RAM in bank 1 and don't span elsewhere.) On the other hand, other 128 applications certainly do manage it, and it's possible development deadlines were a contributing factor. Let's start out with the online help, one of Marks and Kotick's fundamental design goals. Assuming you got the joystick (or 1350) plugged into the right port, there's a big honking question mark. What happens when you click on it? You get right into the online help window. The pointer snaps to the options; you can also move the pointer from option or cell to another option or cell with the CRSR keys/128 arrow keys and select it with the Commodore key. The window's yellow border is salient: any window that gives you choices to select from carries a yellow border. We'll see this again later. Incidentally, the manual is not in colour (just black, white and an accent magenta), and possibly as a result is all but totally ignorant of these UI choices or why they were made. The Apple II version's windows have a corner close gadget in the typical open square style, but this would only have made visual sense to someone familiar with the Lisa or Mac — which most Commodore users in 1985 wouldn't be. Instead, here windows you can close have a big bright red EXIT button (the ESC key can also serve this role in most cases). All icons are simply drawn onto the VIC-II high-res screen; unlike Magic Desk where pretty much everything was a sprite, the only sprite here is the pointer. Windows cannot be moved or resized, but by limiting icon and window boundaries to VIC-II 8x8 cells, drawing is fairly fast. Of course, most of the topics are on the yellow help disk (see? it matches). Jane 128, like the Apple II version, supports two disk drives, so you could have the help disk in device 9 and it would find it. The online help is pretty good, considering. It shows the icons and images as they would appear on-screen, and while they aren't live, they are accurate. The only black eye it gets is the technically truthful but functionally insufficient prompt "Press a key to continue" — the joystick or 1350 mouse button also work, and so does the ESC key to exit early, even though the exit button isn't shown. Some help items are animated and show you a demonstration, and each app has its own bespoke help. The system keeps track of what disks are where. If we start Janewrite by going to the typewriter, this blue dialogue box will appear — informational dialogue boxes always have a blue border — as it loads the overlay ... ... but then looks for a data disk, fails to find it, and asks for one. You need one even for a new document, and you can get stuck in a loop here if you don't provide one (pressing ESC just makes it try again, and clicking on the STOP icon doesn't do anything). You could put in the black data disk it comes with, but this one contains our generous donor's files, so we'll just give a blank disk image to VICE instead which Jane will offer to format. When creating a new data disk in VICE, if a 1571 is detected then Jane will want a real .d71 with the full available space, not a .d64, as it will then expect it can format both sides of the virtual disk. However, all of the Jane original disks, including the black one, are formatted single-sided for the 1541 since many early 128 owners would still be using one. The other way you can do this is from the disk icon. As these icons are in grey, so are their windows (except, curiously, help, but I can see how a yellow question mark would have looked bad against a white background), suggesting a global applet served by the central Jane kernel. The disk icon brings up a basic file manager allowing you to make duplicate backup files (but only to the same disk), rename or delete them, or create a new disk. The copy option is the default and is pre-selected when the window opens, which is irritating, because our modern reflexive habit of selecting the file first and then the action will cause an immediate copy to occur before you get the chance to click anything else. I don't think this was just me: there were several spurious duplicate files on the original black data disk I suspect for the same reason. If files are present on the disk, they will appear with their names and a filetype letter (W, C or L for Janewrite, Janecalc or Janelist respectively). Notice the slightly misshapen scrolling arrows, which were nice and clean on the Apple. We'll provide the .d71 to Jane here. Windows warning you about data loss have a red border. Interestingly, it provides both a No button and the exit button, which both do the same thing: abort back to the file manager. Jane seems unable to distinguish between an unformatted disk and a completely absent one, and will (fruitlessly) attempt to format an empty drive. Formatting in progress. The time estimates are surprisingly not far off. With our disk formatted, let's return to Janewrite at the end, since this will be the majority of the documents we'll convert. Instead, we'll start with the spreadsheet, Janecalc. Whenever any of the three built-in applications starts up, and once Jane has located the data disk, a file selector (in grey) appears. There are no spreadsheets ("worksheets") on our freshly formatted disk, so we click the NEW icon. Entering the new filename (blue window). You may have noticed that the red and blue windows are all invariably the same size regardless of contents and any active controls they contain. This probably simplified rendering quite a bit. Because Janecalc is green, its content window border is likewise green, and because Jane 128 doesn't multitask between the applications, it takes up the entirety of the screen. Two templates are provided, along with a roll-your-own option. We'll go with the Home Budget for illustration. The Home Budget template pulls up a simplified home budget by month which you can fill in. Jane supports 40, 64 and 80 column modes, all rendered in software on the VIC-IIe 320x200 display (not with the VDC's 640x200 display), but by default it uses 40. (I'll get to this in more detail in the word processor.) Along the bottom are various operators and the extent of the formula functions available (hardly competition for the Convergent WorkSlate). They can be selected with the pointer in lieu of text entry, which makes them quite discoverable, but in practice it's simply faster to type them. No other functions are implemented. Since the content window cannot be resized, the maximize gadget from the Apple II version became obviously useless and was removed. By using the joystick/mouse you can use the hand to point to a cell and then, with the hand pointing to it, just start typing text or a number. The cursor keys will move the pointer from cell to cell for you, though they will not exit the content area. If you click or otherwise select the cell with the hand, however, Jane considers this an attempt to construct a formula, which again would be frustrating to modern audiences used to, say, Microsoft Excel. But to edit it again, you pick the insert tool instead of the hand, and this time you must select the cell to type in it. Motion around the content area in all three applications is accomplished using multiple small icons in the bottom and right window borders. The "half full" icon pushes it all the way to the outer edge in that direction, while the double and single arrows move the viewport by large leaps and small leaps respectively. There are no thumbs to show relative location, but you can click anywhere along the scroll area for a proportionately "medium" jump if you like. You can also use CTRL-CRSR/CTRL-arrow keys. Even in 40-column mode, and even given that the scroll doesn't animate and just snaps to the new position, scrolling is agonizingly slow and multiple clicks on the scroll controls invariably overshoot. Putting it in 80 column mode doesn't just give you more on the screen — it also means you don't need to endure as many pauses trying to move around. Again, I'll have more to say about font sizes when we get to Janewrite. Unique to Janecalc, the scrolling actually wraps. Worksheets remain limited to 26 columns (A-Z), as in the Apple II version, but now up to 50 rows are allowed. Still, this wouldn't have been sufficient for anything larger than a modest small business, even in 1985. Formulas are approximately VisiCalc-style using A1 absolute notation for cells, though there are no sigils for functions (not that there's very many) and ranges are delimited by colons. Most basic math operators and parentheses are available. Here, we'll get a sum of this row ... ... and then manually calculate an average by dividing the sum by the count of populated rows (we could also just use avg). The template includes this at the bottom, but this shows you how formula entry worked. As we add data to dependent cells the sheets recalculate but circular references are not handled, though in fairness this capability was still not common in small spreadsheet applications. We'll go to Janelist next. When we do so, a red window pops up to prompt us to save our work. Switching to Janelist. Creating our new list. All very consistent (the file manager and requester seem to be part of the Jane kernel). Janelist, in fairness, never purported to be a database in any incarnation and acts more like a cardfile; even the manual merely refers to it as a "list keeper." Like Janecalc it comes with templates, though Janelist supports a substantial number more. For variety I'll try to enter some of my very large CD collection, because I'm one of those people (vinyl is for art, CD is for listening). The list comes up as fillable fields. There may be up to 15 field names up to 12 characters long. If you choose to create your own, then Jane will step you through entering the field names. That's about all the customization you can do. The values for those fields can span multiple lines, which is what the viewport scrolling is for — you use the icons at the bottom to advance through individual cards. Incidentally, Atom Heart Mother is Pink Floyd's finest album and I will tolerate no disagreement. The icon that looks like cards being pulled out suggests how to make a query (the magnifying glass icon, or possibly the funnel icon to denote a filter, wasn't universal at this point). Because it gives you choices, it's yellow, remember? The two OK buttons do different things. The top one filters cards to the query requested, but the bottom one undoes any query. You can query on top of queries for a primitive sort of logical-AND. Partial word searches are supported. For example, here is the second best Beatles album — the best is, of course, Abbey Road. Since we searched for the Beatles, when we run out of Beatles CDs, nothing more turns up from my formidable library. It is also possible to sort cards, in which case they appear in that order instead. You cannot sort on multiple fields, and you can't sort descending. Finally, Janewrite, where we will spend the rest of our time — and where apparently most of Jane's users spent theirs, including our previous owners. I've got a prefab file here I constructed while playing around to explore the file format, so this time we'll load a document instead of entering one, just to show you what that looks like from the file requester. Janewrite is IMHO the most polished and competent of the three apps, and it feels like the most development time was spent on it, too. It also shows what the Jane font renderer is capable of: although non-proportional and only a single typeface, you can see bold, underline, bold and underlined, superscript, and subscript are all possible. The bottom shows left, right, centre and full justification options, done per line, plus the font options, and then search (this time with a magnifying glass) and page layout. These icons are larger and more detailed than the Apple's. As with other parts of the UI, text attributes are set verb-initial, i.e., you would choose the desired style, then the insertion tool, then highlight the range of text and finally release the button (or, annoyingly, wait, which makes fine adjustments harder than they should be). Notice that there is an explicit bold-and-underline option, instead of using the separate bold and underline options in combination: that's because you can't make superscripted or subscripted text bold or underlined. The top of the content area shows the ruler — in characters, not inches — and margin stops and the single paragraph indent stop, which you can drag to change them. Interestingly, the ruler seems to be new for Jane 128: no screenshot for the Apple II version demonstrates one. Janewrite is also capable of a modicum of WYSIWYG if you select the 80 column option. This and other options come from the "computer" icon, which acts as a preference panel. Preferences are saved to the application disk and are global to all three applications. Despite this presenting a choice window (ordinarily yellow), Jane seems to treat it as a global window from the kernel, so it's grey. The bottom set of options are specifically for configuring the printer. Print output is generated with control codes and text only; Jane does not generate graphic sequences, so what actually shows up on the page depends on what your printer actually supports. The default middle print size option corresponds to 80 columns (more accurately, the default or 12cpi font size), while the small font corresponds to the condensed 15cpi and/or 132 column option available on some printers, and the large font corresponds to the 60 or 64-column (e.g., 10cpi) option also only available on some printers — not the expanded double wide printing option more typical of Commodore-specific devices. You could also select between regular fanfold tractor feed or plain paper, as well as the Near Letter Quality print option some printers supported, and finally the printer itself. There was built-in support for the MPS-801 (i.e., 1525), MPS-802 (i.e., 1526), 1101, "Oki" (generic Okidata), and generic "Epson" printers, assuming they were connected somehow to the IEC serial such as through a third-party parallel printer interface. These printer drivers varied wildly in their capabilities: the 1525/MPS-801 "driver" supported almost nothing except basic text, while the generic Okidata and Epson drivers supported nearly everything that Jane could generate. The "OTHER" driver is customizeable, a neat idea, if a little clumsy. A BASIC program called BUILDPRT on the grey disk allows you to populate it with your printer's control codes. Control sequences up to three characters long were supported. You would enter these from the manual, it would save them to disk, and then you could use the custom driver inside Jane. The topmost options affect the appearance of Jane. You can choose from three font sizes, all non-proportional, corresponding to 40, 64 or 80 column text. Confusingly, the 80-column option is the last when it's the middle option for printing. (The Apple II version likely didn't support 80 column text due to its smaller hi-res horizontal width.) Pointer speed and the "beep" Jane makes when you select options are also configurable. Here's how it looks in 80 columns, using the typical "soft 80" approach on the 64 which is more or less legible, at least on a composite display. As there are no colours in the content area, there is no risk of colour clash. This is probably the most useful view in Janewrite. The 64-column view, by contrast, is probably the least useful. The 40-column view is the most legible and 2:1 the size of a typical 80-column line, so it's easy to mentally grok page layout that way, but the 64-column view is odd enough to end up being the worst of both worlds. An interesting feature of Janewrite are the accented characters, which was not frequently seen on home computer-class word processors, as explained by the on-line help. Janewrite treats them as diacritics, and they can even be applied to letters that wouldn't ordinarily use them (because who knows? some language might), such as the grave and acute accents on the n as well as the more typical tilde. In fact, you can apply them to any character, even punctuation. However, the use of the up arrow to indicate a circumflex means there's no way you can type a literal caret into your document, and while a macron would have been nice, omitting the umlaut seems a greater fault. The decorators are also rather hard to distinguish in 80 columns, so Spanish users of Juana 128 might want to go to cuarenta column mode to mirar mejor. Janewrite also has basic find and/or find-and-replace, and a small pane appears below the content area when it's active. There are also decent page layout options, including setting both a per-page title and its position, adding a page number and its position, and margins, number of copies and starting page, though the last two would seem more appropriate for a print dialogue than a page layout one. Note that Jane will always print a 10-space left margin, so an 80-column printed line can be no longer than 70 characters, and this is indeed the maximum width Janewrite will support. However, paragraphs are apparently not stored as continuous sequences of text, demonstrated here with a contrived example. (In fact, we'll prove they aren't shortly.) While Janewrite will word-wrap at the right margin, inserting text after that will wrap onto a new line, not into the next line, even if the two lines were previously entered "together." There's a speed/flexibility tradeoff here in that Janewrite doesn't have to continuously reflow paragraphs, but it also means its concept of a paragraph is entirely based on how much you select. The text can be manually reflowed, joining lines if necessary, by picking one of the paragraph justification options and selecting the text with the hand, which will then be reflowed (and, if needed, spaces inserted) to match. In fact, this is also necessary if you change the margins because Jane doesn't automatically reformat your document then either. I also promised you an example of cut and paste, so here's one using the scissors (cut). You simply pick it and, with the button down, drag it across the text you want and release the button. Note that there is no undo, though I suppose you could just immediately paste it back in. Exiting Janewrite (though not saving, because we need the accented characters to stay in the file). Now that we understand what Jane can do and how it works, let's move on to converting the files. We can extract our test files we made from our .d71 with VICE's c1541 utility and hexdump it. This got a little more difficult than it should have been: % c1541 work.d71 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> dir 0 "data#000 " 01 2a 39 "c.TESTCALC" prg 3 "l.TESTLIST" prg 4 "w.nOTE.2" prg 4 "w.TESTCONV" prg 1278 blocks free. c1541 #8> read "w.TESTCONV" ERR = 62, FILE NOT FOUND, 00, 00 cannot read `w.TESTCONV' on unit 8 invalid filename As you may have guessed, that's because the filenames, and it turns out the data in the files themselves, are stored as true ASCII, not PETSCII (indeed as they would have been on the Apple II, also), so c1541's filename conversion fails. Fortunately, the extract command will walk the entire directory and pull out all the files no matter what they're named. The documents are all regular Commodore PRoGram files with a starting address and they appear to be loaded in-place at that address into bank 1. This introduces the possibility of some delightful save-file hacks but we're not here for that today. That means we can also simply extract our previous owners' files en masse as well. I imaged their disk using my ZoomFloppy and external 1571, and since they are normal PRGs, a BAM copy of the allocated sectors is all we need to do, with one wrinkle: % d64copy -B 9 r_jane_bam.d64 [Warning] growing image file to 683 blocks 14: --*****--*****--***** 8% 15/171[Warning] read error: 0e/00: 5 14: ?******************** 12% 21/171[Warning] giving up... 14: ?******************** 15: ********************* 16: ********************* 17: ********************* 18: ******************* 19: ******************* 20: ******************* 21: ******************* 22: ****..***...***...* 100% 171/171 170 blocks copied. % c1541 r_jane_bam.d64 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> extract c1541 #8> quit Fortunately it doesn't look like the bad sector was in any of the files they cared about. Let's get an idea of the format from our test files. Janecalc files are "huge" because it looks like the entire 26x50 cell range is saved regardless of whether anything's in it or not. Looking at the directory of their data disk where they had saved a couple of sparse test spreadsheets of their own, they also were 39 blocks in length no matter how many cells were actually populated. The on-disk format is consequentially a bit wasteful: 000003a0 00 00 00 00 00 20 20 20 4a 61 6e 75 61 72 79 20 |..... January | 000003b0 20 46 65 62 72 75 61 72 79 20 20 20 20 20 4d 61 | February Ma| 000003c0 72 63 68 20 20 20 20 20 41 70 72 69 6c 20 20 20 |rch April | 000003d0 20 20 20 20 4d 61 79 20 20 20 20 20 20 4a 75 6e | May Jun| 000003e0 65 20 20 20 20 20 20 4a 75 6c 79 20 20 20 20 41 |e July A| 000003f0 75 67 75 73 74 20 53 65 70 74 65 6d 62 65 72 20 |ugust September | 00000400 20 20 4f 63 74 6f 62 65 72 20 20 4e 6f 76 65 6d | October Novem| 00000410 62 65 72 20 20 44 65 63 65 6d 62 65 72 00 00 01 |ber December...| 00000420 04 00 00 00 00 00 00 20 20 54 6f 74 61 6c 20 20 |....... Total | 00000430 20 41 76 65 72 61 67 65 20 20 20 00 00 01 04 00 | Average .....| Cardfiles are stored much more efficiently. Here's the entirety of our two cards. The fields are in the header, padded out to the fixed 12 character length, but with technically unnecessary nulls between them. A spurious "Beatles" entry looks like a buffer that was captured as part of the save, and there is also a page-aligned (counting the starting address) pad of nulls. Otherwise, the value strings look null-delimited, in the order they appear in the field list (unpopulated fields are zero-length strings). When you run out of fields, you're on the next card. % hexdump -C l.TESTLIST 00000000 00 7f 01 00 36 02 08 00 04 00 54 69 74 6c 65 20 |....6.....Title | 00000010 20 20 20 20 20 20 00 4c 65 61 64 20 41 72 74 69 | .Lead Arti| 00000020 73 74 20 00 4f 74 68 65 72 20 41 72 74 69 73 74 |st .Other Artist| 00000030 00 43 6f 6d 70 6f 73 65 72 20 20 20 20 00 43 6f |.Composer .Co| 00000040 6e 64 75 63 74 6f 72 20 20 20 00 57 68 65 72 65 |nductor .Where| 00000050 20 4b 65 70 74 20 20 00 42 6f 72 72 6f 77 65 64 | Kept .Borrowed| 00000060 20 62 79 20 00 44 61 74 65 20 4c 65 6e 74 20 20 | by .Date Lent | 00000070 20 00 00 00 ff ff 01 ff ff ff ff ff ff ff ff ff | ...............| 00000080 ff ff ff ff ff 00 01 02 03 04 05 06 07 00 01 02 |................| 00000090 03 04 05 06 07 ff ff ff ff ff ff ff ff ff ff 00 |................| 000000a0 00 54 68 65 20 42 65 61 74 6c 65 73 00 00 00 00 |.The Beatles....| 000000b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00000100 d7 09 80 60 60 ac 98 09 ae 04 cf a5 ea a9 d7 15 |...``...........| 00000110 80 ac 1d 21 d6 1c 80 60 60 ac 98 09 ae 04 cf 20 |...!...``...... | 00000120 75 0b 00 00 ac 0a 95 a5 f0 b0 a9 a6 b1 a9 a4 b1 |u...............| 00000130 a5 f1 b0 a9 a7 b1 a9 a5 b1 ac c0 08 cf 20 75 0b |............. u.| 00000140 fe ff a5 37 ae 8c ff 00 c0 d8 4b 80 cf a5 f0 b0 |...7......K.....| 00000150 a7 a6 b1 c0 d8 60 80 a5 f1 b0 a7 a7 b1 c0 d8 60 |.....`.........`| 00000160 80 cf a5 f0 b0 a7 a6 b1 00 00 09 00 01 5d f6 00 |.............]..| 00000170 00 00 00 09 00 09 00 01 66 f6 00 00 00 00 54 00 |........f.....T.| 00000180 50 00 01 b1 f6 69 64 65 20 12 00 42 00 01 6f f6 |P....ide ..B..o.| 00000190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 000001a0 00 00 00 00 00 00 00 52 65 76 6f 6c 76 65 72 00 |.......Revolver.| 000001b0 54 68 65 20 42 65 61 74 6c 65 73 00 00 4c 65 6e |The Beatles..Len| 000001c0 6e 6f 6e 2d 4d 63 43 61 72 74 6e 65 79 2d 48 61 |non-McCartney-Ha| 000001d0 72 72 69 73 6f 6e 00 47 65 6f 72 67 65 20 4d 61 |rrison.George Ma| 000001e0 72 74 69 6e 00 00 00 00 00 41 74 6f 6d 20 48 65 |rtin.....Atom He| 000001f0 61 72 74 20 4d 6f 74 68 65 72 00 50 69 6e 6b 20 |art Mother.Pink | 00000200 46 6c 6f 79 64 00 00 57 61 74 65 72 73 2d 47 69 |Floyd..Waters-Gi| 00000210 6c 6d 6f 75 72 2d 4d 61 73 6f 6e 2d 57 72 69 67 |lmour-Mason-Wrig| 00000220 68 74 2d 47 65 65 73 6f 6e 00 50 69 6e 6b 20 46 |ht-Geeson.Pink F| 00000230 6c 6f 79 64 00 00 00 00 |loyd....| 00000238 This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. At least one side project would become critical to the reworked division. Engineer John Feagans had been the initial developer of the PET Kernal, its internal ROM-based operating system, which pioneered the then-novel idea of separating I/O and other system routines from the built-in Microsoft BASIC. (Prior versions of BASIC on early microcomputers often simply drove devices directly.) Feagans' innovation facilitated the use of these routines by user-written machine language programs through a standardized jump table, which was reused and greatly expanded by Bob Russell for the VIC-20 and 64. Feagans' side project was a PET demonstration of a small picture-based file manager, using an office filing cabinet as its central metaphor and drawn with PETSCII graphic characters. In 1982 the Commodore office in Moorpark, California where Feagans worked was closed and he was reassigned to their then-executive offices in Santa Clara. With little else to do at the time, Feagans rewrote his file cabinet demo for the new 64 to get familiar with the hardware, primarily in BASIC. As an exploration of the 64's joystick and moveable sprite capabilities, he additionally implemented an animated "hand" controlled by the joystick that served as a pointer. By this time Hartmann had just weeks until Summer CES in June 1983, the deadline he had promised Tramiel. While working on licensing deals with outside firms, Hartmann also ordered Andy Finkel, promoted from the VIC team to technical manager, to find anything the software division was already working on that could get finished fast. Finkel saw Feagans' new demo and convinced Hartmann that it was both feasible and viable as a product. Magic Desk was completed by Feagans, Finkel and other Commodore developers at record speed, recruiting resources from Rich Wiggins' speech group in Dallas, Texas and marketing and documentation head Michael Tomczyk, who in turn brought in artist and programmer Jeff Bruette to develop the sprite-based icons and additional PETSCII backgrounds. With time being a severely limited resource, after completion of the typewriter and filing cabinet it was instead decided that this Magic Desk would be the first of a whole line of Magic Desk software between which data could be exchanged. This was Magic Desk I: Type & File, and it made it to CES along with almost 70 other programs for the 64 and VIC-20. "We want everyone to know that Commodore's in the software business," Hartmann declared to COMPUTE!'s Gazette. Like many Commodore Software titles Magic Desk was released on cartridge, a wise decision as it started up within seconds, and its interface was colourful, audacious and unlike anything else at that year's CES. (At the time Feagans claimed never to have seen the Apple Lisa or Xerox PARC machines when he developed it, though his recollection later varied.) As a result it quickly overshadowed the software division's other C64 productivity titles licensed from outside companies, such as Easy Script from British developer Precision Software Ltd which débuted at the same show. When it eventually emerged for sale in the fall, however, reviewers were somewhat less enamoured. Although the user-friendly appearance was praised, RUN found the hand pointer difficult to manipulate and complained "the Help screens [were] little or no help," and Ahoy! noted the file cabinet required a disk drive and the questionable use of RELative files for storage, slowing access and hampering interchange. Reviewers also were quick to notice the icons for later planned Magic Desk modules, nevertheless already on the desktop yet programmed to do absolutely nothing. But the most unanimous and direct criticism came for what few built-in applications there were, especially the centrepiece typewriter which was seen as limited and idiosyncratic — and moreso given Magic Desk initially sold for $71.95 (in 2025 dollars over $230) at a time when other, better and often cheaper options had since become available, including from Commodore themselves. InfoWorld was the harshest of its detractors, concluding, "We really question whether Commodore's approach with Magic Desk is the best way to develop 'people literacy.'" Part of this cost was the expense of manufacture. Magic Desk initially came as 32K of ROM in four 8K chips, quite possibly the largest cartridge developed for the 64 at that time and requiring additional logic on the PCB for bank switching. (Its design is still used to this day for large multicarts, now supporting as much as a megabyte of ROM.) Internally, although some code had been converted to machine language using a custom compiler, there wasn't enough time to do it all and a fair portion of Magic Desk thus remained written in BASIC (moved up to start at $0a01 instead of $0801). As part of initialization this BASIC program is read out of the ROMs and copied to RAM for execution, which is the slight pause at the beginning before the title screen appears. Despite the cool press reception, Magic Desk sold surprisingly well to new 64 users, and in numbers sufficient to solve its production problems such that its price dropped in half by late 1984. Sales were enough to propose an upgraded version called Magic Desk II for Commodore's new (and, ultimately to its detriment, incompatible) 264 series, capable of speech prompts when paired with the speech group's Magic Voice synthesizer hardware, and featuring a more sophisticated interface with "Lisa-like" pulldown menus and icons. At the same time the software division finished the remaining pieces of the original 64 Magic Desk (now simply called "The Magic Desk"), also with speech capability; the screenshots here of the presumably completed budget and phone modules are from prototype ROMs in an auction lot of Feagans' old Commodore memorabilia, double the size of the original version. Commodore intended the upper-tier 264s to be home and small business productivity systems, designing their hardware and TED video chip to match, with the 64 remaining as their general purpose gaming and home computer. Tramiel strongly believed, as Michael Tomczyk wrote in The Home Computer Wars, that "home computers would have the power of small business computers like IBM and Apple — but would be priced like home computers, perhaps as low as under $500." Smaller versions of the 264, with their much lower part counts, could even compete in the ultra-low market segment against systems like the ZX series in the UK. As Hartmann, Tomczyk and others in the software group felt the 264 would be most meaningful with built-in software, Magic Desk II became one of several possible option ROMs representing potential machine configurations, along with others featuring different programming languages or applications like a spreadsheet or terminal program. Tramiel embraced the idea, seeing it as a car with different models "just like General Motors." At least three "flavours," aligning with the internal groups in the software division (business, home and education), were envisioned — though the concept also met swift resistance from dealers and even Commodore's own sales team who protested having to handle multiple different versions of one computer. (One possible unspoken reason is that it was already known not to be 64 compatible, and dealers were undoubtedly unhappy about taking stock space away from a financial anchor.) With time yet again a factor, for the top-end "business flavour" the software division looked for a quick potential port and found it in Trilogy, a forthcoming 64 software package from Orange County, California-based Tri Micro demonstrated at Spring Comdex 1983. Trilogy was to be a combination of three existing Tri Micro programs, Your Home Office (word processor and spreadsheet) and The Write File (word processor and database) merged into a single application, and Plus Graph (charting) — what would have been called "integrated software" in those days. Commodore contracted with David Johnson, its developer and Tri Micro's VP of software engineering, to also port it to the 264. In January 1984 Jack Tramiel was forced out of the company he founded by chairman Irving Gould and shortly thereafter the 264 line was slashed by new CEO Marshall Smith. Three models were chosen from the various prototypes and experiments, the 16K 16 (and in Europe the 116 as well) to serve as the low-end, and the 64K 264, now renamed the Plus/4, as the high-end. Both the completed Magic Desk and Magic Desk II were cut, as was the education flavour based on a built-in Logo implementation. Only the Plus/4 would offer Trilogy, renamed to 3-Plus-1, and its ROM size was cut to 32K to reduce production costs further which in turn forced Johnson to make serious reductions in functionality. As a result 3-Plus-1 became nearly as maligned as the Plus/4 itself (mocked in the press as the "Minus/60" for its idiosyncrasies, deliberately incompatible ports and lack of 64 software compatibility), though yours truly actually used the spreadsheet for a household budget when I was a starving student, and it wasn't that bad. Nevertheless, as evidence of the hasty last-minute switch, the Plus/4 manual still makes vague reference to "built-in software packages," saying the computer will tell you "which packages are available and which function key to use to activate them." There was only ever one in the production model, and it was 3+1. As Tri-Micro had still maintained the rights, Trilogy was subsequently released in its original form for the 64 as Team-Mate to the rave reviews 3-Plus-1 never got (in July 1985 RUN called it "a high-performance program that Commodore users will discover to be one of the best available"). Johnson later got his chance to show what 3+1 was really capable of with Plus/Extra, a full disk version sold by Tri Micro, but it lacked the close integration of both Team-Mate and 3+1 and ended up tainted in the market by its predecessor. Commodore never adopted it. The failure of the Plus/4 to succeed the 64, much less overtake it, demonstrated clearly to Commodore management that 64 compatibility was essential in their next computer. Around this same time Sig Hartmann had noted the success of Atari's own first-party software unit Atarisoft on non-Atari platforms (though AtariLab was developed externally), even for the 64, and said there were similar plans to port Commodore first-party software and licenses to the Apple II, IBM PC and PCjr. (NARRATOR: This didn't happen.) However, by mid-1984 the software division had also developed a reputation for poor quality, with Scott Mace commenting in InfoWorld that — hits like International Soccer notwithstanding — "so far, the normal standard for Commodore software is mediocrity." In the meantime, Tramiel had bought the ailing Atari from Warner Communications and lured several Commodore managers, including Hartmann (who was already in conflict with Smith over cuts to the software division), to defect. Paul Goheen, the former systems software group head, became the new software chief. As the Commodore 128 neared completion, management constructed a new sales strategy to put it head to head against the Apple IIc and PCjr in specialty stores as well as Tramiel's favoured mass market retailers. To more plausibly bill it as a productivity machine, once again the software division had to look outside the company. Arktronics started in the dorms of the University of Michigan as a partnership between sophomore Robert "Bobby" Kotick and junior Howard Marks, who were then roommates. "We knew that unlike other industries," said Kotick in a 1984 interview, "there was a place for 19 and 20 year olds [in computers]." In July 1983 the company was formed to capitalize on Marks' ideas to envision a friendlier user interface for productivity applications. Marks, who was French, had previously worked for Apple and had access to its peripherals, including the then-novel use of a mouse as a pointer device. "This was way before there was ever a Lisa," Kotick added. "We realized that the biggest problem was that people like us couldn't use these things [computers] yet because they were too difficult and time-consuming to learn." They crafted a wish list and design document oriented to systems with 64K of RAM or less but featuring a picture (now we'd say icon-based) interface driven by a pointing device, such as a joystick or mouse, and an extensive on-line tutorial. Marks and Kotick hired students and even lured away some professors to work on the application, christened Jane after the Dick and Jane introductory reading books, who accepted shares in the company in lieu of salary. To fund development by their team of about thirty, Kotick tagged along with a friend to the annual Cattle Baron's Ball in Dallas at which he met real estate and casino investor Steve Wynn. Kotick managed to hitch a ride back to the East Coast on Wynn's plane where he pitched him on their company and Wynn encouraged him to write up a business plan. Three months later Marks and Kotick were summoned to Wynn's offices in Manhattan and flown to Atlantic City, whereupon Wynn handed them a cheque for $300,000 (in 2025 approximately $970,000) in exchange for a third of the company, providing business advice as the product progressed. Jane missed a first deadline for Comdex in December 1983 due to testing delays and finally launched at Softcon in February 1984 for the Apple II/II+ with 64K and the IIe at an MSRP of $295 [$920], later reduced to $179 [$560]. The program shipped on three colour-coded floppies, a grey bootable "systems disk" containing the word processor, database and spreadsheet applications (Janewrite, Janelist and Janecalc, respectively), a yellow "help disk" with the tutorial, and a black "data disk" for the user to save files. To ease the need for disk swapping, it would hunt for the right disk in either disk drive if you had two. Versions for the IBM PC and Atari 8-bits were said to be in progress. The initial release was uniquely accompanied by its own single-button mouse (Instagram link), a lower-cost unit — Kotick admitted settling for "a lesser quality product" — manufactured under contract by joystick maker Wico and incompatible with Apple's own later mouse options. This mouse interfaced to the Apple with a custom card and an 8-pin connector. Jane's appearance at the show attracted attention from another Steve, but at the Apple booth instead: Steve Jobs. Jobs visited the company in Ann Arbor and, suitably impressed, told Kotick and Marks they were wasting their time in college. Kotick duly dropped out to concentrate on the company, much to the consternation of his parents. Because it was intended to run on any existing Apple II with sufficient RAM, pretty much nothing was assumed about the hardware. It displayed strictly in monochrome and used the Apple hi-res mode to display upper and lowercase since the II/II+'s text mode was purely uppercase. Additionally, as 80-column capability wasn't universal, it used a software text shaper to display 60-column text in the word processor and, here, in the file requester. Basic windows like these, with title and information in the actual window bars, served for dialogue boxes and file selection. Although no emulator presently supports Jane's oddball original mouse, the PBS MacNeil/Lehrer NewsHour did a piece on Arktronics in 1984 (the photo above of Marks and an open Apple II case is from this clip) and, along with pictures of the Arktronics offices which I've scattered throughout this article, had some screenshots that illustrate its capabilities. Here a document is being edited in Janewrite. You can see close, scroll and size gadgets in the window frame, but interestingly the control to maximize the current window is in the lower right. The top of the screen shows the editing tools (hand pointer, arrow, scissors [cut], camera [copy] and paste jar), icons for the three core apps, and then system-wide icons for on-line help, printing, the file manager, preferences and "STOP" to globally cancel an operation. Across the bottom, beside the window maximize gadget, are tools for adjusting line justification, font style (bold, underline, bold and underline, superscript, subscript), print settings and search. I'll have more to say about all of these when we get to Jane's Commodore port. Document windows could also be moved and resized, and multiple windows from different Jane applications could be open simultaneously. If you hit Control-Reset, a Easter egg briefly flashes on-screen with the names of the Apple II programmers: Mike Lagae, John R. Haggis, Brent Iverson, Jim Poje, Peter Lee, Uwe Pleban, Allen Leibowitz and Ken Roe. Because portability to other, sometimes wildly different, systems was always contemplated, application-level components were written in a high level language and compiled for the target (allegedly an early microcomputer dialect of C), with the graphics and I/O drivers written directly in assembly. With the release of the IIc Arktronics updated the program to support Apple's mouse as well. Reviews of the Apple II version were decidedly mixed. In June 1984, InfoWorld called it "innovative" but also observed that "overbearing use of icons, some slow features, and some awkwardness mar the product, which could benefit from an emphasis on efficiency rather than gimmickry." Down under, Your Computer in November 1984 liked the simple interface and believed it would appeal to undemanding users but criticized the 236-page manual and found the mouse unreliable. "When the mouse works properly, it is good," wrote reviewer Evan McHugh, but "when it doesn't it's the pits." Likewise, although A+'s 1985 review also liked the interface and the fact that multiple windows from each module could be open at once, the magazine also felt that "the individual modules in Jane are not up to professional productivity quality." Perhaps because of the software display, Janewrite "was too slow to respond to the keystrokes of a moderately proficient typist," and Janecalc, equally slow, was also panned as "crippled" because it only supported a 24x20 maximum spreadsheet. "Thank you, Jane," quipped reviewer Danny Goodman, "[l]eave your number at the door." Jane was also billed as available for the Commodore 64, even in contemporary advertising, but COMPUTE!'s Gazette in January 1985 said it was "scheduled to be released for the Commodore 64 by the time you read this. The price is expected to be about $80 [$240]." Interviewed for the article, Marks said that Jane for the 64 was to come as a combination cartridge and disk package, where a "32K plug-in cartridge" would quickly and automatically bring up the system. The article claimed the cartridge would autoboot the applications from (now) just a single floppy plus the data disk, though I suspect the actual configuration was that the cartridge contained the applications and the disk contained the online tutorial, simultaneously furnishing a modicum of both instant access and copy protection. Notably, this version didn't come with its own mouse; Marks said they were working to support third-party mice as well as joystick and "touch pad" (presumably KoalaPad) options instead. Accounting for publishing delays, the Gazette piece would have been written several months prior in the fall of 1984 — after advertisements for the C64 version of Jane had been in multiple periodicals such as Creative Computing and Family Computing claiming you could purchase it already. In fact, the 64 version of Jane would never be released — it was simply cancelled once Commodore paid Arktronics to port it to the 128 and badged it as a Commodore product. As the 128's graphic and sound capabilities are virtually identical to the 64's in 40-column mode, save for the extra colour RAM, the port was relatively straightforward. (At the same time Commodore also rebadged the CP/M-based Perfect Software series from Thorn EMI for the 128, but this was non-exclusive, and their rebranded versions were exactly the same as sold for other CP/M-compatible systems. Goheen promised "comprehensive and professional developer support" for the new computer.) The new Jane could also be made cheaper: since the 128 is capable of autobooting a suitably coded floppy disk in drive 8, the cartridge could be dispensed with and the less expensive three-floppy scheme restored (though the grey disk was now called the "application disk"). A 128-mode 1541 fastloader is used if the new and much faster 1570 or 1571 disk drives aren't detected, though the 1571 still boots Jane noticeably faster than the fastloader. (Parenthetically, a frequent misconception is that the Z80 in the 128 does the boot sector check to start CP/M. In fact, the 8502 does that after the Z80 has already checked the Commodore key isn't down and entered 128 mode. In CP/M's case, the code in the CP/M disk boot sector instructs the 8502 to give control back to the Z80 so it can finish the boot sequence — if this weren't the case, the BASIC BOOT command wouldn't be able to start CP/M. Interestingly, 1581s booting CP/M have a special startup file to keep their own CP/M boot sector in a different location.) Otherwise, Jane 128 openly betrayed its origins on the 64: other than fastbooting with the 1571, which it mostly got for free, and support for the 128's new keys it took no advantage of any other 128 features, in particular no 2MHz support nor true VDC 80-column mode. Although the manual and box copy say using a mouse is supported, only the original 1350 mouse works, which strictly emulates a joystick. All three applications that were in the Apple II version are included. Under the hood the apps are implemented as overlays for a central kernel called JANEGM. Sadly, I didn't see any obvious credits while scanning through the disk files. The manual, which appears to have been written by a third party, insists on camelcasing the apps as JaneWrite, JaneCalc and JaneList even though the rear box copy doesn't distinguish them that way and the Apple II version and Arktronics' own advertising called them Janewrite, Janecalc and Janelist. I'll use the latter here. Commodore also included some official marketing material with the box, hawking their new 1902 monitor (with 80 column mode, which was useless for Jane), 1571 disk drive (which works well with Jane), 1670 Modem/1200 (which Jane doesn't use), 512K REU (which Jane doesn't use either) and the 1350 mouse — which in this photo is somewhat different-appearing than the released 1350/1351, and might have been a mockup. Actually, this system would have been a very nice 128 setup and very similar to the one we'll be using both for real and in VICE. Too bad Jane 128 could use relatively little of it. Both Jane and the Perfect series were demonstrated with the 128 for Winter CES 1985, though Commodore didn't announce MSRPs then for any of them at the time. It eventually emerged later that year for $49.95 [$150]; by the next year some retailers were selling it for as low as $35 [$100], compared to each of the Perfect titles then going for $45 apiece [$130]. Plus, the Perfect titles, being CP/M-based, were bland and text-based and failed to show off the C128's graphics, so Commodore ended up emphasizing Jane more in its contemporary marketing. Booting Jane 128 from the 128DCR's internal 1571 drive with my own 1902 monitor. Although its interface is similar to the Apple II's in broad strokes, Jane 128's most obvious difference is colour. However, there are numerous more subtle UI changes in this version, sufficient for it to be called "Jane 2.0" internally before release. We'll step through them here and in the next set of screenshots because they're an interesting comparison point to modern human interface practice. As with the Apple II, across the top of the screen are the various icons, or what the manual calls "pictures." These were slightly altered for the 128 from the Apple II originals. The blue icons again set the mode of the pointer ("tools") from the hand pointer, the insertion arrow, scissors (cut), camera (copy) and paste jar. The current tool is highlighted. You select a new tool by clicking on it, but you can also use the function keys (CLR/HOME, F1, F3, F5 and F7). By modern conventions Jane's tools are used backwards: instead of selecting a text range and "choosing a tool" (e.g., Command-C for copy) to operate on it, you choose a tool first and with that tool select the text range it operates on. I'll demonstrate this specific functionality in a couple instances, but any verb-object operation in Jane will work this way. (Linguistically, this makes Jane a head-initial language, while most modern GUIs are head-final.) Next to the tools are the main apps, Janewrite (now in purple), Janecalc (in green) and Janelist (in cyan), and next to them in grey are the same standard applets built into the kernel (online help, print dialogue, disk/file manager and setup). Finally, the STOP icon, now a solid red, stops the current app, and can be used to escape some screens, though not all. Unexpectedly it doesn't serve to quit Jane entirely: you just turn the computer off. Jane remembers what app is loaded and doesn't reload the overlay if you exit and re-enter it. However, unlike Jane for the Apple II, Jane 128 does not allow you to have multiple documents open simultaneously, a limitation that challenges the definition of "integrated software." In fact, of the three official Commodore productivity packages we've looked at so far, only poor abused 3-Plus-1 could do so. If you're working in one app and select another, Jane 128 will prompt you to save your work as if you'd clicked STOP, and the window will close. Given that the Apple II version managed to implement multiple documents in 64K of RAM, the Commodore 64 version — let alone the 128 — would seem to have little excuse, though I can think of two potential explanations. One is to increase the amount of memory available for any one document, which the Apple II version was indeed criticized for. The second is particular to the 128: its default memory configuration doesn't have a lot of free RAM, and it may have been judged too complicated to span or swap working sets across banks. (Some fiddling in the monitor shows that the documents simply occupy RAM in bank 1 and don't span elsewhere.) On the other hand, other 128 applications certainly do manage it, and it's possible development deadlines were a contributing factor. Let's start out with the online help, one of Marks and Kotick's fundamental design goals. Assuming you got the joystick (or 1350) plugged into the right port, there's a big honking question mark. What happens when you click on it? You get right into the online help window. The pointer snaps to the options; you can also move the pointer from option or cell to another option or cell with the CRSR keys/128 arrow keys and select it with the Commodore key. The window's yellow border is salient: any window that gives you choices to select from carries a yellow border. We'll see this again later. Incidentally, the manual is not in colour (just black, white and an accent magenta), and possibly as a result is all but totally ignorant of these UI choices or why they were made. The Apple II version's windows have a corner close gadget in the typical open square style, but this would only have made visual sense to someone familiar with the Lisa or Mac — which most Commodore users in 1985 wouldn't be. Instead, here windows you can close have a big bright red EXIT button (the ESC key can also serve this role in most cases). All icons are simply drawn onto the VIC-II high-res screen; unlike Magic Desk where pretty much everything was a sprite, the only sprite here is the pointer. Windows cannot be moved or resized, but by limiting icon and window boundaries to VIC-II 8x8 cells, drawing is fairly fast. Of course, most of the topics are on the yellow help disk (see? it matches). Jane 128, like the Apple II version, supports two disk drives, so you could have the help disk in device 9 and it would find it. The online help is pretty good, considering. It shows the icons and images as they would appear on-screen, and while they aren't live, they are accurate. The only black eye it gets is the technically truthful but functionally insufficient prompt "Press a key to continue" — the joystick or 1350 mouse button also work, and so does the ESC key to exit early, even though the exit button isn't shown. Some help items are animated and show you a demonstration, and each app has its own bespoke help. The system keeps track of what disks are where. If we start Janewrite by going to the typewriter, this blue dialogue box will appear — informational dialogue boxes always have a blue border — as it loads the overlay ... ... but then looks for a data disk, fails to find it, and asks for one. You need one even for a new document, and you can get stuck in a loop here if you don't provide one (pressing ESC just makes it try again, and clicking on the STOP icon doesn't do anything). You could put in the black data disk it comes with, but this one contains our generous donor's files, so we'll just give a blank disk image to VICE instead which Jane will offer to format. When creating a new data disk in VICE, if a 1571 is detected then Jane will want a real .d71 with the full available space, not a .d64, as it will then expect it can format both sides of the virtual disk. However, all of the Jane original disks, including the black one, are formatted single-sided for the 1541 since many early 128 owners would still be using one. The other way you can do this is from the disk icon. As these icons are in grey, so are their windows (except, curiously, help, but I can see how a yellow question mark would have looked bad against a white background), suggesting a global applet served by the central Jane kernel. The disk icon brings up a basic file manager allowing you to make duplicate backup files (but only to the same disk), rename or delete them, or create a new disk. The copy option is the default and is pre-selected when the window opens, which is irritating, because our modern reflexive habit of selecting the file first and then the action will cause an immediate copy to occur before you get the chance to click anything else. I don't think this was just me: there were several spurious duplicate files on the original black data disk I suspect for the same reason. If files are present on the disk, they will appear with their names and a filetype letter (W, C or L for Janewrite, Janecalc or Janelist respectively). Notice the slightly misshapen scrolling arrows, which were nice and clean on the Apple. We'll provide the .d71 to Jane here. Windows warning you about data loss have a red border. Interestingly, it provides both a No button and the exit button, which both do the same thing: abort back to the file manager. Jane seems unable to distinguish between an unformatted disk and a completely absent one, and will (fruitlessly) attempt to format an empty drive. Formatting in progress. The time estimates are surprisingly not far off. With our disk formatted, let's return to Janewrite at the end, since this will be the majority of the documents we'll convert. Instead, we'll start with the spreadsheet, Janecalc. Whenever any of the three built-in applications starts up, and once Jane has located the data disk, a file selector (in grey) appears. There are no spreadsheets ("worksheets") on our freshly formatted disk, so we click the NEW icon. Entering the new filename (blue window). You may have noticed that the red and blue windows are all invariably the same size regardless of contents and any active controls they contain. This probably simplified rendering quite a bit. Because Janecalc is green, its content window border is likewise green, and because Jane 128 doesn't multitask between the applications, it takes up the entirety of the screen. Two templates are provided, along with a roll-your-own option. We'll go with the Home Budget for illustration. The Home Budget template pulls up a simplified home budget by month which you can fill in. Jane supports 40, 64 and 80 column modes, all rendered in software on the VIC-IIe 320x200 display (not with the VDC's 640x200 display), but by default it uses 40. (I'll get to this in more detail in the word processor.) Along the bottom are various operators and the extent of the formula functions available (hardly competition for the Convergent WorkSlate). They can be selected with the pointer in lieu of text entry, which makes them quite discoverable, but in practice it's simply faster to type them. No other functions are implemented. Since the content window cannot be resized, the maximize gadget from the Apple II version became obviously useless and was removed. By using the joystick/mouse you can use the hand to point to a cell and then, with the hand pointing to it, just start typing text or a number. The cursor keys will move the pointer from cell to cell for you, though they will not exit the content area. If you click or otherwise select the cell with the hand, however, Jane considers this an attempt to construct a formula, which again would be frustrating to modern audiences used to, say, Microsoft Excel. But to edit it again, you pick the insert tool instead of the hand, and this time you must select the cell to type in it. Motion around the content area in all three applications is accomplished using multiple small icons in the bottom and right window borders. The "half full" icon pushes it all the way to the outer edge in that direction, while the double and single arrows move the viewport by large leaps and small leaps respectively. There are no thumbs to show relative location, but you can click anywhere along the scroll area for a proportionately "medium" jump if you like. You can also use CTRL-CRSR/CTRL-arrow keys. Even in 40-column mode, and even given that the scroll doesn't animate and just snaps to the new position, scrolling is agonizingly slow and multiple clicks on the scroll controls invariably overshoot. Putting it in 80 column mode doesn't just give you more on the screen — it also means you don't need to endure as many pauses trying to move around. Again, I'll have more to say about font sizes when we get to Janewrite. Unique to Janecalc, the scrolling actually wraps. Worksheets remain limited to 26 columns (A-Z), as in the Apple II version, but now up to 50 rows are allowed. Still, this wouldn't have been sufficient for anything larger than a modest small business, even in 1985. Formulas are approximately VisiCalc-style using A1 absolute notation for cells, though there are no sigils for functions (not that there's very many) and ranges are delimited by colons. Most basic math operators and parentheses are available. Here, we'll get a sum of this row ... ... and then manually calculate an average by dividing the sum by the count of populated rows (we could also just use avg). The template includes this at the bottom, but this shows you how formula entry worked. As we add data to dependent cells the sheets recalculate but circular references are not handled, though in fairness this capability was still not common in small spreadsheet applications. We'll go to Janelist next. When we do so, a red window pops up to prompt us to save our work. Switching to Janelist. Creating our new list. All very consistent (the file manager and requester seem to be part of the Jane kernel). Janelist, in fairness, never purported to be a database in any incarnation and acts more like a cardfile; even the manual merely refers to it as a "list keeper." Like Janecalc it comes with templates, though Janelist supports a substantial number more. For variety I'll try to enter some of my very large CD collection, because I'm one of those people (vinyl is for art, CD is for listening). The list comes up as fillable fields. There may be up to 15 field names up to 12 characters long. If you choose to create your own, then Jane will step you through entering the field names. That's about all the customization you can do. The values for those fields can span multiple lines, which is what the viewport scrolling is for — you use the icons at the bottom to advance through individual cards. Incidentally, Atom Heart Mother is Pink Floyd's finest album and I will tolerate no disagreement. The icon that looks like cards being pulled out suggests how to make a query (the magnifying glass icon, or possibly the funnel icon to denote a filter, wasn't universal at this point). Because it gives you choices, it's yellow, remember? The two OK buttons do different things. The top one filters cards to the query requested, but the bottom one undoes any query. You can query on top of queries for a primitive sort of logical-AND. Partial word searches are supported. For example, here is the second best Beatles album — the best is, of course, Abbey Road. Since we searched for the Beatles, when we run out of Beatles CDs, nothing more turns up from my formidable library. It is also possible to sort cards, in which case they appear in that order instead. You cannot sort on multiple fields, and you can't sort descending. Finally, Janewrite, where we will spend the rest of our time — and where apparently most of Jane's users spent theirs, including our previous owners. I've got a prefab file here I constructed while playing around to explore the file format, so this time we'll load a document instead of entering one, just to show you what that looks like from the file requester. Janewrite is IMHO the most polished and competent of the three apps, and it feels like the most development time was spent on it, too. It also shows what the Jane font renderer is capable of: although non-proportional and only a single typeface, you can see bold, underline, bold and underlined, superscript, and subscript are all possible. The bottom shows left, right, centre and full justification options, done per line, plus the font options, and then search (this time with a magnifying glass) and page layout. These icons are larger and more detailed than the Apple's. As with other parts of the UI, text attributes are set verb-initial, i.e., you would choose the desired style, then the insertion tool, then highlight the range of text and finally release the button (or, annoyingly, wait, which makes fine adjustments harder than they should be). Notice that there is an explicit bold-and-underline option, instead of using the separate bold and underline options in combination: that's because you can't make superscripted or subscripted text bold or underlined. The top of the content area shows the ruler — in characters, not inches — and margin stops and the single paragraph indent stop, which you can drag to change them. Interestingly, the ruler seems to be new for Jane 128: no screenshot for the Apple II version demonstrates one. Janewrite is also capable of a modicum of WYSIWYG if you select the 80 column option. This and other options come from the "computer" icon, which acts as a preference panel. Preferences are saved to the application disk and are global to all three applications. Despite this presenting a choice window (ordinarily yellow), Jane seems to treat it as a global window from the kernel, so it's grey. The bottom set of options are specifically for configuring the printer. Print output is generated with control codes and text only; Jane does not generate graphic sequences, so what actually shows up on the page depends on what your printer actually supports. The default middle print size option corresponds to 80 columns (more accurately, the default or 12cpi font size), while the small font corresponds to the condensed 15cpi and/or 132 column option available on some printers, and the large font corresponds to the 60 or 64-column (e.g., 10cpi) option also only available on some printers — not the expanded double wide printing option more typical of Commodore-specific devices. You could also select between regular fanfold tractor feed or plain paper, as well as the Near Letter Quality print option some printers supported, and finally the printer itself. There was built-in support for the MPS-801 (i.e., 1525), MPS-802 (i.e., 1526), 1101, "Oki" (generic Okidata), and generic "Epson" printers, assuming they were connected somehow to the IEC serial such as through a third-party parallel printer interface. These printer drivers varied wildly in their capabilities: the 1525/MPS-801 "driver" supported almost nothing except basic text, while the generic Okidata and Epson drivers supported nearly everything that Jane could generate. The "OTHER" driver is customizeable, a neat idea, if a little clumsy. A BASIC program called BUILDPRT on the grey disk allows you to populate it with your printer's control codes. Control sequences up to three characters long were supported. You would enter these from the manual, it would save them to disk, and then you could use the custom driver inside Jane. The topmost options affect the appearance of Jane. You can choose from three font sizes, all non-proportional, corresponding to 40, 64 or 80 column text. Confusingly, the 80-column option is the last when it's the middle option for printing. (The Apple II version likely didn't support 80 column text due to its smaller hi-res horizontal width.) Pointer speed and the "beep" Jane makes when you select options are also configurable. Here's how it looks in 80 columns, using the typical "soft 80" approach on the 64 which is more or less legible, at least on a composite display. As there are no colours in the content area, there is no risk of colour clash. This is probably the most useful view in Janewrite. The 64-column view, by contrast, is probably the least useful. The 40-column view is the most legible and 2:1 the size of a typical 80-column line, so it's easy to mentally grok page layout that way, but the 64-column view is odd enough to end up being the worst of both worlds. An interesting feature of Janewrite are the accented characters, which was not frequently seen on home computer-class word processors, as explained by the on-line help. Janewrite treats them as diacritics, and they can even be applied to letters that wouldn't ordinarily use them (because who knows? some language might), such as the grave and acute accents on the n as well as the more typical tilde. In fact, you can apply them to any character, even punctuation. However, the use of the up arrow to indicate a circumflex means there's no way you can type a literal caret into your document, and while a macron would have been nice, omitting the umlaut seems a greater fault. The decorators are also rather hard to distinguish in 80 columns, so Spanish users of Juana 128 might want to go to cuarenta column mode to mirar mejor. Janewrite also has basic find and/or find-and-replace, and a small pane appears below the content area when it's active. There are also decent page layout options, including setting both a per-page title and its position, adding a page number and its position, and margins, number of copies and starting page, though the last two would seem more appropriate for a print dialogue than a page layout one. Note that Jane will always print a 10-space left margin, so an 80-column printed line can be no longer than 70 characters, and this is indeed the maximum width Janewrite will support. However, paragraphs are apparently not stored as continuous sequences of text, demonstrated here with a contrived example. (In fact, we'll prove they aren't shortly.) While Janewrite will word-wrap at the right margin, inserting text after that will wrap onto a new line, not into the next line, even if the two lines were previously entered "together." There's a speed/flexibility tradeoff here in that Janewrite doesn't have to continuously reflow paragraphs, but it also means its concept of a paragraph is entirely based on how much you select. The text can be manually reflowed, joining lines if necessary, by picking one of the paragraph justification options and selecting the text with the hand, which will then be reflowed (and, if needed, spaces inserted) to match. In fact, this is also necessary if you change the margins because Jane doesn't automatically reformat your document then either. I also promised you an example of cut and paste, so here's one using the scissors (cut). You simply pick it and, with the button down, drag it across the text you want and release the button. Note that there is no undo, though I suppose you could just immediately paste it back in. Exiting Janewrite (though not saving, because we need the accented characters to stay in the file). Now that we understand what Jane can do and how it works, let's move on to converting the files. We can extract our test files we made from our .d71 with VICE's c1541 utility and hexdump it. This got a little more difficult than it should have been: % c1541 work.d71 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> dir 0 "data#000 " 01 2a 39 "c.TESTCALC" prg 3 "l.TESTLIST" prg 4 "w.nOTE.2" prg 4 "w.TESTCONV" prg 1278 blocks free. c1541 #8> read "w.TESTCONV" ERR = 62, FILE NOT FOUND, 00, 00 cannot read `w.TESTCONV' on unit 8 invalid filename As you may have guessed, that's because the filenames, and it turns out the data in the files themselves, are stored as true ASCII, not PETSCII (indeed as they would have been on the Apple II, also), so c1541's filename conversion fails. Fortunately, the extract command will walk the entire directory and pull out all the files no matter what they're named. The documents are all regular Commodore PRoGram files with a starting address and they appear to be loaded in-place at that address into bank 1. This introduces the possibility of some delightful save-file hacks but we're not here for that today. That means we can also simply extract our previous owners' files en masse as well. I imaged their disk using my ZoomFloppy and external 1571, and since they are normal PRGs, a BAM copy of the allocated sectors is all we need to do, with one wrinkle: % d64copy -B 9 r_jane_bam.d64 [Warning] growing image file to 683 blocks 14: --*****--*****--***** 8% 15/171[Warning] read error: 0e/00: 5 14: ?******************** 12% 21/171[Warning] giving up... 14: ?******************** 15: ********************* 16: ********************* 17: ********************* 18: ******************* 19: ******************* 20: ******************* 21: ******************* 22: ****..***...***...* 100% 171/171 170 blocks copied. % c1541 r_jane_bam.d64 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> extract c1541 #8> quit Fortunately it doesn't look like the bad sector was in any of the files they cared about. Let's get an idea of the format from our test files. Janecalc files are "huge" because it looks like the entire 26x50 cell range is saved regardless of whether anything's in it or not. Looking at the directory of their data disk where they had saved a couple of sparse test spreadsheets of their own, they also were 39 blocks in length no matter how many cells were actually populated. The on-disk format is consequentially a bit wasteful: 000003a0 00 00 00 00 00 20 20 20 4a 61 6e 75 61 72 79 20 |..... January | 000003b0 20 46 65 62 72 75 61 72 79 20 20 20 20 20 4d 61 | February Ma| 000003c0 72 63 68 20 20 20 20 20 41 70 72 69 6c 20 20 20 |rch April | 000003d0 20 20 20 20 4d 61 79 20 20 20 20 20 20 4a 75 6e | May Jun| 000003e0 65 20 20 20 20 20 20 4a 75 6c 79 20 20 20 20 41 |e July A| 000003f0 75 67 75 73 74 20 53 65 70 74 65 6d 62 65 72 20 |ugust September | 00000400 20 20 4f 63 74 6f 62 65 72 20 20 4e 6f 76 65 6d | October Novem| 00000410 62 65 72 20 20 44 65 63 65 6d 62 65 72 00 00 01 |ber December...| 00000420 04 00 00 00 00 00 00 20 20 54 6f 74 61 6c 20 20 |....... Total | 00000430 20 41 76 65 72 61 67 65 20 20 20 00 00 01 04 00 | Average .....| Cardfiles are stored much more efficiently. Here's the entirety of our two cards. The fields are in the header, padded out to the fixed 12 character length, but with technically unnecessary nulls between them. A spurious "Beatles" entry looks like a buffer that was captured as part of the save, and there is also a page-aligned (counting the starting address) pad of nulls. Otherwise, the value strings look null-delimited, in the order they appear in the field list (unpopulated fields are zero-length strings). When you run out of fields, you're on the next card. % hexdump -C l.TESTLIST 00000000 00 7f 01 00 36 02 08 00 04 00 54 69 74 6c 65 20 |....6.....Title | 00000010 20 20 20 20 20 20 00 4c 65 61 64 20 41 72 74 69 | .Lead Arti| 00000020 73 74 20 00 4f 74 68 65 72 20 41 72 74 69 73 74 |st .Other Artist| 00000030 00 43 6f 6d 70 6f 73 65 72 20 20 20 20 00 43 6f |.Composer .Co| 00000040 6e 64 75 63 74 6f 72 20 20 20 00 57 68 65 72 65 |nductor .Where| 00000050 20 4b 65 70 74 20 20 00 42 6f 72 72 6f 77 65 64 | Kept .Borrowed| 00000060 20 62 79 20 00 44 61 74 65 20 4c 65 6e 74 20 20 | by .Date Lent | 00000070 20 00 00 00 ff ff 01 ff ff ff ff ff ff ff ff ff | ...............| 00000080 ff ff ff ff ff 00 01 02 03 04 05 06 07 00 01 02 |................| 00000090 03 04 05 06 07 ff ff ff ff ff ff ff ff ff ff 00 |................| 000000a0 00 54 68 65 20 42 65 61 74 6c 65 73 00 00 00 00 |.The Beatles....| 000000b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00000100 d7 09 80 60 60 ac 98 09 ae 04 cf a5 ea a9 d7 15 |...``...........| 00000110 80 ac 1d 21 d6 1c 80 60 60 ac 98 09 ae 04 cf 20 |...!...``...... | 00000120 75 0b 00 00 ac 0a 95 a5 f0 b0 a9 a6 b1 a9 a4 b1 |u...............| 00000130 a5 f1 b0 a9 a7 b1 a9 a5 b1 ac c0 08 cf 20 75 0b |............. u.| 00000140 fe ff a5 37 ae 8c ff 00 c0 d8 4b 80 cf a5 f0 b0 |...7......K.....| 00000150 a7 a6 b1 c0 d8 60 80 a5 f1 b0 a7 a7 b1 c0 d8 60 |.....`.........`| 00000160 80 cf a5 f0 b0 a7 a6 b1 00 00 09 00 01 5d f6 00 |.............]..| 00000170 00 00 00 09 00 09 00 01 66 f6 00 00 00 00 54 00 |........f.....T.| 00000180 50 00 01 b1 f6 69 64 65 20 12 00 42 00 01 6f f6 |P....ide ..B..o.| 00000190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 000001a0 00 00 00 00 00 00 00 52 65 76 6f 6c 76 65 72 00 |.......Revolver.| 000001b0 54 68 65 20 42 65 61 74 6c 65 73 00 00 4c 65 6e |The Beatles..Len| 000001c0 6e 6f 6e 2d 4d 63 43 61 72 74 6e 65 79 2d 48 61 |non-McCartney-Ha| 000001d0 72 72 69 73 6f 6e 00 47 65 6f 72 67 65 20 4d 61 |rrison.George Ma| 000001e0 72 74 69 6e 00 00 00 00 00 41 74 6f 6d 20 48 65 |rtin.....Atom He| 000001f0 61 72 74 20 4d 6f 74 68 65 72 00 50 69 6e 6b 20 |art Mother.Pink | 00000200 46 6c 6f 79 64 00 00 57 61 74 65 72 73 2d 47 69 |Floyd..Waters-Gi| 00000210 6c 6d 6f 75 72 2d 4d 61 73 6f 6e 2d 57 72 69 67 |lmour-Mason-Wrig| 00000220 68 74 2d 47 65 65 73 6f 6e 00 50 69 6e 6b 20 46 |ht-Geeson.Pink F| 00000230 6c 6f 79 64 00 00 00 00 |loyd....| 00000238 This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. Feagans' side project was a PET demonstration of a small picture-based file manager, using an office filing cabinet as its central metaphor and drawn with PETSCII graphic characters. In 1982 the Commodore office in Moorpark, California where Feagans worked was closed and he was reassigned to their then-executive offices in Santa Clara. With little else to do at the time, Feagans rewrote his file cabinet demo for the new 64 to get familiar with the hardware, primarily in BASIC. As an exploration of the 64's joystick and moveable sprite capabilities, he additionally implemented an animated "hand" controlled by the joystick that served as a pointer. By this time Hartmann had just weeks until Summer CES in June 1983, the deadline he had promised Tramiel. While working on licensing deals with outside firms, Hartmann also ordered Andy Finkel, promoted from the VIC team to technical manager, to find anything the software division was already working on that could get finished fast. Finkel saw Feagans' new demo and convinced Hartmann that it was both feasible and viable as a product. Magic Desk was completed by Feagans, Finkel and other Commodore developers at record speed, recruiting resources from Rich Wiggins' speech group in Dallas, Texas and marketing and documentation head Michael Tomczyk, who in turn brought in artist and programmer Jeff Bruette to develop the sprite-based icons and additional PETSCII backgrounds. With time being a severely limited resource, after completion of the typewriter and filing cabinet it was instead decided that this Magic Desk would be the first of a whole line of Magic Desk software between which data could be exchanged. This was Magic Desk I: Type & File, and it made it to CES along with almost 70 other programs for the 64 and VIC-20. "We want everyone to know that Commodore's in the software business," Hartmann declared to COMPUTE!'s Gazette. Like many Commodore Software titles Magic Desk was released on cartridge, a wise decision as it started up within seconds, and its interface was colourful, audacious and unlike anything else at that year's CES. (At the time Feagans claimed never to have seen the Apple Lisa or Xerox PARC machines when he developed it, though his recollection later varied.) As a result it quickly overshadowed the software division's other C64 productivity titles licensed from outside companies, such as Easy Script from British developer Precision Software Ltd which débuted at the same show. When it eventually emerged for sale in the fall, however, reviewers were somewhat less enamoured. Although the user-friendly appearance was praised, RUN found the hand pointer difficult to manipulate and complained "the Help screens [were] little or no help," and Ahoy! noted the file cabinet required a disk drive and the questionable use of RELative files for storage, slowing access and hampering interchange. Reviewers also were quick to notice the icons for later planned Magic Desk modules, nevertheless already on the desktop yet programmed to do absolutely nothing. But the most unanimous and direct criticism came for what few built-in applications there were, especially the centrepiece typewriter which was seen as limited and idiosyncratic — and moreso given Magic Desk initially sold for $71.95 (in 2025 dollars over $230) at a time when other, better and often cheaper options had since become available, including from Commodore themselves. InfoWorld was the harshest of its detractors, concluding, "We really question whether Commodore's approach with Magic Desk is the best way to develop 'people literacy.'" Part of this cost was the expense of manufacture. Magic Desk initially came as 32K of ROM in four 8K chips, quite possibly the largest cartridge developed for the 64 at that time and requiring additional logic on the PCB for bank switching. (Its design is still used to this day for large multicarts, now supporting as much as a megabyte of ROM.) Internally, although some code had been converted to machine language using a custom compiler, there wasn't enough time to do it all and a fair portion of Magic Desk thus remained written in BASIC (moved up to start at $0a01 instead of $0801). As part of initialization this BASIC program is read out of the ROMs and copied to RAM for execution, which is the slight pause at the beginning before the title screen appears. Despite the cool press reception, Magic Desk sold surprisingly well to new 64 users, and in numbers sufficient to solve its production problems such that its price dropped in half by late 1984. Sales were enough to propose an upgraded version called Magic Desk II for Commodore's new (and, ultimately to its detriment, incompatible) 264 series, capable of speech prompts when paired with the speech group's Magic Voice synthesizer hardware, and featuring a more sophisticated interface with "Lisa-like" pulldown menus and icons. At the same time the software division finished the remaining pieces of the original 64 Magic Desk (now simply called "The Magic Desk"), also with speech capability; the screenshots here of the presumably completed budget and phone modules are from prototype ROMs in an auction lot of Feagans' old Commodore memorabilia, double the size of the original version. Commodore intended the upper-tier 264s to be home and small business productivity systems, designing their hardware and TED video chip to match, with the 64 remaining as their general purpose gaming and home computer. Tramiel strongly believed, as Michael Tomczyk wrote in The Home Computer Wars, that "home computers would have the power of small business computers like IBM and Apple — but would be priced like home computers, perhaps as low as under $500." Smaller versions of the 264, with their much lower part counts, could even compete in the ultra-low market segment against systems like the ZX series in the UK. As Hartmann, Tomczyk and others in the software group felt the 264 would be most meaningful with built-in software, Magic Desk II became one of several possible option ROMs representing potential machine configurations, along with others featuring different programming languages or applications like a spreadsheet or terminal program. Tramiel embraced the idea, seeing it as a car with different models "just like General Motors." At least three "flavours," aligning with the internal groups in the software division (business, home and education), were envisioned — though the concept also met swift resistance from dealers and even Commodore's own sales team who protested having to handle multiple different versions of one computer. (One possible unspoken reason is that it was already known not to be 64 compatible, and dealers were undoubtedly unhappy about taking stock space away from a financial anchor.) With time yet again a factor, for the top-end "business flavour" the software division looked for a quick potential port and found it in Trilogy, a forthcoming 64 software package from Orange County, California-based Tri Micro demonstrated at Spring Comdex 1983. Trilogy was to be a combination of three existing Tri Micro programs, Your Home Office (word processor and spreadsheet) and The Write File (word processor and database) merged into a single application, and Plus Graph (charting) — what would have been called "integrated software" in those days. Commodore contracted with David Johnson, its developer and Tri Micro's VP of software engineering, to also port it to the 264. In January 1984 Jack Tramiel was forced out of the company he founded by chairman Irving Gould and shortly thereafter the 264 line was slashed by new CEO Marshall Smith. Three models were chosen from the various prototypes and experiments, the 16K 16 (and in Europe the 116 as well) to serve as the low-end, and the 64K 264, now renamed the Plus/4, as the high-end. Both the completed Magic Desk and Magic Desk II were cut, as was the education flavour based on a built-in Logo implementation. Only the Plus/4 would offer Trilogy, renamed to 3-Plus-1, and its ROM size was cut to 32K to reduce production costs further which in turn forced Johnson to make serious reductions in functionality. As a result 3-Plus-1 became nearly as maligned as the Plus/4 itself (mocked in the press as the "Minus/60" for its idiosyncrasies, deliberately incompatible ports and lack of 64 software compatibility), though yours truly actually used the spreadsheet for a household budget when I was a starving student, and it wasn't that bad. Nevertheless, as evidence of the hasty last-minute switch, the Plus/4 manual still makes vague reference to "built-in software packages," saying the computer will tell you "which packages are available and which function key to use to activate them." There was only ever one in the production model, and it was 3+1. As Tri-Micro had still maintained the rights, Trilogy was subsequently released in its original form for the 64 as Team-Mate to the rave reviews 3-Plus-1 never got (in July 1985 RUN called it "a high-performance program that Commodore users will discover to be one of the best available"). Johnson later got his chance to show what 3+1 was really capable of with Plus/Extra, a full disk version sold by Tri Micro, but it lacked the close integration of both Team-Mate and 3+1 and ended up tainted in the market by its predecessor. Commodore never adopted it. The failure of the Plus/4 to succeed the 64, much less overtake it, demonstrated clearly to Commodore management that 64 compatibility was essential in their next computer. Around this same time Sig Hartmann had noted the success of Atari's own first-party software unit Atarisoft on non-Atari platforms (though AtariLab was developed externally), even for the 64, and said there were similar plans to port Commodore first-party software and licenses to the Apple II, IBM PC and PCjr. (NARRATOR: This didn't happen.) However, by mid-1984 the software division had also developed a reputation for poor quality, with Scott Mace commenting in InfoWorld that — hits like International Soccer notwithstanding — "so far, the normal standard for Commodore software is mediocrity." In the meantime, Tramiel had bought the ailing Atari from Warner Communications and lured several Commodore managers, including Hartmann (who was already in conflict with Smith over cuts to the software division), to defect. Paul Goheen, the former systems software group head, became the new software chief. As the Commodore 128 neared completion, management constructed a new sales strategy to put it head to head against the Apple IIc and PCjr in specialty stores as well as Tramiel's favoured mass market retailers. To more plausibly bill it as a productivity machine, once again the software division had to look outside the company. Arktronics started in the dorms of the University of Michigan as a partnership between sophomore Robert "Bobby" Kotick and junior Howard Marks, who were then roommates. "We knew that unlike other industries," said Kotick in a 1984 interview, "there was a place for 19 and 20 year olds [in computers]." In July 1983 the company was formed to capitalize on Marks' ideas to envision a friendlier user interface for productivity applications. Marks, who was French, had previously worked for Apple and had access to its peripherals, including the then-novel use of a mouse as a pointer device. "This was way before there was ever a Lisa," Kotick added. "We realized that the biggest problem was that people like us couldn't use these things [computers] yet because they were too difficult and time-consuming to learn." They crafted a wish list and design document oriented to systems with 64K of RAM or less but featuring a picture (now we'd say icon-based) interface driven by a pointing device, such as a joystick or mouse, and an extensive on-line tutorial. Marks and Kotick hired students and even lured away some professors to work on the application, christened Jane after the Dick and Jane introductory reading books, who accepted shares in the company in lieu of salary. To fund development by their team of about thirty, Kotick tagged along with a friend to the annual Cattle Baron's Ball in Dallas at which he met real estate and casino investor Steve Wynn. Kotick managed to hitch a ride back to the East Coast on Wynn's plane where he pitched him on their company and Wynn encouraged him to write up a business plan. Three months later Marks and Kotick were summoned to Wynn's offices in Manhattan and flown to Atlantic City, whereupon Wynn handed them a cheque for $300,000 (in 2025 approximately $970,000) in exchange for a third of the company, providing business advice as the product progressed. Jane missed a first deadline for Comdex in December 1983 due to testing delays and finally launched at Softcon in February 1984 for the Apple II/II+ with 64K and the IIe at an MSRP of $295 [$920], later reduced to $179 [$560]. The program shipped on three colour-coded floppies, a grey bootable "systems disk" containing the word processor, database and spreadsheet applications (Janewrite, Janelist and Janecalc, respectively), a yellow "help disk" with the tutorial, and a black "data disk" for the user to save files. To ease the need for disk swapping, it would hunt for the right disk in either disk drive if you had two. Versions for the IBM PC and Atari 8-bits were said to be in progress. The initial release was uniquely accompanied by its own single-button mouse (Instagram link), a lower-cost unit — Kotick admitted settling for "a lesser quality product" — manufactured under contract by joystick maker Wico and incompatible with Apple's own later mouse options. This mouse interfaced to the Apple with a custom card and an 8-pin connector. Jane's appearance at the show attracted attention from another Steve, but at the Apple booth instead: Steve Jobs. Jobs visited the company in Ann Arbor and, suitably impressed, told Kotick and Marks they were wasting their time in college. Kotick duly dropped out to concentrate on the company, much to the consternation of his parents. Because it was intended to run on any existing Apple II with sufficient RAM, pretty much nothing was assumed about the hardware. It displayed strictly in monochrome and used the Apple hi-res mode to display upper and lowercase since the II/II+'s text mode was purely uppercase. Additionally, as 80-column capability wasn't universal, it used a software text shaper to display 60-column text in the word processor and, here, in the file requester. Basic windows like these, with title and information in the actual window bars, served for dialogue boxes and file selection. Although no emulator presently supports Jane's oddball original mouse, the PBS MacNeil/Lehrer NewsHour did a piece on Arktronics in 1984 (the photo above of Marks and an open Apple II case is from this clip) and, along with pictures of the Arktronics offices which I've scattered throughout this article, had some screenshots that illustrate its capabilities. Here a document is being edited in Janewrite. You can see close, scroll and size gadgets in the window frame, but interestingly the control to maximize the current window is in the lower right. The top of the screen shows the editing tools (hand pointer, arrow, scissors [cut], camera [copy] and paste jar), icons for the three core apps, and then system-wide icons for on-line help, printing, the file manager, preferences and "STOP" to globally cancel an operation. Across the bottom, beside the window maximize gadget, are tools for adjusting line justification, font style (bold, underline, bold and underline, superscript, subscript), print settings and search. I'll have more to say about all of these when we get to Jane's Commodore port. Document windows could also be moved and resized, and multiple windows from different Jane applications could be open simultaneously. If you hit Control-Reset, a Easter egg briefly flashes on-screen with the names of the Apple II programmers: Mike Lagae, John R. Haggis, Brent Iverson, Jim Poje, Peter Lee, Uwe Pleban, Allen Leibowitz and Ken Roe. Because portability to other, sometimes wildly different, systems was always contemplated, application-level components were written in a high level language and compiled for the target (allegedly an early microcomputer dialect of C), with the graphics and I/O drivers written directly in assembly. With the release of the IIc Arktronics updated the program to support Apple's mouse as well. Reviews of the Apple II version were decidedly mixed. In June 1984, InfoWorld called it "innovative" but also observed that "overbearing use of icons, some slow features, and some awkwardness mar the product, which could benefit from an emphasis on efficiency rather than gimmickry." Down under, Your Computer in November 1984 liked the simple interface and believed it would appeal to undemanding users but criticized the 236-page manual and found the mouse unreliable. "When the mouse works properly, it is good," wrote reviewer Evan McHugh, but "when it doesn't it's the pits." Likewise, although A+'s 1985 review also liked the interface and the fact that multiple windows from each module could be open at once, the magazine also felt that "the individual modules in Jane are not up to professional productivity quality." Perhaps because of the software display, Janewrite "was too slow to respond to the keystrokes of a moderately proficient typist," and Janecalc, equally slow, was also panned as "crippled" because it only supported a 24x20 maximum spreadsheet. "Thank you, Jane," quipped reviewer Danny Goodman, "[l]eave your number at the door." Jane was also billed as available for the Commodore 64, even in contemporary advertising, but COMPUTE!'s Gazette in January 1985 said it was "scheduled to be released for the Commodore 64 by the time you read this. The price is expected to be about $80 [$240]." Interviewed for the article, Marks said that Jane for the 64 was to come as a combination cartridge and disk package, where a "32K plug-in cartridge" would quickly and automatically bring up the system. The article claimed the cartridge would autoboot the applications from (now) just a single floppy plus the data disk, though I suspect the actual configuration was that the cartridge contained the applications and the disk contained the online tutorial, simultaneously furnishing a modicum of both instant access and copy protection. Notably, this version didn't come with its own mouse; Marks said they were working to support third-party mice as well as joystick and "touch pad" (presumably KoalaPad) options instead. Accounting for publishing delays, the Gazette piece would have been written several months prior in the fall of 1984 — after advertisements for the C64 version of Jane had been in multiple periodicals such as Creative Computing and Family Computing claiming you could purchase it already. In fact, the 64 version of Jane would never be released — it was simply cancelled once Commodore paid Arktronics to port it to the 128 and badged it as a Commodore product. As the 128's graphic and sound capabilities are virtually identical to the 64's in 40-column mode, save for the extra colour RAM, the port was relatively straightforward. (At the same time Commodore also rebadged the CP/M-based Perfect Software series from Thorn EMI for the 128, but this was non-exclusive, and their rebranded versions were exactly the same as sold for other CP/M-compatible systems. Goheen promised "comprehensive and professional developer support" for the new computer.) The new Jane could also be made cheaper: since the 128 is capable of autobooting a suitably coded floppy disk in drive 8, the cartridge could be dispensed with and the less expensive three-floppy scheme restored (though the grey disk was now called the "application disk"). A 128-mode 1541 fastloader is used if the new and much faster 1570 or 1571 disk drives aren't detected, though the 1571 still boots Jane noticeably faster than the fastloader. (Parenthetically, a frequent misconception is that the Z80 in the 128 does the boot sector check to start CP/M. In fact, the 8502 does that after the Z80 has already checked the Commodore key isn't down and entered 128 mode. In CP/M's case, the code in the CP/M disk boot sector instructs the 8502 to give control back to the Z80 so it can finish the boot sequence — if this weren't the case, the BASIC BOOT command wouldn't be able to start CP/M. Interestingly, 1581s booting CP/M have a special startup file to keep their own CP/M boot sector in a different location.) Otherwise, Jane 128 openly betrayed its origins on the 64: other than fastbooting with the 1571, which it mostly got for free, and support for the 128's new keys it took no advantage of any other 128 features, in particular no 2MHz support nor true VDC 80-column mode. Although the manual and box copy say using a mouse is supported, only the original 1350 mouse works, which strictly emulates a joystick. All three applications that were in the Apple II version are included. Under the hood the apps are implemented as overlays for a central kernel called JANEGM. Sadly, I didn't see any obvious credits while scanning through the disk files. The manual, which appears to have been written by a third party, insists on camelcasing the apps as JaneWrite, JaneCalc and JaneList even though the rear box copy doesn't distinguish them that way and the Apple II version and Arktronics' own advertising called them Janewrite, Janecalc and Janelist. I'll use the latter here. Commodore also included some official marketing material with the box, hawking their new 1902 monitor (with 80 column mode, which was useless for Jane), 1571 disk drive (which works well with Jane), 1670 Modem/1200 (which Jane doesn't use), 512K REU (which Jane doesn't use either) and the 1350 mouse — which in this photo is somewhat different-appearing than the released 1350/1351, and might have been a mockup. Actually, this system would have been a very nice 128 setup and very similar to the one we'll be using both for real and in VICE. Too bad Jane 128 could use relatively little of it. Both Jane and the Perfect series were demonstrated with the 128 for Winter CES 1985, though Commodore didn't announce MSRPs then for any of them at the time. It eventually emerged later that year for $49.95 [$150]; by the next year some retailers were selling it for as low as $35 [$100], compared to each of the Perfect titles then going for $45 apiece [$130]. Plus, the Perfect titles, being CP/M-based, were bland and text-based and failed to show off the C128's graphics, so Commodore ended up emphasizing Jane more in its contemporary marketing. Booting Jane 128 from the 128DCR's internal 1571 drive with my own 1902 monitor. Although its interface is similar to the Apple II's in broad strokes, Jane 128's most obvious difference is colour. However, there are numerous more subtle UI changes in this version, sufficient for it to be called "Jane 2.0" internally before release. We'll step through them here and in the next set of screenshots because they're an interesting comparison point to modern human interface practice. As with the Apple II, across the top of the screen are the various icons, or what the manual calls "pictures." These were slightly altered for the 128 from the Apple II originals. The blue icons again set the mode of the pointer ("tools") from the hand pointer, the insertion arrow, scissors (cut), camera (copy) and paste jar. The current tool is highlighted. You select a new tool by clicking on it, but you can also use the function keys (CLR/HOME, F1, F3, F5 and F7). By modern conventions Jane's tools are used backwards: instead of selecting a text range and "choosing a tool" (e.g., Command-C for copy) to operate on it, you choose a tool first and with that tool select the text range it operates on. I'll demonstrate this specific functionality in a couple instances, but any verb-object operation in Jane will work this way. (Linguistically, this makes Jane a head-initial language, while most modern GUIs are head-final.) Next to the tools are the main apps, Janewrite (now in purple), Janecalc (in green) and Janelist (in cyan), and next to them in grey are the same standard applets built into the kernel (online help, print dialogue, disk/file manager and setup). Finally, the STOP icon, now a solid red, stops the current app, and can be used to escape some screens, though not all. Unexpectedly it doesn't serve to quit Jane entirely: you just turn the computer off. Jane remembers what app is loaded and doesn't reload the overlay if you exit and re-enter it. However, unlike Jane for the Apple II, Jane 128 does not allow you to have multiple documents open simultaneously, a limitation that challenges the definition of "integrated software." In fact, of the three official Commodore productivity packages we've looked at so far, only poor abused 3-Plus-1 could do so. If you're working in one app and select another, Jane 128 will prompt you to save your work as if you'd clicked STOP, and the window will close. Given that the Apple II version managed to implement multiple documents in 64K of RAM, the Commodore 64 version — let alone the 128 — would seem to have little excuse, though I can think of two potential explanations. One is to increase the amount of memory available for any one document, which the Apple II version was indeed criticized for. The second is particular to the 128: its default memory configuration doesn't have a lot of free RAM, and it may have been judged too complicated to span or swap working sets across banks. (Some fiddling in the monitor shows that the documents simply occupy RAM in bank 1 and don't span elsewhere.) On the other hand, other 128 applications certainly do manage it, and it's possible development deadlines were a contributing factor. Let's start out with the online help, one of Marks and Kotick's fundamental design goals. Assuming you got the joystick (or 1350) plugged into the right port, there's a big honking question mark. What happens when you click on it? You get right into the online help window. The pointer snaps to the options; you can also move the pointer from option or cell to another option or cell with the CRSR keys/128 arrow keys and select it with the Commodore key. The window's yellow border is salient: any window that gives you choices to select from carries a yellow border. We'll see this again later. Incidentally, the manual is not in colour (just black, white and an accent magenta), and possibly as a result is all but totally ignorant of these UI choices or why they were made. The Apple II version's windows have a corner close gadget in the typical open square style, but this would only have made visual sense to someone familiar with the Lisa or Mac — which most Commodore users in 1985 wouldn't be. Instead, here windows you can close have a big bright red EXIT button (the ESC key can also serve this role in most cases). All icons are simply drawn onto the VIC-II high-res screen; unlike Magic Desk where pretty much everything was a sprite, the only sprite here is the pointer. Windows cannot be moved or resized, but by limiting icon and window boundaries to VIC-II 8x8 cells, drawing is fairly fast. Of course, most of the topics are on the yellow help disk (see? it matches). Jane 128, like the Apple II version, supports two disk drives, so you could have the help disk in device 9 and it would find it. The online help is pretty good, considering. It shows the icons and images as they would appear on-screen, and while they aren't live, they are accurate. The only black eye it gets is the technically truthful but functionally insufficient prompt "Press a key to continue" — the joystick or 1350 mouse button also work, and so does the ESC key to exit early, even though the exit button isn't shown. Some help items are animated and show you a demonstration, and each app has its own bespoke help. The system keeps track of what disks are where. If we start Janewrite by going to the typewriter, this blue dialogue box will appear — informational dialogue boxes always have a blue border — as it loads the overlay ... ... but then looks for a data disk, fails to find it, and asks for one. You need one even for a new document, and you can get stuck in a loop here if you don't provide one (pressing ESC just makes it try again, and clicking on the STOP icon doesn't do anything). You could put in the black data disk it comes with, but this one contains our generous donor's files, so we'll just give a blank disk image to VICE instead which Jane will offer to format. When creating a new data disk in VICE, if a 1571 is detected then Jane will want a real .d71 with the full available space, not a .d64, as it will then expect it can format both sides of the virtual disk. However, all of the Jane original disks, including the black one, are formatted single-sided for the 1541 since many early 128 owners would still be using one. The other way you can do this is from the disk icon. As these icons are in grey, so are their windows (except, curiously, help, but I can see how a yellow question mark would have looked bad against a white background), suggesting a global applet served by the central Jane kernel. The disk icon brings up a basic file manager allowing you to make duplicate backup files (but only to the same disk), rename or delete them, or create a new disk. The copy option is the default and is pre-selected when the window opens, which is irritating, because our modern reflexive habit of selecting the file first and then the action will cause an immediate copy to occur before you get the chance to click anything else. I don't think this was just me: there were several spurious duplicate files on the original black data disk I suspect for the same reason. If files are present on the disk, they will appear with their names and a filetype letter (W, C or L for Janewrite, Janecalc or Janelist respectively). Notice the slightly misshapen scrolling arrows, which were nice and clean on the Apple. We'll provide the .d71 to Jane here. Windows warning you about data loss have a red border. Interestingly, it provides both a No button and the exit button, which both do the same thing: abort back to the file manager. Jane seems unable to distinguish between an unformatted disk and a completely absent one, and will (fruitlessly) attempt to format an empty drive. Formatting in progress. The time estimates are surprisingly not far off. With our disk formatted, let's return to Janewrite at the end, since this will be the majority of the documents we'll convert. Instead, we'll start with the spreadsheet, Janecalc. Whenever any of the three built-in applications starts up, and once Jane has located the data disk, a file selector (in grey) appears. There are no spreadsheets ("worksheets") on our freshly formatted disk, so we click the NEW icon. Entering the new filename (blue window). You may have noticed that the red and blue windows are all invariably the same size regardless of contents and any active controls they contain. This probably simplified rendering quite a bit. Because Janecalc is green, its content window border is likewise green, and because Jane 128 doesn't multitask between the applications, it takes up the entirety of the screen. Two templates are provided, along with a roll-your-own option. We'll go with the Home Budget for illustration. The Home Budget template pulls up a simplified home budget by month which you can fill in. Jane supports 40, 64 and 80 column modes, all rendered in software on the VIC-IIe 320x200 display (not with the VDC's 640x200 display), but by default it uses 40. (I'll get to this in more detail in the word processor.) Along the bottom are various operators and the extent of the formula functions available (hardly competition for the Convergent WorkSlate). They can be selected with the pointer in lieu of text entry, which makes them quite discoverable, but in practice it's simply faster to type them. No other functions are implemented. Since the content window cannot be resized, the maximize gadget from the Apple II version became obviously useless and was removed. By using the joystick/mouse you can use the hand to point to a cell and then, with the hand pointing to it, just start typing text or a number. The cursor keys will move the pointer from cell to cell for you, though they will not exit the content area. If you click or otherwise select the cell with the hand, however, Jane considers this an attempt to construct a formula, which again would be frustrating to modern audiences used to, say, Microsoft Excel. But to edit it again, you pick the insert tool instead of the hand, and this time you must select the cell to type in it. Motion around the content area in all three applications is accomplished using multiple small icons in the bottom and right window borders. The "half full" icon pushes it all the way to the outer edge in that direction, while the double and single arrows move the viewport by large leaps and small leaps respectively. There are no thumbs to show relative location, but you can click anywhere along the scroll area for a proportionately "medium" jump if you like. You can also use CTRL-CRSR/CTRL-arrow keys. Even in 40-column mode, and even given that the scroll doesn't animate and just snaps to the new position, scrolling is agonizingly slow and multiple clicks on the scroll controls invariably overshoot. Putting it in 80 column mode doesn't just give you more on the screen — it also means you don't need to endure as many pauses trying to move around. Again, I'll have more to say about font sizes when we get to Janewrite. Unique to Janecalc, the scrolling actually wraps. Worksheets remain limited to 26 columns (A-Z), as in the Apple II version, but now up to 50 rows are allowed. Still, this wouldn't have been sufficient for anything larger than a modest small business, even in 1985. Formulas are approximately VisiCalc-style using A1 absolute notation for cells, though there are no sigils for functions (not that there's very many) and ranges are delimited by colons. Most basic math operators and parentheses are available. Here, we'll get a sum of this row ... ... and then manually calculate an average by dividing the sum by the count of populated rows (we could also just use avg). The template includes this at the bottom, but this shows you how formula entry worked. As we add data to dependent cells the sheets recalculate but circular references are not handled, though in fairness this capability was still not common in small spreadsheet applications. We'll go to Janelist next. When we do so, a red window pops up to prompt us to save our work. Switching to Janelist. Creating our new list. All very consistent (the file manager and requester seem to be part of the Jane kernel). Janelist, in fairness, never purported to be a database in any incarnation and acts more like a cardfile; even the manual merely refers to it as a "list keeper." Like Janecalc it comes with templates, though Janelist supports a substantial number more. For variety I'll try to enter some of my very large CD collection, because I'm one of those people (vinyl is for art, CD is for listening). The list comes up as fillable fields. There may be up to 15 field names up to 12 characters long. If you choose to create your own, then Jane will step you through entering the field names. That's about all the customization you can do. The values for those fields can span multiple lines, which is what the viewport scrolling is for — you use the icons at the bottom to advance through individual cards. Incidentally, Atom Heart Mother is Pink Floyd's finest album and I will tolerate no disagreement. The icon that looks like cards being pulled out suggests how to make a query (the magnifying glass icon, or possibly the funnel icon to denote a filter, wasn't universal at this point). Because it gives you choices, it's yellow, remember? The two OK buttons do different things. The top one filters cards to the query requested, but the bottom one undoes any query. You can query on top of queries for a primitive sort of logical-AND. Partial word searches are supported. For example, here is the second best Beatles album — the best is, of course, Abbey Road. Since we searched for the Beatles, when we run out of Beatles CDs, nothing more turns up from my formidable library. It is also possible to sort cards, in which case they appear in that order instead. You cannot sort on multiple fields, and you can't sort descending. Finally, Janewrite, where we will spend the rest of our time — and where apparently most of Jane's users spent theirs, including our previous owners. I've got a prefab file here I constructed while playing around to explore the file format, so this time we'll load a document instead of entering one, just to show you what that looks like from the file requester. Janewrite is IMHO the most polished and competent of the three apps, and it feels like the most development time was spent on it, too. It also shows what the Jane font renderer is capable of: although non-proportional and only a single typeface, you can see bold, underline, bold and underlined, superscript, and subscript are all possible. The bottom shows left, right, centre and full justification options, done per line, plus the font options, and then search (this time with a magnifying glass) and page layout. These icons are larger and more detailed than the Apple's. As with other parts of the UI, text attributes are set verb-initial, i.e., you would choose the desired style, then the insertion tool, then highlight the range of text and finally release the button (or, annoyingly, wait, which makes fine adjustments harder than they should be). Notice that there is an explicit bold-and-underline option, instead of using the separate bold and underline options in combination: that's because you can't make superscripted or subscripted text bold or underlined. The top of the content area shows the ruler — in characters, not inches — and margin stops and the single paragraph indent stop, which you can drag to change them. Interestingly, the ruler seems to be new for Jane 128: no screenshot for the Apple II version demonstrates one. Janewrite is also capable of a modicum of WYSIWYG if you select the 80 column option. This and other options come from the "computer" icon, which acts as a preference panel. Preferences are saved to the application disk and are global to all three applications. Despite this presenting a choice window (ordinarily yellow), Jane seems to treat it as a global window from the kernel, so it's grey. The bottom set of options are specifically for configuring the printer. Print output is generated with control codes and text only; Jane does not generate graphic sequences, so what actually shows up on the page depends on what your printer actually supports. The default middle print size option corresponds to 80 columns (more accurately, the default or 12cpi font size), while the small font corresponds to the condensed 15cpi and/or 132 column option available on some printers, and the large font corresponds to the 60 or 64-column (e.g., 10cpi) option also only available on some printers — not the expanded double wide printing option more typical of Commodore-specific devices. You could also select between regular fanfold tractor feed or plain paper, as well as the Near Letter Quality print option some printers supported, and finally the printer itself. There was built-in support for the MPS-801 (i.e., 1525), MPS-802 (i.e., 1526), 1101, "Oki" (generic Okidata), and generic "Epson" printers, assuming they were connected somehow to the IEC serial such as through a third-party parallel printer interface. These printer drivers varied wildly in their capabilities: the 1525/MPS-801 "driver" supported almost nothing except basic text, while the generic Okidata and Epson drivers supported nearly everything that Jane could generate. The "OTHER" driver is customizeable, a neat idea, if a little clumsy. A BASIC program called BUILDPRT on the grey disk allows you to populate it with your printer's control codes. Control sequences up to three characters long were supported. You would enter these from the manual, it would save them to disk, and then you could use the custom driver inside Jane. The topmost options affect the appearance of Jane. You can choose from three font sizes, all non-proportional, corresponding to 40, 64 or 80 column text. Confusingly, the 80-column option is the last when it's the middle option for printing. (The Apple II version likely didn't support 80 column text due to its smaller hi-res horizontal width.) Pointer speed and the "beep" Jane makes when you select options are also configurable. Here's how it looks in 80 columns, using the typical "soft 80" approach on the 64 which is more or less legible, at least on a composite display. As there are no colours in the content area, there is no risk of colour clash. This is probably the most useful view in Janewrite. The 64-column view, by contrast, is probably the least useful. The 40-column view is the most legible and 2:1 the size of a typical 80-column line, so it's easy to mentally grok page layout that way, but the 64-column view is odd enough to end up being the worst of both worlds. An interesting feature of Janewrite are the accented characters, which was not frequently seen on home computer-class word processors, as explained by the on-line help. Janewrite treats them as diacritics, and they can even be applied to letters that wouldn't ordinarily use them (because who knows? some language might), such as the grave and acute accents on the n as well as the more typical tilde. In fact, you can apply them to any character, even punctuation. However, the use of the up arrow to indicate a circumflex means there's no way you can type a literal caret into your document, and while a macron would have been nice, omitting the umlaut seems a greater fault. The decorators are also rather hard to distinguish in 80 columns, so Spanish users of Juana 128 might want to go to cuarenta column mode to mirar mejor. Janewrite also has basic find and/or find-and-replace, and a small pane appears below the content area when it's active. There are also decent page layout options, including setting both a per-page title and its position, adding a page number and its position, and margins, number of copies and starting page, though the last two would seem more appropriate for a print dialogue than a page layout one. Note that Jane will always print a 10-space left margin, so an 80-column printed line can be no longer than 70 characters, and this is indeed the maximum width Janewrite will support. However, paragraphs are apparently not stored as continuous sequences of text, demonstrated here with a contrived example. (In fact, we'll prove they aren't shortly.) While Janewrite will word-wrap at the right margin, inserting text after that will wrap onto a new line, not into the next line, even if the two lines were previously entered "together." There's a speed/flexibility tradeoff here in that Janewrite doesn't have to continuously reflow paragraphs, but it also means its concept of a paragraph is entirely based on how much you select. The text can be manually reflowed, joining lines if necessary, by picking one of the paragraph justification options and selecting the text with the hand, which will then be reflowed (and, if needed, spaces inserted) to match. In fact, this is also necessary if you change the margins because Jane doesn't automatically reformat your document then either. I also promised you an example of cut and paste, so here's one using the scissors (cut). You simply pick it and, with the button down, drag it across the text you want and release the button. Note that there is no undo, though I suppose you could just immediately paste it back in. Exiting Janewrite (though not saving, because we need the accented characters to stay in the file). Now that we understand what Jane can do and how it works, let's move on to converting the files. We can extract our test files we made from our .d71 with VICE's c1541 utility and hexdump it. This got a little more difficult than it should have been: % c1541 work.d71 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> dir 0 "data#000 " 01 2a 39 "c.TESTCALC" prg 3 "l.TESTLIST" prg 4 "w.nOTE.2" prg 4 "w.TESTCONV" prg 1278 blocks free. c1541 #8> read "w.TESTCONV" ERR = 62, FILE NOT FOUND, 00, 00 cannot read `w.TESTCONV' on unit 8 invalid filename As you may have guessed, that's because the filenames, and it turns out the data in the files themselves, are stored as true ASCII, not PETSCII (indeed as they would have been on the Apple II, also), so c1541's filename conversion fails. Fortunately, the extract command will walk the entire directory and pull out all the files no matter what they're named. The documents are all regular Commodore PRoGram files with a starting address and they appear to be loaded in-place at that address into bank 1. This introduces the possibility of some delightful save-file hacks but we're not here for that today. That means we can also simply extract our previous owners' files en masse as well. I imaged their disk using my ZoomFloppy and external 1571, and since they are normal PRGs, a BAM copy of the allocated sectors is all we need to do, with one wrinkle: % d64copy -B 9 r_jane_bam.d64 [Warning] growing image file to 683 blocks 14: --*****--*****--***** 8% 15/171[Warning] read error: 0e/00: 5 14: ?******************** 12% 21/171[Warning] giving up... 14: ?******************** 15: ********************* 16: ********************* 17: ********************* 18: ******************* 19: ******************* 20: ******************* 21: ******************* 22: ****..***...***...* 100% 171/171 170 blocks copied. % c1541 r_jane_bam.d64 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> extract c1541 #8> quit Fortunately it doesn't look like the bad sector was in any of the files they cared about. Let's get an idea of the format from our test files. Janecalc files are "huge" because it looks like the entire 26x50 cell range is saved regardless of whether anything's in it or not. Looking at the directory of their data disk where they had saved a couple of sparse test spreadsheets of their own, they also were 39 blocks in length no matter how many cells were actually populated. The on-disk format is consequentially a bit wasteful: 000003a0 00 00 00 00 00 20 20 20 4a 61 6e 75 61 72 79 20 |..... January | 000003b0 20 46 65 62 72 75 61 72 79 20 20 20 20 20 4d 61 | February Ma| 000003c0 72 63 68 20 20 20 20 20 41 70 72 69 6c 20 20 20 |rch April | 000003d0 20 20 20 20 4d 61 79 20 20 20 20 20 20 4a 75 6e | May Jun| 000003e0 65 20 20 20 20 20 20 4a 75 6c 79 20 20 20 20 41 |e July A| 000003f0 75 67 75 73 74 20 53 65 70 74 65 6d 62 65 72 20 |ugust September | 00000400 20 20 4f 63 74 6f 62 65 72 20 20 4e 6f 76 65 6d | October Novem| 00000410 62 65 72 20 20 44 65 63 65 6d 62 65 72 00 00 01 |ber December...| 00000420 04 00 00 00 00 00 00 20 20 54 6f 74 61 6c 20 20 |....... Total | 00000430 20 41 76 65 72 61 67 65 20 20 20 00 00 01 04 00 | Average .....| Cardfiles are stored much more efficiently. Here's the entirety of our two cards. The fields are in the header, padded out to the fixed 12 character length, but with technically unnecessary nulls between them. A spurious "Beatles" entry looks like a buffer that was captured as part of the save, and there is also a page-aligned (counting the starting address) pad of nulls. Otherwise, the value strings look null-delimited, in the order they appear in the field list (unpopulated fields are zero-length strings). When you run out of fields, you're on the next card. % hexdump -C l.TESTLIST 00000000 00 7f 01 00 36 02 08 00 04 00 54 69 74 6c 65 20 |....6.....Title | 00000010 20 20 20 20 20 20 00 4c 65 61 64 20 41 72 74 69 | .Lead Arti| 00000020 73 74 20 00 4f 74 68 65 72 20 41 72 74 69 73 74 |st .Other Artist| 00000030 00 43 6f 6d 70 6f 73 65 72 20 20 20 20 00 43 6f |.Composer .Co| 00000040 6e 64 75 63 74 6f 72 20 20 20 00 57 68 65 72 65 |nductor .Where| 00000050 20 4b 65 70 74 20 20 00 42 6f 72 72 6f 77 65 64 | Kept .Borrowed| 00000060 20 62 79 20 00 44 61 74 65 20 4c 65 6e 74 20 20 | by .Date Lent | 00000070 20 00 00 00 ff ff 01 ff ff ff ff ff ff ff ff ff | ...............| 00000080 ff ff ff ff ff 00 01 02 03 04 05 06 07 00 01 02 |................| 00000090 03 04 05 06 07 ff ff ff ff ff ff ff ff ff ff 00 |................| 000000a0 00 54 68 65 20 42 65 61 74 6c 65 73 00 00 00 00 |.The Beatles....| 000000b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00000100 d7 09 80 60 60 ac 98 09 ae 04 cf a5 ea a9 d7 15 |...``...........| 00000110 80 ac 1d 21 d6 1c 80 60 60 ac 98 09 ae 04 cf 20 |...!...``...... | 00000120 75 0b 00 00 ac 0a 95 a5 f0 b0 a9 a6 b1 a9 a4 b1 |u...............| 00000130 a5 f1 b0 a9 a7 b1 a9 a5 b1 ac c0 08 cf 20 75 0b |............. u.| 00000140 fe ff a5 37 ae 8c ff 00 c0 d8 4b 80 cf a5 f0 b0 |...7......K.....| 00000150 a7 a6 b1 c0 d8 60 80 a5 f1 b0 a7 a7 b1 c0 d8 60 |.....`.........`| 00000160 80 cf a5 f0 b0 a7 a6 b1 00 00 09 00 01 5d f6 00 |.............]..| 00000170 00 00 00 09 00 09 00 01 66 f6 00 00 00 00 54 00 |........f.....T.| 00000180 50 00 01 b1 f6 69 64 65 20 12 00 42 00 01 6f f6 |P....ide ..B..o.| 00000190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 000001a0 00 00 00 00 00 00 00 52 65 76 6f 6c 76 65 72 00 |.......Revolver.| 000001b0 54 68 65 20 42 65 61 74 6c 65 73 00 00 4c 65 6e |The Beatles..Len| 000001c0 6e 6f 6e 2d 4d 63 43 61 72 74 6e 65 79 2d 48 61 |non-McCartney-Ha| 000001d0 72 72 69 73 6f 6e 00 47 65 6f 72 67 65 20 4d 61 |rrison.George Ma| 000001e0 72 74 69 6e 00 00 00 00 00 41 74 6f 6d 20 48 65 |rtin.....Atom He| 000001f0 61 72 74 20 4d 6f 74 68 65 72 00 50 69 6e 6b 20 |art Mother.Pink | 00000200 46 6c 6f 79 64 00 00 57 61 74 65 72 73 2d 47 69 |Floyd..Waters-Gi| 00000210 6c 6d 6f 75 72 2d 4d 61 73 6f 6e 2d 57 72 69 67 |lmour-Mason-Wrig| 00000220 68 74 2d 47 65 65 73 6f 6e 00 50 69 6e 6b 20 46 |ht-Geeson.Pink F| 00000230 6c 6f 79 64 00 00 00 00 |loyd....| 00000238 This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. Part of this cost was the expense of manufacture. Magic Desk initially came as 32K of ROM in four 8K chips, quite possibly the largest cartridge developed for the 64 at that time and requiring additional logic on the PCB for bank switching. (Its design is still used to this day for large multicarts, now supporting as much as a megabyte of ROM.) Internally, although some code had been converted to machine language using a custom compiler, there wasn't enough time to do it all and a fair portion of Magic Desk thus remained written in BASIC (moved up to start at $0a01 instead of $0801). As part of initialization this BASIC program is read out of the ROMs and copied to RAM for execution, which is the slight pause at the beginning before the title screen appears. Despite the cool press reception, Magic Desk sold surprisingly well to new 64 users, and in numbers sufficient to solve its production problems such that its price dropped in half by late 1984. Sales were enough to propose an upgraded version called Magic Desk II for Commodore's new (and, ultimately to its detriment, incompatible) 264 series, capable of speech prompts when paired with the speech group's Magic Voice synthesizer hardware, and featuring a more sophisticated interface with "Lisa-like" pulldown menus and icons. At the same time the software division finished the remaining pieces of the original 64 Magic Desk (now simply called "The Magic Desk"), also with speech capability; the screenshots here of the presumably completed budget and phone modules are from prototype ROMs in an auction lot of Feagans' old Commodore memorabilia, double the size of the original version. Commodore intended the upper-tier 264s to be home and small business productivity systems, designing their hardware and TED video chip to match, with the 64 remaining as their general purpose gaming and home computer. Tramiel strongly believed, as Michael Tomczyk wrote in The Home Computer Wars, that "home computers would have the power of small business computers like IBM and Apple — but would be priced like home computers, perhaps as low as under $500." Smaller versions of the 264, with their much lower part counts, could even compete in the ultra-low market segment against systems like the ZX series in the UK. As Hartmann, Tomczyk and others in the software group felt the 264 would be most meaningful with built-in software, Magic Desk II became one of several possible option ROMs representing potential machine configurations, along with others featuring different programming languages or applications like a spreadsheet or terminal program. Tramiel embraced the idea, seeing it as a car with different models "just like General Motors." At least three "flavours," aligning with the internal groups in the software division (business, home and education), were envisioned — though the concept also met swift resistance from dealers and even Commodore's own sales team who protested having to handle multiple different versions of one computer. (One possible unspoken reason is that it was already known not to be 64 compatible, and dealers were undoubtedly unhappy about taking stock space away from a financial anchor.) With time yet again a factor, for the top-end "business flavour" the software division looked for a quick potential port and found it in Trilogy, a forthcoming 64 software package from Orange County, California-based Tri Micro demonstrated at Spring Comdex 1983. Trilogy was to be a combination of three existing Tri Micro programs, Your Home Office (word processor and spreadsheet) and The Write File (word processor and database) merged into a single application, and Plus Graph (charting) — what would have been called "integrated software" in those days. Commodore contracted with David Johnson, its developer and Tri Micro's VP of software engineering, to also port it to the 264. In January 1984 Jack Tramiel was forced out of the company he founded by chairman Irving Gould and shortly thereafter the 264 line was slashed by new CEO Marshall Smith. Three models were chosen from the various prototypes and experiments, the 16K 16 (and in Europe the 116 as well) to serve as the low-end, and the 64K 264, now renamed the Plus/4, as the high-end. Both the completed Magic Desk and Magic Desk II were cut, as was the education flavour based on a built-in Logo implementation. Only the Plus/4 would offer Trilogy, renamed to 3-Plus-1, and its ROM size was cut to 32K to reduce production costs further which in turn forced Johnson to make serious reductions in functionality. As a result 3-Plus-1 became nearly as maligned as the Plus/4 itself (mocked in the press as the "Minus/60" for its idiosyncrasies, deliberately incompatible ports and lack of 64 software compatibility), though yours truly actually used the spreadsheet for a household budget when I was a starving student, and it wasn't that bad. Nevertheless, as evidence of the hasty last-minute switch, the Plus/4 manual still makes vague reference to "built-in software packages," saying the computer will tell you "which packages are available and which function key to use to activate them." There was only ever one in the production model, and it was 3+1. As Tri-Micro had still maintained the rights, Trilogy was subsequently released in its original form for the 64 as Team-Mate to the rave reviews 3-Plus-1 never got (in July 1985 RUN called it "a high-performance program that Commodore users will discover to be one of the best available"). Johnson later got his chance to show what 3+1 was really capable of with Plus/Extra, a full disk version sold by Tri Micro, but it lacked the close integration of both Team-Mate and 3+1 and ended up tainted in the market by its predecessor. Commodore never adopted it. The failure of the Plus/4 to succeed the 64, much less overtake it, demonstrated clearly to Commodore management that 64 compatibility was essential in their next computer. Around this same time Sig Hartmann had noted the success of Atari's own first-party software unit Atarisoft on non-Atari platforms (though AtariLab was developed externally), even for the 64, and said there were similar plans to port Commodore first-party software and licenses to the Apple II, IBM PC and PCjr. (NARRATOR: This didn't happen.) However, by mid-1984 the software division had also developed a reputation for poor quality, with Scott Mace commenting in InfoWorld that — hits like International Soccer notwithstanding — "so far, the normal standard for Commodore software is mediocrity." In the meantime, Tramiel had bought the ailing Atari from Warner Communications and lured several Commodore managers, including Hartmann (who was already in conflict with Smith over cuts to the software division), to defect. Paul Goheen, the former systems software group head, became the new software chief. As the Commodore 128 neared completion, management constructed a new sales strategy to put it head to head against the Apple IIc and PCjr in specialty stores as well as Tramiel's favoured mass market retailers. To more plausibly bill it as a productivity machine, once again the software division had to look outside the company. Arktronics started in the dorms of the University of Michigan as a partnership between sophomore Robert "Bobby" Kotick and junior Howard Marks, who were then roommates. "We knew that unlike other industries," said Kotick in a 1984 interview, "there was a place for 19 and 20 year olds [in computers]." In July 1983 the company was formed to capitalize on Marks' ideas to envision a friendlier user interface for productivity applications. Marks, who was French, had previously worked for Apple and had access to its peripherals, including the then-novel use of a mouse as a pointer device. "This was way before there was ever a Lisa," Kotick added. "We realized that the biggest problem was that people like us couldn't use these things [computers] yet because they were too difficult and time-consuming to learn." They crafted a wish list and design document oriented to systems with 64K of RAM or less but featuring a picture (now we'd say icon-based) interface driven by a pointing device, such as a joystick or mouse, and an extensive on-line tutorial. Marks and Kotick hired students and even lured away some professors to work on the application, christened Jane after the Dick and Jane introductory reading books, who accepted shares in the company in lieu of salary. To fund development by their team of about thirty, Kotick tagged along with a friend to the annual Cattle Baron's Ball in Dallas at which he met real estate and casino investor Steve Wynn. Kotick managed to hitch a ride back to the East Coast on Wynn's plane where he pitched him on their company and Wynn encouraged him to write up a business plan. Three months later Marks and Kotick were summoned to Wynn's offices in Manhattan and flown to Atlantic City, whereupon Wynn handed them a cheque for $300,000 (in 2025 approximately $970,000) in exchange for a third of the company, providing business advice as the product progressed. Jane missed a first deadline for Comdex in December 1983 due to testing delays and finally launched at Softcon in February 1984 for the Apple II/II+ with 64K and the IIe at an MSRP of $295 [$920], later reduced to $179 [$560]. The program shipped on three colour-coded floppies, a grey bootable "systems disk" containing the word processor, database and spreadsheet applications (Janewrite, Janelist and Janecalc, respectively), a yellow "help disk" with the tutorial, and a black "data disk" for the user to save files. To ease the need for disk swapping, it would hunt for the right disk in either disk drive if you had two. Versions for the IBM PC and Atari 8-bits were said to be in progress. The initial release was uniquely accompanied by its own single-button mouse (Instagram link), a lower-cost unit — Kotick admitted settling for "a lesser quality product" — manufactured under contract by joystick maker Wico and incompatible with Apple's own later mouse options. This mouse interfaced to the Apple with a custom card and an 8-pin connector. Jane's appearance at the show attracted attention from another Steve, but at the Apple booth instead: Steve Jobs. Jobs visited the company in Ann Arbor and, suitably impressed, told Kotick and Marks they were wasting their time in college. Kotick duly dropped out to concentrate on the company, much to the consternation of his parents. Because it was intended to run on any existing Apple II with sufficient RAM, pretty much nothing was assumed about the hardware. It displayed strictly in monochrome and used the Apple hi-res mode to display upper and lowercase since the II/II+'s text mode was purely uppercase. Additionally, as 80-column capability wasn't universal, it used a software text shaper to display 60-column text in the word processor and, here, in the file requester. Basic windows like these, with title and information in the actual window bars, served for dialogue boxes and file selection. Although no emulator presently supports Jane's oddball original mouse, the PBS MacNeil/Lehrer NewsHour did a piece on Arktronics in 1984 (the photo above of Marks and an open Apple II case is from this clip) and, along with pictures of the Arktronics offices which I've scattered throughout this article, had some screenshots that illustrate its capabilities. Here a document is being edited in Janewrite. You can see close, scroll and size gadgets in the window frame, but interestingly the control to maximize the current window is in the lower right. The top of the screen shows the editing tools (hand pointer, arrow, scissors [cut], camera [copy] and paste jar), icons for the three core apps, and then system-wide icons for on-line help, printing, the file manager, preferences and "STOP" to globally cancel an operation. Across the bottom, beside the window maximize gadget, are tools for adjusting line justification, font style (bold, underline, bold and underline, superscript, subscript), print settings and search. I'll have more to say about all of these when we get to Jane's Commodore port. Document windows could also be moved and resized, and multiple windows from different Jane applications could be open simultaneously. If you hit Control-Reset, a Easter egg briefly flashes on-screen with the names of the Apple II programmers: Mike Lagae, John R. Haggis, Brent Iverson, Jim Poje, Peter Lee, Uwe Pleban, Allen Leibowitz and Ken Roe. Because portability to other, sometimes wildly different, systems was always contemplated, application-level components were written in a high level language and compiled for the target (allegedly an early microcomputer dialect of C), with the graphics and I/O drivers written directly in assembly. With the release of the IIc Arktronics updated the program to support Apple's mouse as well. Reviews of the Apple II version were decidedly mixed. In June 1984, InfoWorld called it "innovative" but also observed that "overbearing use of icons, some slow features, and some awkwardness mar the product, which could benefit from an emphasis on efficiency rather than gimmickry." Down under, Your Computer in November 1984 liked the simple interface and believed it would appeal to undemanding users but criticized the 236-page manual and found the mouse unreliable. "When the mouse works properly, it is good," wrote reviewer Evan McHugh, but "when it doesn't it's the pits." Likewise, although A+'s 1985 review also liked the interface and the fact that multiple windows from each module could be open at once, the magazine also felt that "the individual modules in Jane are not up to professional productivity quality." Perhaps because of the software display, Janewrite "was too slow to respond to the keystrokes of a moderately proficient typist," and Janecalc, equally slow, was also panned as "crippled" because it only supported a 24x20 maximum spreadsheet. "Thank you, Jane," quipped reviewer Danny Goodman, "[l]eave your number at the door." Jane was also billed as available for the Commodore 64, even in contemporary advertising, but COMPUTE!'s Gazette in January 1985 said it was "scheduled to be released for the Commodore 64 by the time you read this. The price is expected to be about $80 [$240]." Interviewed for the article, Marks said that Jane for the 64 was to come as a combination cartridge and disk package, where a "32K plug-in cartridge" would quickly and automatically bring up the system. The article claimed the cartridge would autoboot the applications from (now) just a single floppy plus the data disk, though I suspect the actual configuration was that the cartridge contained the applications and the disk contained the online tutorial, simultaneously furnishing a modicum of both instant access and copy protection. Notably, this version didn't come with its own mouse; Marks said they were working to support third-party mice as well as joystick and "touch pad" (presumably KoalaPad) options instead. Accounting for publishing delays, the Gazette piece would have been written several months prior in the fall of 1984 — after advertisements for the C64 version of Jane had been in multiple periodicals such as Creative Computing and Family Computing claiming you could purchase it already. In fact, the 64 version of Jane would never be released — it was simply cancelled once Commodore paid Arktronics to port it to the 128 and badged it as a Commodore product. As the 128's graphic and sound capabilities are virtually identical to the 64's in 40-column mode, save for the extra colour RAM, the port was relatively straightforward. (At the same time Commodore also rebadged the CP/M-based Perfect Software series from Thorn EMI for the 128, but this was non-exclusive, and their rebranded versions were exactly the same as sold for other CP/M-compatible systems. Goheen promised "comprehensive and professional developer support" for the new computer.) The new Jane could also be made cheaper: since the 128 is capable of autobooting a suitably coded floppy disk in drive 8, the cartridge could be dispensed with and the less expensive three-floppy scheme restored (though the grey disk was now called the "application disk"). A 128-mode 1541 fastloader is used if the new and much faster 1570 or 1571 disk drives aren't detected, though the 1571 still boots Jane noticeably faster than the fastloader. (Parenthetically, a frequent misconception is that the Z80 in the 128 does the boot sector check to start CP/M. In fact, the 8502 does that after the Z80 has already checked the Commodore key isn't down and entered 128 mode. In CP/M's case, the code in the CP/M disk boot sector instructs the 8502 to give control back to the Z80 so it can finish the boot sequence — if this weren't the case, the BASIC BOOT command wouldn't be able to start CP/M. Interestingly, 1581s booting CP/M have a special startup file to keep their own CP/M boot sector in a different location.) Otherwise, Jane 128 openly betrayed its origins on the 64: other than fastbooting with the 1571, which it mostly got for free, and support for the 128's new keys it took no advantage of any other 128 features, in particular no 2MHz support nor true VDC 80-column mode. Although the manual and box copy say using a mouse is supported, only the original 1350 mouse works, which strictly emulates a joystick. All three applications that were in the Apple II version are included. Under the hood the apps are implemented as overlays for a central kernel called JANEGM. Sadly, I didn't see any obvious credits while scanning through the disk files. The manual, which appears to have been written by a third party, insists on camelcasing the apps as JaneWrite, JaneCalc and JaneList even though the rear box copy doesn't distinguish them that way and the Apple II version and Arktronics' own advertising called them Janewrite, Janecalc and Janelist. I'll use the latter here. Commodore also included some official marketing material with the box, hawking their new 1902 monitor (with 80 column mode, which was useless for Jane), 1571 disk drive (which works well with Jane), 1670 Modem/1200 (which Jane doesn't use), 512K REU (which Jane doesn't use either) and the 1350 mouse — which in this photo is somewhat different-appearing than the released 1350/1351, and might have been a mockup. Actually, this system would have been a very nice 128 setup and very similar to the one we'll be using both for real and in VICE. Too bad Jane 128 could use relatively little of it. Both Jane and the Perfect series were demonstrated with the 128 for Winter CES 1985, though Commodore didn't announce MSRPs then for any of them at the time. It eventually emerged later that year for $49.95 [$150]; by the next year some retailers were selling it for as low as $35 [$100], compared to each of the Perfect titles then going for $45 apiece [$130]. Plus, the Perfect titles, being CP/M-based, were bland and text-based and failed to show off the C128's graphics, so Commodore ended up emphasizing Jane more in its contemporary marketing. Booting Jane 128 from the 128DCR's internal 1571 drive with my own 1902 monitor. Although its interface is similar to the Apple II's in broad strokes, Jane 128's most obvious difference is colour. However, there are numerous more subtle UI changes in this version, sufficient for it to be called "Jane 2.0" internally before release. We'll step through them here and in the next set of screenshots because they're an interesting comparison point to modern human interface practice. As with the Apple II, across the top of the screen are the various icons, or what the manual calls "pictures." These were slightly altered for the 128 from the Apple II originals. The blue icons again set the mode of the pointer ("tools") from the hand pointer, the insertion arrow, scissors (cut), camera (copy) and paste jar. The current tool is highlighted. You select a new tool by clicking on it, but you can also use the function keys (CLR/HOME, F1, F3, F5 and F7). By modern conventions Jane's tools are used backwards: instead of selecting a text range and "choosing a tool" (e.g., Command-C for copy) to operate on it, you choose a tool first and with that tool select the text range it operates on. I'll demonstrate this specific functionality in a couple instances, but any verb-object operation in Jane will work this way. (Linguistically, this makes Jane a head-initial language, while most modern GUIs are head-final.) Next to the tools are the main apps, Janewrite (now in purple), Janecalc (in green) and Janelist (in cyan), and next to them in grey are the same standard applets built into the kernel (online help, print dialogue, disk/file manager and setup). Finally, the STOP icon, now a solid red, stops the current app, and can be used to escape some screens, though not all. Unexpectedly it doesn't serve to quit Jane entirely: you just turn the computer off. Jane remembers what app is loaded and doesn't reload the overlay if you exit and re-enter it. However, unlike Jane for the Apple II, Jane 128 does not allow you to have multiple documents open simultaneously, a limitation that challenges the definition of "integrated software." In fact, of the three official Commodore productivity packages we've looked at so far, only poor abused 3-Plus-1 could do so. If you're working in one app and select another, Jane 128 will prompt you to save your work as if you'd clicked STOP, and the window will close. Given that the Apple II version managed to implement multiple documents in 64K of RAM, the Commodore 64 version — let alone the 128 — would seem to have little excuse, though I can think of two potential explanations. One is to increase the amount of memory available for any one document, which the Apple II version was indeed criticized for. The second is particular to the 128: its default memory configuration doesn't have a lot of free RAM, and it may have been judged too complicated to span or swap working sets across banks. (Some fiddling in the monitor shows that the documents simply occupy RAM in bank 1 and don't span elsewhere.) On the other hand, other 128 applications certainly do manage it, and it's possible development deadlines were a contributing factor. Let's start out with the online help, one of Marks and Kotick's fundamental design goals. Assuming you got the joystick (or 1350) plugged into the right port, there's a big honking question mark. What happens when you click on it? You get right into the online help window. The pointer snaps to the options; you can also move the pointer from option or cell to another option or cell with the CRSR keys/128 arrow keys and select it with the Commodore key. The window's yellow border is salient: any window that gives you choices to select from carries a yellow border. We'll see this again later. Incidentally, the manual is not in colour (just black, white and an accent magenta), and possibly as a result is all but totally ignorant of these UI choices or why they were made. The Apple II version's windows have a corner close gadget in the typical open square style, but this would only have made visual sense to someone familiar with the Lisa or Mac — which most Commodore users in 1985 wouldn't be. Instead, here windows you can close have a big bright red EXIT button (the ESC key can also serve this role in most cases). All icons are simply drawn onto the VIC-II high-res screen; unlike Magic Desk where pretty much everything was a sprite, the only sprite here is the pointer. Windows cannot be moved or resized, but by limiting icon and window boundaries to VIC-II 8x8 cells, drawing is fairly fast. Of course, most of the topics are on the yellow help disk (see? it matches). Jane 128, like the Apple II version, supports two disk drives, so you could have the help disk in device 9 and it would find it. The online help is pretty good, considering. It shows the icons and images as they would appear on-screen, and while they aren't live, they are accurate. The only black eye it gets is the technically truthful but functionally insufficient prompt "Press a key to continue" — the joystick or 1350 mouse button also work, and so does the ESC key to exit early, even though the exit button isn't shown. Some help items are animated and show you a demonstration, and each app has its own bespoke help. The system keeps track of what disks are where. If we start Janewrite by going to the typewriter, this blue dialogue box will appear — informational dialogue boxes always have a blue border — as it loads the overlay ... ... but then looks for a data disk, fails to find it, and asks for one. You need one even for a new document, and you can get stuck in a loop here if you don't provide one (pressing ESC just makes it try again, and clicking on the STOP icon doesn't do anything). You could put in the black data disk it comes with, but this one contains our generous donor's files, so we'll just give a blank disk image to VICE instead which Jane will offer to format. When creating a new data disk in VICE, if a 1571 is detected then Jane will want a real .d71 with the full available space, not a .d64, as it will then expect it can format both sides of the virtual disk. However, all of the Jane original disks, including the black one, are formatted single-sided for the 1541 since many early 128 owners would still be using one. The other way you can do this is from the disk icon. As these icons are in grey, so are their windows (except, curiously, help, but I can see how a yellow question mark would have looked bad against a white background), suggesting a global applet served by the central Jane kernel. The disk icon brings up a basic file manager allowing you to make duplicate backup files (but only to the same disk), rename or delete them, or create a new disk. The copy option is the default and is pre-selected when the window opens, which is irritating, because our modern reflexive habit of selecting the file first and then the action will cause an immediate copy to occur before you get the chance to click anything else. I don't think this was just me: there were several spurious duplicate files on the original black data disk I suspect for the same reason. If files are present on the disk, they will appear with their names and a filetype letter (W, C or L for Janewrite, Janecalc or Janelist respectively). Notice the slightly misshapen scrolling arrows, which were nice and clean on the Apple. We'll provide the .d71 to Jane here. Windows warning you about data loss have a red border. Interestingly, it provides both a No button and the exit button, which both do the same thing: abort back to the file manager. Jane seems unable to distinguish between an unformatted disk and a completely absent one, and will (fruitlessly) attempt to format an empty drive. Formatting in progress. The time estimates are surprisingly not far off. With our disk formatted, let's return to Janewrite at the end, since this will be the majority of the documents we'll convert. Instead, we'll start with the spreadsheet, Janecalc. Whenever any of the three built-in applications starts up, and once Jane has located the data disk, a file selector (in grey) appears. There are no spreadsheets ("worksheets") on our freshly formatted disk, so we click the NEW icon. Entering the new filename (blue window). You may have noticed that the red and blue windows are all invariably the same size regardless of contents and any active controls they contain. This probably simplified rendering quite a bit. Because Janecalc is green, its content window border is likewise green, and because Jane 128 doesn't multitask between the applications, it takes up the entirety of the screen. Two templates are provided, along with a roll-your-own option. We'll go with the Home Budget for illustration. The Home Budget template pulls up a simplified home budget by month which you can fill in. Jane supports 40, 64 and 80 column modes, all rendered in software on the VIC-IIe 320x200 display (not with the VDC's 640x200 display), but by default it uses 40. (I'll get to this in more detail in the word processor.) Along the bottom are various operators and the extent of the formula functions available (hardly competition for the Convergent WorkSlate). They can be selected with the pointer in lieu of text entry, which makes them quite discoverable, but in practice it's simply faster to type them. No other functions are implemented. Since the content window cannot be resized, the maximize gadget from the Apple II version became obviously useless and was removed. By using the joystick/mouse you can use the hand to point to a cell and then, with the hand pointing to it, just start typing text or a number. The cursor keys will move the pointer from cell to cell for you, though they will not exit the content area. If you click or otherwise select the cell with the hand, however, Jane considers this an attempt to construct a formula, which again would be frustrating to modern audiences used to, say, Microsoft Excel. But to edit it again, you pick the insert tool instead of the hand, and this time you must select the cell to type in it. Motion around the content area in all three applications is accomplished using multiple small icons in the bottom and right window borders. The "half full" icon pushes it all the way to the outer edge in that direction, while the double and single arrows move the viewport by large leaps and small leaps respectively. There are no thumbs to show relative location, but you can click anywhere along the scroll area for a proportionately "medium" jump if you like. You can also use CTRL-CRSR/CTRL-arrow keys. Even in 40-column mode, and even given that the scroll doesn't animate and just snaps to the new position, scrolling is agonizingly slow and multiple clicks on the scroll controls invariably overshoot. Putting it in 80 column mode doesn't just give you more on the screen — it also means you don't need to endure as many pauses trying to move around. Again, I'll have more to say about font sizes when we get to Janewrite. Unique to Janecalc, the scrolling actually wraps. Worksheets remain limited to 26 columns (A-Z), as in the Apple II version, but now up to 50 rows are allowed. Still, this wouldn't have been sufficient for anything larger than a modest small business, even in 1985. Formulas are approximately VisiCalc-style using A1 absolute notation for cells, though there are no sigils for functions (not that there's very many) and ranges are delimited by colons. Most basic math operators and parentheses are available. Here, we'll get a sum of this row ... ... and then manually calculate an average by dividing the sum by the count of populated rows (we could also just use avg). The template includes this at the bottom, but this shows you how formula entry worked. As we add data to dependent cells the sheets recalculate but circular references are not handled, though in fairness this capability was still not common in small spreadsheet applications. We'll go to Janelist next. When we do so, a red window pops up to prompt us to save our work. Switching to Janelist. Creating our new list. All very consistent (the file manager and requester seem to be part of the Jane kernel). Janelist, in fairness, never purported to be a database in any incarnation and acts more like a cardfile; even the manual merely refers to it as a "list keeper." Like Janecalc it comes with templates, though Janelist supports a substantial number more. For variety I'll try to enter some of my very large CD collection, because I'm one of those people (vinyl is for art, CD is for listening). The list comes up as fillable fields. There may be up to 15 field names up to 12 characters long. If you choose to create your own, then Jane will step you through entering the field names. That's about all the customization you can do. The values for those fields can span multiple lines, which is what the viewport scrolling is for — you use the icons at the bottom to advance through individual cards. Incidentally, Atom Heart Mother is Pink Floyd's finest album and I will tolerate no disagreement. The icon that looks like cards being pulled out suggests how to make a query (the magnifying glass icon, or possibly the funnel icon to denote a filter, wasn't universal at this point). Because it gives you choices, it's yellow, remember? The two OK buttons do different things. The top one filters cards to the query requested, but the bottom one undoes any query. You can query on top of queries for a primitive sort of logical-AND. Partial word searches are supported. For example, here is the second best Beatles album — the best is, of course, Abbey Road. Since we searched for the Beatles, when we run out of Beatles CDs, nothing more turns up from my formidable library. It is also possible to sort cards, in which case they appear in that order instead. You cannot sort on multiple fields, and you can't sort descending. Finally, Janewrite, where we will spend the rest of our time — and where apparently most of Jane's users spent theirs, including our previous owners. I've got a prefab file here I constructed while playing around to explore the file format, so this time we'll load a document instead of entering one, just to show you what that looks like from the file requester. Janewrite is IMHO the most polished and competent of the three apps, and it feels like the most development time was spent on it, too. It also shows what the Jane font renderer is capable of: although non-proportional and only a single typeface, you can see bold, underline, bold and underlined, superscript, and subscript are all possible. The bottom shows left, right, centre and full justification options, done per line, plus the font options, and then search (this time with a magnifying glass) and page layout. These icons are larger and more detailed than the Apple's. As with other parts of the UI, text attributes are set verb-initial, i.e., you would choose the desired style, then the insertion tool, then highlight the range of text and finally release the button (or, annoyingly, wait, which makes fine adjustments harder than they should be). Notice that there is an explicit bold-and-underline option, instead of using the separate bold and underline options in combination: that's because you can't make superscripted or subscripted text bold or underlined. The top of the content area shows the ruler — in characters, not inches — and margin stops and the single paragraph indent stop, which you can drag to change them. Interestingly, the ruler seems to be new for Jane 128: no screenshot for the Apple II version demonstrates one. Janewrite is also capable of a modicum of WYSIWYG if you select the 80 column option. This and other options come from the "computer" icon, which acts as a preference panel. Preferences are saved to the application disk and are global to all three applications. Despite this presenting a choice window (ordinarily yellow), Jane seems to treat it as a global window from the kernel, so it's grey. The bottom set of options are specifically for configuring the printer. Print output is generated with control codes and text only; Jane does not generate graphic sequences, so what actually shows up on the page depends on what your printer actually supports. The default middle print size option corresponds to 80 columns (more accurately, the default or 12cpi font size), while the small font corresponds to the condensed 15cpi and/or 132 column option available on some printers, and the large font corresponds to the 60 or 64-column (e.g., 10cpi) option also only available on some printers — not the expanded double wide printing option more typical of Commodore-specific devices. You could also select between regular fanfold tractor feed or plain paper, as well as the Near Letter Quality print option some printers supported, and finally the printer itself. There was built-in support for the MPS-801 (i.e., 1525), MPS-802 (i.e., 1526), 1101, "Oki" (generic Okidata), and generic "Epson" printers, assuming they were connected somehow to the IEC serial such as through a third-party parallel printer interface. These printer drivers varied wildly in their capabilities: the 1525/MPS-801 "driver" supported almost nothing except basic text, while the generic Okidata and Epson drivers supported nearly everything that Jane could generate. The "OTHER" driver is customizeable, a neat idea, if a little clumsy. A BASIC program called BUILDPRT on the grey disk allows you to populate it with your printer's control codes. Control sequences up to three characters long were supported. You would enter these from the manual, it would save them to disk, and then you could use the custom driver inside Jane. The topmost options affect the appearance of Jane. You can choose from three font sizes, all non-proportional, corresponding to 40, 64 or 80 column text. Confusingly, the 80-column option is the last when it's the middle option for printing. (The Apple II version likely didn't support 80 column text due to its smaller hi-res horizontal width.) Pointer speed and the "beep" Jane makes when you select options are also configurable. Here's how it looks in 80 columns, using the typical "soft 80" approach on the 64 which is more or less legible, at least on a composite display. As there are no colours in the content area, there is no risk of colour clash. This is probably the most useful view in Janewrite. The 64-column view, by contrast, is probably the least useful. The 40-column view is the most legible and 2:1 the size of a typical 80-column line, so it's easy to mentally grok page layout that way, but the 64-column view is odd enough to end up being the worst of both worlds. An interesting feature of Janewrite are the accented characters, which was not frequently seen on home computer-class word processors, as explained by the on-line help. Janewrite treats them as diacritics, and they can even be applied to letters that wouldn't ordinarily use them (because who knows? some language might), such as the grave and acute accents on the n as well as the more typical tilde. In fact, you can apply them to any character, even punctuation. However, the use of the up arrow to indicate a circumflex means there's no way you can type a literal caret into your document, and while a macron would have been nice, omitting the umlaut seems a greater fault. The decorators are also rather hard to distinguish in 80 columns, so Spanish users of Juana 128 might want to go to cuarenta column mode to mirar mejor. Janewrite also has basic find and/or find-and-replace, and a small pane appears below the content area when it's active. There are also decent page layout options, including setting both a per-page title and its position, adding a page number and its position, and margins, number of copies and starting page, though the last two would seem more appropriate for a print dialogue than a page layout one. Note that Jane will always print a 10-space left margin, so an 80-column printed line can be no longer than 70 characters, and this is indeed the maximum width Janewrite will support. However, paragraphs are apparently not stored as continuous sequences of text, demonstrated here with a contrived example. (In fact, we'll prove they aren't shortly.) While Janewrite will word-wrap at the right margin, inserting text after that will wrap onto a new line, not into the next line, even if the two lines were previously entered "together." There's a speed/flexibility tradeoff here in that Janewrite doesn't have to continuously reflow paragraphs, but it also means its concept of a paragraph is entirely based on how much you select. The text can be manually reflowed, joining lines if necessary, by picking one of the paragraph justification options and selecting the text with the hand, which will then be reflowed (and, if needed, spaces inserted) to match. In fact, this is also necessary if you change the margins because Jane doesn't automatically reformat your document then either. I also promised you an example of cut and paste, so here's one using the scissors (cut). You simply pick it and, with the button down, drag it across the text you want and release the button. Note that there is no undo, though I suppose you could just immediately paste it back in. Exiting Janewrite (though not saving, because we need the accented characters to stay in the file). Now that we understand what Jane can do and how it works, let's move on to converting the files. We can extract our test files we made from our .d71 with VICE's c1541 utility and hexdump it. This got a little more difficult than it should have been: % c1541 work.d71 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> dir 0 "data#000 " 01 2a 39 "c.TESTCALC" prg 3 "l.TESTLIST" prg 4 "w.nOTE.2" prg 4 "w.TESTCONV" prg 1278 blocks free. c1541 #8> read "w.TESTCONV" ERR = 62, FILE NOT FOUND, 00, 00 cannot read `w.TESTCONV' on unit 8 invalid filename As you may have guessed, that's because the filenames, and it turns out the data in the files themselves, are stored as true ASCII, not PETSCII (indeed as they would have been on the Apple II, also), so c1541's filename conversion fails. Fortunately, the extract command will walk the entire directory and pull out all the files no matter what they're named. The documents are all regular Commodore PRoGram files with a starting address and they appear to be loaded in-place at that address into bank 1. This introduces the possibility of some delightful save-file hacks but we're not here for that today. That means we can also simply extract our previous owners' files en masse as well. I imaged their disk using my ZoomFloppy and external 1571, and since they are normal PRGs, a BAM copy of the allocated sectors is all we need to do, with one wrinkle: % d64copy -B 9 r_jane_bam.d64 [Warning] growing image file to 683 blocks 14: --*****--*****--***** 8% 15/171[Warning] read error: 0e/00: 5 14: ?******************** 12% 21/171[Warning] giving up... 14: ?******************** 15: ********************* 16: ********************* 17: ********************* 18: ******************* 19: ******************* 20: ******************* 21: ******************* 22: ****..***...***...* 100% 171/171 170 blocks copied. % c1541 r_jane_bam.d64 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> extract c1541 #8> quit Fortunately it doesn't look like the bad sector was in any of the files they cared about. Let's get an idea of the format from our test files. Janecalc files are "huge" because it looks like the entire 26x50 cell range is saved regardless of whether anything's in it or not. Looking at the directory of their data disk where they had saved a couple of sparse test spreadsheets of their own, they also were 39 blocks in length no matter how many cells were actually populated. The on-disk format is consequentially a bit wasteful: 000003a0 00 00 00 00 00 20 20 20 4a 61 6e 75 61 72 79 20 |..... January | 000003b0 20 46 65 62 72 75 61 72 79 20 20 20 20 20 4d 61 | February Ma| 000003c0 72 63 68 20 20 20 20 20 41 70 72 69 6c 20 20 20 |rch April | 000003d0 20 20 20 20 4d 61 79 20 20 20 20 20 20 4a 75 6e | May Jun| 000003e0 65 20 20 20 20 20 20 4a 75 6c 79 20 20 20 20 41 |e July A| 000003f0 75 67 75 73 74 20 53 65 70 74 65 6d 62 65 72 20 |ugust September | 00000400 20 20 4f 63 74 6f 62 65 72 20 20 4e 6f 76 65 6d | October Novem| 00000410 62 65 72 20 20 44 65 63 65 6d 62 65 72 00 00 01 |ber December...| 00000420 04 00 00 00 00 00 00 20 20 54 6f 74 61 6c 20 20 |....... Total | 00000430 20 41 76 65 72 61 67 65 20 20 20 00 00 01 04 00 | Average .....| Cardfiles are stored much more efficiently. Here's the entirety of our two cards. The fields are in the header, padded out to the fixed 12 character length, but with technically unnecessary nulls between them. A spurious "Beatles" entry looks like a buffer that was captured as part of the save, and there is also a page-aligned (counting the starting address) pad of nulls. Otherwise, the value strings look null-delimited, in the order they appear in the field list (unpopulated fields are zero-length strings). When you run out of fields, you're on the next card. % hexdump -C l.TESTLIST 00000000 00 7f 01 00 36 02 08 00 04 00 54 69 74 6c 65 20 |....6.....Title | 00000010 20 20 20 20 20 20 00 4c 65 61 64 20 41 72 74 69 | .Lead Arti| 00000020 73 74 20 00 4f 74 68 65 72 20 41 72 74 69 73 74 |st .Other Artist| 00000030 00 43 6f 6d 70 6f 73 65 72 20 20 20 20 00 43 6f |.Composer .Co| 00000040 6e 64 75 63 74 6f 72 20 20 20 00 57 68 65 72 65 |nductor .Where| 00000050 20 4b 65 70 74 20 20 00 42 6f 72 72 6f 77 65 64 | Kept .Borrowed| 00000060 20 62 79 20 00 44 61 74 65 20 4c 65 6e 74 20 20 | by .Date Lent | 00000070 20 00 00 00 ff ff 01 ff ff ff ff ff ff ff ff ff | ...............| 00000080 ff ff ff ff ff 00 01 02 03 04 05 06 07 00 01 02 |................| 00000090 03 04 05 06 07 ff ff ff ff ff ff ff ff ff ff 00 |................| 000000a0 00 54 68 65 20 42 65 61 74 6c 65 73 00 00 00 00 |.The Beatles....| 000000b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00000100 d7 09 80 60 60 ac 98 09 ae 04 cf a5 ea a9 d7 15 |...``...........| 00000110 80 ac 1d 21 d6 1c 80 60 60 ac 98 09 ae 04 cf 20 |...!...``...... | 00000120 75 0b 00 00 ac 0a 95 a5 f0 b0 a9 a6 b1 a9 a4 b1 |u...............| 00000130 a5 f1 b0 a9 a7 b1 a9 a5 b1 ac c0 08 cf 20 75 0b |............. u.| 00000140 fe ff a5 37 ae 8c ff 00 c0 d8 4b 80 cf a5 f0 b0 |...7......K.....| 00000150 a7 a6 b1 c0 d8 60 80 a5 f1 b0 a7 a7 b1 c0 d8 60 |.....`.........`| 00000160 80 cf a5 f0 b0 a7 a6 b1 00 00 09 00 01 5d f6 00 |.............]..| 00000170 00 00 00 09 00 09 00 01 66 f6 00 00 00 00 54 00 |........f.....T.| 00000180 50 00 01 b1 f6 69 64 65 20 12 00 42 00 01 6f f6 |P....ide ..B..o.| 00000190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 000001a0 00 00 00 00 00 00 00 52 65 76 6f 6c 76 65 72 00 |.......Revolver.| 000001b0 54 68 65 20 42 65 61 74 6c 65 73 00 00 4c 65 6e |The Beatles..Len| 000001c0 6e 6f 6e 2d 4d 63 43 61 72 74 6e 65 79 2d 48 61 |non-McCartney-Ha| 000001d0 72 72 69 73 6f 6e 00 47 65 6f 72 67 65 20 4d 61 |rrison.George Ma| 000001e0 72 74 69 6e 00 00 00 00 00 41 74 6f 6d 20 48 65 |rtin.....Atom He| 000001f0 61 72 74 20 4d 6f 74 68 65 72 00 50 69 6e 6b 20 |art Mother.Pink | 00000200 46 6c 6f 79 64 00 00 57 61 74 65 72 73 2d 47 69 |Floyd..Waters-Gi| 00000210 6c 6d 6f 75 72 2d 4d 61 73 6f 6e 2d 57 72 69 67 |lmour-Mason-Wrig| 00000220 68 74 2d 47 65 65 73 6f 6e 00 50 69 6e 6b 20 46 |ht-Geeson.Pink F| 00000230 6c 6f 79 64 00 00 00 00 |loyd....| 00000238 This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. Despite the cool press reception, Magic Desk sold surprisingly well to new 64 users, and in numbers sufficient to solve its production problems such that its price dropped in half by late 1984. Sales were enough to propose an upgraded version called Magic Desk II for Commodore's new (and, ultimately to its detriment, incompatible) 264 series, capable of speech prompts when paired with the speech group's Magic Voice synthesizer hardware, and featuring a more sophisticated interface with "Lisa-like" pulldown menus and icons. At the same time the software division finished the remaining pieces of the original 64 Magic Desk (now simply called "The Magic Desk"), also with speech capability; the screenshots here of the presumably completed budget and phone modules are from prototype ROMs in an auction lot of Feagans' old Commodore memorabilia, double the size of the original version. Commodore intended the upper-tier 264s to be home and small business productivity systems, designing their hardware and TED video chip to match, with the 64 remaining as their general purpose gaming and home computer. Tramiel strongly believed, as Michael Tomczyk wrote in The Home Computer Wars, that "home computers would have the power of small business computers like IBM and Apple — but would be priced like home computers, perhaps as low as under $500." Smaller versions of the 264, with their much lower part counts, could even compete in the ultra-low market segment against systems like the ZX series in the UK. As Hartmann, Tomczyk and others in the software group felt the 264 would be most meaningful with built-in software, Magic Desk II became one of several possible option ROMs representing potential machine configurations, along with others featuring different programming languages or applications like a spreadsheet or terminal program. Tramiel embraced the idea, seeing it as a car with different models "just like General Motors." At least three "flavours," aligning with the internal groups in the software division (business, home and education), were envisioned — though the concept also met swift resistance from dealers and even Commodore's own sales team who protested having to handle multiple different versions of one computer. (One possible unspoken reason is that it was already known not to be 64 compatible, and dealers were undoubtedly unhappy about taking stock space away from a financial anchor.) With time yet again a factor, for the top-end "business flavour" the software division looked for a quick potential port and found it in Trilogy, a forthcoming 64 software package from Orange County, California-based Tri Micro demonstrated at Spring Comdex 1983. Trilogy was to be a combination of three existing Tri Micro programs, Your Home Office (word processor and spreadsheet) and The Write File (word processor and database) merged into a single application, and Plus Graph (charting) — what would have been called "integrated software" in those days. Commodore contracted with David Johnson, its developer and Tri Micro's VP of software engineering, to also port it to the 264. In January 1984 Jack Tramiel was forced out of the company he founded by chairman Irving Gould and shortly thereafter the 264 line was slashed by new CEO Marshall Smith. Three models were chosen from the various prototypes and experiments, the 16K 16 (and in Europe the 116 as well) to serve as the low-end, and the 64K 264, now renamed the Plus/4, as the high-end. Both the completed Magic Desk and Magic Desk II were cut, as was the education flavour based on a built-in Logo implementation. Only the Plus/4 would offer Trilogy, renamed to 3-Plus-1, and its ROM size was cut to 32K to reduce production costs further which in turn forced Johnson to make serious reductions in functionality. As a result 3-Plus-1 became nearly as maligned as the Plus/4 itself (mocked in the press as the "Minus/60" for its idiosyncrasies, deliberately incompatible ports and lack of 64 software compatibility), though yours truly actually used the spreadsheet for a household budget when I was a starving student, and it wasn't that bad. Nevertheless, as evidence of the hasty last-minute switch, the Plus/4 manual still makes vague reference to "built-in software packages," saying the computer will tell you "which packages are available and which function key to use to activate them." There was only ever one in the production model, and it was 3+1. As Tri-Micro had still maintained the rights, Trilogy was subsequently released in its original form for the 64 as Team-Mate to the rave reviews 3-Plus-1 never got (in July 1985 RUN called it "a high-performance program that Commodore users will discover to be one of the best available"). Johnson later got his chance to show what 3+1 was really capable of with Plus/Extra, a full disk version sold by Tri Micro, but it lacked the close integration of both Team-Mate and 3+1 and ended up tainted in the market by its predecessor. Commodore never adopted it. The failure of the Plus/4 to succeed the 64, much less overtake it, demonstrated clearly to Commodore management that 64 compatibility was essential in their next computer. Around this same time Sig Hartmann had noted the success of Atari's own first-party software unit Atarisoft on non-Atari platforms (though AtariLab was developed externally), even for the 64, and said there were similar plans to port Commodore first-party software and licenses to the Apple II, IBM PC and PCjr. (NARRATOR: This didn't happen.) However, by mid-1984 the software division had also developed a reputation for poor quality, with Scott Mace commenting in InfoWorld that — hits like International Soccer notwithstanding — "so far, the normal standard for Commodore software is mediocrity." In the meantime, Tramiel had bought the ailing Atari from Warner Communications and lured several Commodore managers, including Hartmann (who was already in conflict with Smith over cuts to the software division), to defect. Paul Goheen, the former systems software group head, became the new software chief. As the Commodore 128 neared completion, management constructed a new sales strategy to put it head to head against the Apple IIc and PCjr in specialty stores as well as Tramiel's favoured mass market retailers. To more plausibly bill it as a productivity machine, once again the software division had to look outside the company. Arktronics started in the dorms of the University of Michigan as a partnership between sophomore Robert "Bobby" Kotick and junior Howard Marks, who were then roommates. "We knew that unlike other industries," said Kotick in a 1984 interview, "there was a place for 19 and 20 year olds [in computers]." In July 1983 the company was formed to capitalize on Marks' ideas to envision a friendlier user interface for productivity applications. Marks, who was French, had previously worked for Apple and had access to its peripherals, including the then-novel use of a mouse as a pointer device. "This was way before there was ever a Lisa," Kotick added. "We realized that the biggest problem was that people like us couldn't use these things [computers] yet because they were too difficult and time-consuming to learn." They crafted a wish list and design document oriented to systems with 64K of RAM or less but featuring a picture (now we'd say icon-based) interface driven by a pointing device, such as a joystick or mouse, and an extensive on-line tutorial. Marks and Kotick hired students and even lured away some professors to work on the application, christened Jane after the Dick and Jane introductory reading books, who accepted shares in the company in lieu of salary. To fund development by their team of about thirty, Kotick tagged along with a friend to the annual Cattle Baron's Ball in Dallas at which he met real estate and casino investor Steve Wynn. Kotick managed to hitch a ride back to the East Coast on Wynn's plane where he pitched him on their company and Wynn encouraged him to write up a business plan. Three months later Marks and Kotick were summoned to Wynn's offices in Manhattan and flown to Atlantic City, whereupon Wynn handed them a cheque for $300,000 (in 2025 approximately $970,000) in exchange for a third of the company, providing business advice as the product progressed. Jane missed a first deadline for Comdex in December 1983 due to testing delays and finally launched at Softcon in February 1984 for the Apple II/II+ with 64K and the IIe at an MSRP of $295 [$920], later reduced to $179 [$560]. The program shipped on three colour-coded floppies, a grey bootable "systems disk" containing the word processor, database and spreadsheet applications (Janewrite, Janelist and Janecalc, respectively), a yellow "help disk" with the tutorial, and a black "data disk" for the user to save files. To ease the need for disk swapping, it would hunt for the right disk in either disk drive if you had two. Versions for the IBM PC and Atari 8-bits were said to be in progress. The initial release was uniquely accompanied by its own single-button mouse (Instagram link), a lower-cost unit — Kotick admitted settling for "a lesser quality product" — manufactured under contract by joystick maker Wico and incompatible with Apple's own later mouse options. This mouse interfaced to the Apple with a custom card and an 8-pin connector. Jane's appearance at the show attracted attention from another Steve, but at the Apple booth instead: Steve Jobs. Jobs visited the company in Ann Arbor and, suitably impressed, told Kotick and Marks they were wasting their time in college. Kotick duly dropped out to concentrate on the company, much to the consternation of his parents. Because it was intended to run on any existing Apple II with sufficient RAM, pretty much nothing was assumed about the hardware. It displayed strictly in monochrome and used the Apple hi-res mode to display upper and lowercase since the II/II+'s text mode was purely uppercase. Additionally, as 80-column capability wasn't universal, it used a software text shaper to display 60-column text in the word processor and, here, in the file requester. Basic windows like these, with title and information in the actual window bars, served for dialogue boxes and file selection. Although no emulator presently supports Jane's oddball original mouse, the PBS MacNeil/Lehrer NewsHour did a piece on Arktronics in 1984 (the photo above of Marks and an open Apple II case is from this clip) and, along with pictures of the Arktronics offices which I've scattered throughout this article, had some screenshots that illustrate its capabilities. Here a document is being edited in Janewrite. You can see close, scroll and size gadgets in the window frame, but interestingly the control to maximize the current window is in the lower right. The top of the screen shows the editing tools (hand pointer, arrow, scissors [cut], camera [copy] and paste jar), icons for the three core apps, and then system-wide icons for on-line help, printing, the file manager, preferences and "STOP" to globally cancel an operation. Across the bottom, beside the window maximize gadget, are tools for adjusting line justification, font style (bold, underline, bold and underline, superscript, subscript), print settings and search. I'll have more to say about all of these when we get to Jane's Commodore port. Document windows could also be moved and resized, and multiple windows from different Jane applications could be open simultaneously. If you hit Control-Reset, a Easter egg briefly flashes on-screen with the names of the Apple II programmers: Mike Lagae, John R. Haggis, Brent Iverson, Jim Poje, Peter Lee, Uwe Pleban, Allen Leibowitz and Ken Roe. Because portability to other, sometimes wildly different, systems was always contemplated, application-level components were written in a high level language and compiled for the target (allegedly an early microcomputer dialect of C), with the graphics and I/O drivers written directly in assembly. With the release of the IIc Arktronics updated the program to support Apple's mouse as well. Reviews of the Apple II version were decidedly mixed. In June 1984, InfoWorld called it "innovative" but also observed that "overbearing use of icons, some slow features, and some awkwardness mar the product, which could benefit from an emphasis on efficiency rather than gimmickry." Down under, Your Computer in November 1984 liked the simple interface and believed it would appeal to undemanding users but criticized the 236-page manual and found the mouse unreliable. "When the mouse works properly, it is good," wrote reviewer Evan McHugh, but "when it doesn't it's the pits." Likewise, although A+'s 1985 review also liked the interface and the fact that multiple windows from each module could be open at once, the magazine also felt that "the individual modules in Jane are not up to professional productivity quality." Perhaps because of the software display, Janewrite "was too slow to respond to the keystrokes of a moderately proficient typist," and Janecalc, equally slow, was also panned as "crippled" because it only supported a 24x20 maximum spreadsheet. "Thank you, Jane," quipped reviewer Danny Goodman, "[l]eave your number at the door." Jane was also billed as available for the Commodore 64, even in contemporary advertising, but COMPUTE!'s Gazette in January 1985 said it was "scheduled to be released for the Commodore 64 by the time you read this. The price is expected to be about $80 [$240]." Interviewed for the article, Marks said that Jane for the 64 was to come as a combination cartridge and disk package, where a "32K plug-in cartridge" would quickly and automatically bring up the system. The article claimed the cartridge would autoboot the applications from (now) just a single floppy plus the data disk, though I suspect the actual configuration was that the cartridge contained the applications and the disk contained the online tutorial, simultaneously furnishing a modicum of both instant access and copy protection. Notably, this version didn't come with its own mouse; Marks said they were working to support third-party mice as well as joystick and "touch pad" (presumably KoalaPad) options instead. Accounting for publishing delays, the Gazette piece would have been written several months prior in the fall of 1984 — after advertisements for the C64 version of Jane had been in multiple periodicals such as Creative Computing and Family Computing claiming you could purchase it already. In fact, the 64 version of Jane would never be released — it was simply cancelled once Commodore paid Arktronics to port it to the 128 and badged it as a Commodore product. As the 128's graphic and sound capabilities are virtually identical to the 64's in 40-column mode, save for the extra colour RAM, the port was relatively straightforward. (At the same time Commodore also rebadged the CP/M-based Perfect Software series from Thorn EMI for the 128, but this was non-exclusive, and their rebranded versions were exactly the same as sold for other CP/M-compatible systems. Goheen promised "comprehensive and professional developer support" for the new computer.) The new Jane could also be made cheaper: since the 128 is capable of autobooting a suitably coded floppy disk in drive 8, the cartridge could be dispensed with and the less expensive three-floppy scheme restored (though the grey disk was now called the "application disk"). A 128-mode 1541 fastloader is used if the new and much faster 1570 or 1571 disk drives aren't detected, though the 1571 still boots Jane noticeably faster than the fastloader. (Parenthetically, a frequent misconception is that the Z80 in the 128 does the boot sector check to start CP/M. In fact, the 8502 does that after the Z80 has already checked the Commodore key isn't down and entered 128 mode. In CP/M's case, the code in the CP/M disk boot sector instructs the 8502 to give control back to the Z80 so it can finish the boot sequence — if this weren't the case, the BASIC BOOT command wouldn't be able to start CP/M. Interestingly, 1581s booting CP/M have a special startup file to keep their own CP/M boot sector in a different location.) Otherwise, Jane 128 openly betrayed its origins on the 64: other than fastbooting with the 1571, which it mostly got for free, and support for the 128's new keys it took no advantage of any other 128 features, in particular no 2MHz support nor true VDC 80-column mode. Although the manual and box copy say using a mouse is supported, only the original 1350 mouse works, which strictly emulates a joystick. All three applications that were in the Apple II version are included. Under the hood the apps are implemented as overlays for a central kernel called JANEGM. Sadly, I didn't see any obvious credits while scanning through the disk files. The manual, which appears to have been written by a third party, insists on camelcasing the apps as JaneWrite, JaneCalc and JaneList even though the rear box copy doesn't distinguish them that way and the Apple II version and Arktronics' own advertising called them Janewrite, Janecalc and Janelist. I'll use the latter here. Commodore also included some official marketing material with the box, hawking their new 1902 monitor (with 80 column mode, which was useless for Jane), 1571 disk drive (which works well with Jane), 1670 Modem/1200 (which Jane doesn't use), 512K REU (which Jane doesn't use either) and the 1350 mouse — which in this photo is somewhat different-appearing than the released 1350/1351, and might have been a mockup. Actually, this system would have been a very nice 128 setup and very similar to the one we'll be using both for real and in VICE. Too bad Jane 128 could use relatively little of it. Both Jane and the Perfect series were demonstrated with the 128 for Winter CES 1985, though Commodore didn't announce MSRPs then for any of them at the time. It eventually emerged later that year for $49.95 [$150]; by the next year some retailers were selling it for as low as $35 [$100], compared to each of the Perfect titles then going for $45 apiece [$130]. Plus, the Perfect titles, being CP/M-based, were bland and text-based and failed to show off the C128's graphics, so Commodore ended up emphasizing Jane more in its contemporary marketing. Booting Jane 128 from the 128DCR's internal 1571 drive with my own 1902 monitor. Although its interface is similar to the Apple II's in broad strokes, Jane 128's most obvious difference is colour. However, there are numerous more subtle UI changes in this version, sufficient for it to be called "Jane 2.0" internally before release. We'll step through them here and in the next set of screenshots because they're an interesting comparison point to modern human interface practice. As with the Apple II, across the top of the screen are the various icons, or what the manual calls "pictures." These were slightly altered for the 128 from the Apple II originals. The blue icons again set the mode of the pointer ("tools") from the hand pointer, the insertion arrow, scissors (cut), camera (copy) and paste jar. The current tool is highlighted. You select a new tool by clicking on it, but you can also use the function keys (CLR/HOME, F1, F3, F5 and F7). By modern conventions Jane's tools are used backwards: instead of selecting a text range and "choosing a tool" (e.g., Command-C for copy) to operate on it, you choose a tool first and with that tool select the text range it operates on. I'll demonstrate this specific functionality in a couple instances, but any verb-object operation in Jane will work this way. (Linguistically, this makes Jane a head-initial language, while most modern GUIs are head-final.) Next to the tools are the main apps, Janewrite (now in purple), Janecalc (in green) and Janelist (in cyan), and next to them in grey are the same standard applets built into the kernel (online help, print dialogue, disk/file manager and setup). Finally, the STOP icon, now a solid red, stops the current app, and can be used to escape some screens, though not all. Unexpectedly it doesn't serve to quit Jane entirely: you just turn the computer off. Jane remembers what app is loaded and doesn't reload the overlay if you exit and re-enter it. However, unlike Jane for the Apple II, Jane 128 does not allow you to have multiple documents open simultaneously, a limitation that challenges the definition of "integrated software." In fact, of the three official Commodore productivity packages we've looked at so far, only poor abused 3-Plus-1 could do so. If you're working in one app and select another, Jane 128 will prompt you to save your work as if you'd clicked STOP, and the window will close. Given that the Apple II version managed to implement multiple documents in 64K of RAM, the Commodore 64 version — let alone the 128 — would seem to have little excuse, though I can think of two potential explanations. One is to increase the amount of memory available for any one document, which the Apple II version was indeed criticized for. The second is particular to the 128: its default memory configuration doesn't have a lot of free RAM, and it may have been judged too complicated to span or swap working sets across banks. (Some fiddling in the monitor shows that the documents simply occupy RAM in bank 1 and don't span elsewhere.) On the other hand, other 128 applications certainly do manage it, and it's possible development deadlines were a contributing factor. Let's start out with the online help, one of Marks and Kotick's fundamental design goals. Assuming you got the joystick (or 1350) plugged into the right port, there's a big honking question mark. What happens when you click on it? You get right into the online help window. The pointer snaps to the options; you can also move the pointer from option or cell to another option or cell with the CRSR keys/128 arrow keys and select it with the Commodore key. The window's yellow border is salient: any window that gives you choices to select from carries a yellow border. We'll see this again later. Incidentally, the manual is not in colour (just black, white and an accent magenta), and possibly as a result is all but totally ignorant of these UI choices or why they were made. The Apple II version's windows have a corner close gadget in the typical open square style, but this would only have made visual sense to someone familiar with the Lisa or Mac — which most Commodore users in 1985 wouldn't be. Instead, here windows you can close have a big bright red EXIT button (the ESC key can also serve this role in most cases). All icons are simply drawn onto the VIC-II high-res screen; unlike Magic Desk where pretty much everything was a sprite, the only sprite here is the pointer. Windows cannot be moved or resized, but by limiting icon and window boundaries to VIC-II 8x8 cells, drawing is fairly fast. Of course, most of the topics are on the yellow help disk (see? it matches). Jane 128, like the Apple II version, supports two disk drives, so you could have the help disk in device 9 and it would find it. The online help is pretty good, considering. It shows the icons and images as they would appear on-screen, and while they aren't live, they are accurate. The only black eye it gets is the technically truthful but functionally insufficient prompt "Press a key to continue" — the joystick or 1350 mouse button also work, and so does the ESC key to exit early, even though the exit button isn't shown. Some help items are animated and show you a demonstration, and each app has its own bespoke help. The system keeps track of what disks are where. If we start Janewrite by going to the typewriter, this blue dialogue box will appear — informational dialogue boxes always have a blue border — as it loads the overlay ... ... but then looks for a data disk, fails to find it, and asks for one. You need one even for a new document, and you can get stuck in a loop here if you don't provide one (pressing ESC just makes it try again, and clicking on the STOP icon doesn't do anything). You could put in the black data disk it comes with, but this one contains our generous donor's files, so we'll just give a blank disk image to VICE instead which Jane will offer to format. When creating a new data disk in VICE, if a 1571 is detected then Jane will want a real .d71 with the full available space, not a .d64, as it will then expect it can format both sides of the virtual disk. However, all of the Jane original disks, including the black one, are formatted single-sided for the 1541 since many early 128 owners would still be using one. The other way you can do this is from the disk icon. As these icons are in grey, so are their windows (except, curiously, help, but I can see how a yellow question mark would have looked bad against a white background), suggesting a global applet served by the central Jane kernel. The disk icon brings up a basic file manager allowing you to make duplicate backup files (but only to the same disk), rename or delete them, or create a new disk. The copy option is the default and is pre-selected when the window opens, which is irritating, because our modern reflexive habit of selecting the file first and then the action will cause an immediate copy to occur before you get the chance to click anything else. I don't think this was just me: there were several spurious duplicate files on the original black data disk I suspect for the same reason. If files are present on the disk, they will appear with their names and a filetype letter (W, C or L for Janewrite, Janecalc or Janelist respectively). Notice the slightly misshapen scrolling arrows, which were nice and clean on the Apple. We'll provide the .d71 to Jane here. Windows warning you about data loss have a red border. Interestingly, it provides both a No button and the exit button, which both do the same thing: abort back to the file manager. Jane seems unable to distinguish between an unformatted disk and a completely absent one, and will (fruitlessly) attempt to format an empty drive. Formatting in progress. The time estimates are surprisingly not far off. With our disk formatted, let's return to Janewrite at the end, since this will be the majority of the documents we'll convert. Instead, we'll start with the spreadsheet, Janecalc. Whenever any of the three built-in applications starts up, and once Jane has located the data disk, a file selector (in grey) appears. There are no spreadsheets ("worksheets") on our freshly formatted disk, so we click the NEW icon. Entering the new filename (blue window). You may have noticed that the red and blue windows are all invariably the same size regardless of contents and any active controls they contain. This probably simplified rendering quite a bit. Because Janecalc is green, its content window border is likewise green, and because Jane 128 doesn't multitask between the applications, it takes up the entirety of the screen. Two templates are provided, along with a roll-your-own option. We'll go with the Home Budget for illustration. The Home Budget template pulls up a simplified home budget by month which you can fill in. Jane supports 40, 64 and 80 column modes, all rendered in software on the VIC-IIe 320x200 display (not with the VDC's 640x200 display), but by default it uses 40. (I'll get to this in more detail in the word processor.) Along the bottom are various operators and the extent of the formula functions available (hardly competition for the Convergent WorkSlate). They can be selected with the pointer in lieu of text entry, which makes them quite discoverable, but in practice it's simply faster to type them. No other functions are implemented. Since the content window cannot be resized, the maximize gadget from the Apple II version became obviously useless and was removed. By using the joystick/mouse you can use the hand to point to a cell and then, with the hand pointing to it, just start typing text or a number. The cursor keys will move the pointer from cell to cell for you, though they will not exit the content area. If you click or otherwise select the cell with the hand, however, Jane considers this an attempt to construct a formula, which again would be frustrating to modern audiences used to, say, Microsoft Excel. But to edit it again, you pick the insert tool instead of the hand, and this time you must select the cell to type in it. Motion around the content area in all three applications is accomplished using multiple small icons in the bottom and right window borders. The "half full" icon pushes it all the way to the outer edge in that direction, while the double and single arrows move the viewport by large leaps and small leaps respectively. There are no thumbs to show relative location, but you can click anywhere along the scroll area for a proportionately "medium" jump if you like. You can also use CTRL-CRSR/CTRL-arrow keys. Even in 40-column mode, and even given that the scroll doesn't animate and just snaps to the new position, scrolling is agonizingly slow and multiple clicks on the scroll controls invariably overshoot. Putting it in 80 column mode doesn't just give you more on the screen — it also means you don't need to endure as many pauses trying to move around. Again, I'll have more to say about font sizes when we get to Janewrite. Unique to Janecalc, the scrolling actually wraps. Worksheets remain limited to 26 columns (A-Z), as in the Apple II version, but now up to 50 rows are allowed. Still, this wouldn't have been sufficient for anything larger than a modest small business, even in 1985. Formulas are approximately VisiCalc-style using A1 absolute notation for cells, though there are no sigils for functions (not that there's very many) and ranges are delimited by colons. Most basic math operators and parentheses are available. Here, we'll get a sum of this row ... ... and then manually calculate an average by dividing the sum by the count of populated rows (we could also just use avg). The template includes this at the bottom, but this shows you how formula entry worked. As we add data to dependent cells the sheets recalculate but circular references are not handled, though in fairness this capability was still not common in small spreadsheet applications. We'll go to Janelist next. When we do so, a red window pops up to prompt us to save our work. Switching to Janelist. Creating our new list. All very consistent (the file manager and requester seem to be part of the Jane kernel). Janelist, in fairness, never purported to be a database in any incarnation and acts more like a cardfile; even the manual merely refers to it as a "list keeper." Like Janecalc it comes with templates, though Janelist supports a substantial number more. For variety I'll try to enter some of my very large CD collection, because I'm one of those people (vinyl is for art, CD is for listening). The list comes up as fillable fields. There may be up to 15 field names up to 12 characters long. If you choose to create your own, then Jane will step you through entering the field names. That's about all the customization you can do. The values for those fields can span multiple lines, which is what the viewport scrolling is for — you use the icons at the bottom to advance through individual cards. Incidentally, Atom Heart Mother is Pink Floyd's finest album and I will tolerate no disagreement. The icon that looks like cards being pulled out suggests how to make a query (the magnifying glass icon, or possibly the funnel icon to denote a filter, wasn't universal at this point). Because it gives you choices, it's yellow, remember? The two OK buttons do different things. The top one filters cards to the query requested, but the bottom one undoes any query. You can query on top of queries for a primitive sort of logical-AND. Partial word searches are supported. For example, here is the second best Beatles album — the best is, of course, Abbey Road. Since we searched for the Beatles, when we run out of Beatles CDs, nothing more turns up from my formidable library. It is also possible to sort cards, in which case they appear in that order instead. You cannot sort on multiple fields, and you can't sort descending. Finally, Janewrite, where we will spend the rest of our time — and where apparently most of Jane's users spent theirs, including our previous owners. I've got a prefab file here I constructed while playing around to explore the file format, so this time we'll load a document instead of entering one, just to show you what that looks like from the file requester. Janewrite is IMHO the most polished and competent of the three apps, and it feels like the most development time was spent on it, too. It also shows what the Jane font renderer is capable of: although non-proportional and only a single typeface, you can see bold, underline, bold and underlined, superscript, and subscript are all possible. The bottom shows left, right, centre and full justification options, done per line, plus the font options, and then search (this time with a magnifying glass) and page layout. These icons are larger and more detailed than the Apple's. As with other parts of the UI, text attributes are set verb-initial, i.e., you would choose the desired style, then the insertion tool, then highlight the range of text and finally release the button (or, annoyingly, wait, which makes fine adjustments harder than they should be). Notice that there is an explicit bold-and-underline option, instead of using the separate bold and underline options in combination: that's because you can't make superscripted or subscripted text bold or underlined. The top of the content area shows the ruler — in characters, not inches — and margin stops and the single paragraph indent stop, which you can drag to change them. Interestingly, the ruler seems to be new for Jane 128: no screenshot for the Apple II version demonstrates one. Janewrite is also capable of a modicum of WYSIWYG if you select the 80 column option. This and other options come from the "computer" icon, which acts as a preference panel. Preferences are saved to the application disk and are global to all three applications. Despite this presenting a choice window (ordinarily yellow), Jane seems to treat it as a global window from the kernel, so it's grey. The bottom set of options are specifically for configuring the printer. Print output is generated with control codes and text only; Jane does not generate graphic sequences, so what actually shows up on the page depends on what your printer actually supports. The default middle print size option corresponds to 80 columns (more accurately, the default or 12cpi font size), while the small font corresponds to the condensed 15cpi and/or 132 column option available on some printers, and the large font corresponds to the 60 or 64-column (e.g., 10cpi) option also only available on some printers — not the expanded double wide printing option more typical of Commodore-specific devices. You could also select between regular fanfold tractor feed or plain paper, as well as the Near Letter Quality print option some printers supported, and finally the printer itself. There was built-in support for the MPS-801 (i.e., 1525), MPS-802 (i.e., 1526), 1101, "Oki" (generic Okidata), and generic "Epson" printers, assuming they were connected somehow to the IEC serial such as through a third-party parallel printer interface. These printer drivers varied wildly in their capabilities: the 1525/MPS-801 "driver" supported almost nothing except basic text, while the generic Okidata and Epson drivers supported nearly everything that Jane could generate. The "OTHER" driver is customizeable, a neat idea, if a little clumsy. A BASIC program called BUILDPRT on the grey disk allows you to populate it with your printer's control codes. Control sequences up to three characters long were supported. You would enter these from the manual, it would save them to disk, and then you could use the custom driver inside Jane. The topmost options affect the appearance of Jane. You can choose from three font sizes, all non-proportional, corresponding to 40, 64 or 80 column text. Confusingly, the 80-column option is the last when it's the middle option for printing. (The Apple II version likely didn't support 80 column text due to its smaller hi-res horizontal width.) Pointer speed and the "beep" Jane makes when you select options are also configurable. Here's how it looks in 80 columns, using the typical "soft 80" approach on the 64 which is more or less legible, at least on a composite display. As there are no colours in the content area, there is no risk of colour clash. This is probably the most useful view in Janewrite. The 64-column view, by contrast, is probably the least useful. The 40-column view is the most legible and 2:1 the size of a typical 80-column line, so it's easy to mentally grok page layout that way, but the 64-column view is odd enough to end up being the worst of both worlds. An interesting feature of Janewrite are the accented characters, which was not frequently seen on home computer-class word processors, as explained by the on-line help. Janewrite treats them as diacritics, and they can even be applied to letters that wouldn't ordinarily use them (because who knows? some language might), such as the grave and acute accents on the n as well as the more typical tilde. In fact, you can apply them to any character, even punctuation. However, the use of the up arrow to indicate a circumflex means there's no way you can type a literal caret into your document, and while a macron would have been nice, omitting the umlaut seems a greater fault. The decorators are also rather hard to distinguish in 80 columns, so Spanish users of Juana 128 might want to go to cuarenta column mode to mirar mejor. Janewrite also has basic find and/or find-and-replace, and a small pane appears below the content area when it's active. There are also decent page layout options, including setting both a per-page title and its position, adding a page number and its position, and margins, number of copies and starting page, though the last two would seem more appropriate for a print dialogue than a page layout one. Note that Jane will always print a 10-space left margin, so an 80-column printed line can be no longer than 70 characters, and this is indeed the maximum width Janewrite will support. However, paragraphs are apparently not stored as continuous sequences of text, demonstrated here with a contrived example. (In fact, we'll prove they aren't shortly.) While Janewrite will word-wrap at the right margin, inserting text after that will wrap onto a new line, not into the next line, even if the two lines were previously entered "together." There's a speed/flexibility tradeoff here in that Janewrite doesn't have to continuously reflow paragraphs, but it also means its concept of a paragraph is entirely based on how much you select. The text can be manually reflowed, joining lines if necessary, by picking one of the paragraph justification options and selecting the text with the hand, which will then be reflowed (and, if needed, spaces inserted) to match. In fact, this is also necessary if you change the margins because Jane doesn't automatically reformat your document then either. I also promised you an example of cut and paste, so here's one using the scissors (cut). You simply pick it and, with the button down, drag it across the text you want and release the button. Note that there is no undo, though I suppose you could just immediately paste it back in. Exiting Janewrite (though not saving, because we need the accented characters to stay in the file). Now that we understand what Jane can do and how it works, let's move on to converting the files. We can extract our test files we made from our .d71 with VICE's c1541 utility and hexdump it. This got a little more difficult than it should have been: % c1541 work.d71 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> dir 0 "data#000 " 01 2a 39 "c.TESTCALC" prg 3 "l.TESTLIST" prg 4 "w.nOTE.2" prg 4 "w.TESTCONV" prg 1278 blocks free. c1541 #8> read "w.TESTCONV" ERR = 62, FILE NOT FOUND, 00, 00 cannot read `w.TESTCONV' on unit 8 invalid filename As you may have guessed, that's because the filenames, and it turns out the data in the files themselves, are stored as true ASCII, not PETSCII (indeed as they would have been on the Apple II, also), so c1541's filename conversion fails. Fortunately, the extract command will walk the entire directory and pull out all the files no matter what they're named. The documents are all regular Commodore PRoGram files with a starting address and they appear to be loaded in-place at that address into bank 1. This introduces the possibility of some delightful save-file hacks but we're not here for that today. That means we can also simply extract our previous owners' files en masse as well. I imaged their disk using my ZoomFloppy and external 1571, and since they are normal PRGs, a BAM copy of the allocated sectors is all we need to do, with one wrinkle: % d64copy -B 9 r_jane_bam.d64 [Warning] growing image file to 683 blocks 14: --*****--*****--***** 8% 15/171[Warning] read error: 0e/00: 5 14: ?******************** 12% 21/171[Warning] giving up... 14: ?******************** 15: ********************* 16: ********************* 17: ********************* 18: ******************* 19: ******************* 20: ******************* 21: ******************* 22: ****..***...***...* 100% 171/171 170 blocks copied. % c1541 r_jane_bam.d64 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> extract c1541 #8> quit Fortunately it doesn't look like the bad sector was in any of the files they cared about. Let's get an idea of the format from our test files. Janecalc files are "huge" because it looks like the entire 26x50 cell range is saved regardless of whether anything's in it or not. Looking at the directory of their data disk where they had saved a couple of sparse test spreadsheets of their own, they also were 39 blocks in length no matter how many cells were actually populated. The on-disk format is consequentially a bit wasteful: 000003a0 00 00 00 00 00 20 20 20 4a 61 6e 75 61 72 79 20 |..... January | 000003b0 20 46 65 62 72 75 61 72 79 20 20 20 20 20 4d 61 | February Ma| 000003c0 72 63 68 20 20 20 20 20 41 70 72 69 6c 20 20 20 |rch April | 000003d0 20 20 20 20 4d 61 79 20 20 20 20 20 20 4a 75 6e | May Jun| 000003e0 65 20 20 20 20 20 20 4a 75 6c 79 20 20 20 20 41 |e July A| 000003f0 75 67 75 73 74 20 53 65 70 74 65 6d 62 65 72 20 |ugust September | 00000400 20 20 4f 63 74 6f 62 65 72 20 20 4e 6f 76 65 6d | October Novem| 00000410 62 65 72 20 20 44 65 63 65 6d 62 65 72 00 00 01 |ber December...| 00000420 04 00 00 00 00 00 00 20 20 54 6f 74 61 6c 20 20 |....... Total | 00000430 20 41 76 65 72 61 67 65 20 20 20 00 00 01 04 00 | Average .....| Cardfiles are stored much more efficiently. Here's the entirety of our two cards. The fields are in the header, padded out to the fixed 12 character length, but with technically unnecessary nulls between them. A spurious "Beatles" entry looks like a buffer that was captured as part of the save, and there is also a page-aligned (counting the starting address) pad of nulls. Otherwise, the value strings look null-delimited, in the order they appear in the field list (unpopulated fields are zero-length strings). When you run out of fields, you're on the next card. % hexdump -C l.TESTLIST 00000000 00 7f 01 00 36 02 08 00 04 00 54 69 74 6c 65 20 |....6.....Title | 00000010 20 20 20 20 20 20 00 4c 65 61 64 20 41 72 74 69 | .Lead Arti| 00000020 73 74 20 00 4f 74 68 65 72 20 41 72 74 69 73 74 |st .Other Artist| 00000030 00 43 6f 6d 70 6f 73 65 72 20 20 20 20 00 43 6f |.Composer .Co| 00000040 6e 64 75 63 74 6f 72 20 20 20 00 57 68 65 72 65 |nductor .Where| 00000050 20 4b 65 70 74 20 20 00 42 6f 72 72 6f 77 65 64 | Kept .Borrowed| 00000060 20 62 79 20 00 44 61 74 65 20 4c 65 6e 74 20 20 | by .Date Lent | 00000070 20 00 00 00 ff ff 01 ff ff ff ff ff ff ff ff ff | ...............| 00000080 ff ff ff ff ff 00 01 02 03 04 05 06 07 00 01 02 |................| 00000090 03 04 05 06 07 ff ff ff ff ff ff ff ff ff ff 00 |................| 000000a0 00 54 68 65 20 42 65 61 74 6c 65 73 00 00 00 00 |.The Beatles....| 000000b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00000100 d7 09 80 60 60 ac 98 09 ae 04 cf a5 ea a9 d7 15 |...``...........| 00000110 80 ac 1d 21 d6 1c 80 60 60 ac 98 09 ae 04 cf 20 |...!...``...... | 00000120 75 0b 00 00 ac 0a 95 a5 f0 b0 a9 a6 b1 a9 a4 b1 |u...............| 00000130 a5 f1 b0 a9 a7 b1 a9 a5 b1 ac c0 08 cf 20 75 0b |............. u.| 00000140 fe ff a5 37 ae 8c ff 00 c0 d8 4b 80 cf a5 f0 b0 |...7......K.....| 00000150 a7 a6 b1 c0 d8 60 80 a5 f1 b0 a7 a7 b1 c0 d8 60 |.....`.........`| 00000160 80 cf a5 f0 b0 a7 a6 b1 00 00 09 00 01 5d f6 00 |.............]..| 00000170 00 00 00 09 00 09 00 01 66 f6 00 00 00 00 54 00 |........f.....T.| 00000180 50 00 01 b1 f6 69 64 65 20 12 00 42 00 01 6f f6 |P....ide ..B..o.| 00000190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 000001a0 00 00 00 00 00 00 00 52 65 76 6f 6c 76 65 72 00 |.......Revolver.| 000001b0 54 68 65 20 42 65 61 74 6c 65 73 00 00 4c 65 6e |The Beatles..Len| 000001c0 6e 6f 6e 2d 4d 63 43 61 72 74 6e 65 79 2d 48 61 |non-McCartney-Ha| 000001d0 72 72 69 73 6f 6e 00 47 65 6f 72 67 65 20 4d 61 |rrison.George Ma| 000001e0 72 74 69 6e 00 00 00 00 00 41 74 6f 6d 20 48 65 |rtin.....Atom He| 000001f0 61 72 74 20 4d 6f 74 68 65 72 00 50 69 6e 6b 20 |art Mother.Pink | 00000200 46 6c 6f 79 64 00 00 57 61 74 65 72 73 2d 47 69 |Floyd..Waters-Gi| 00000210 6c 6d 6f 75 72 2d 4d 61 73 6f 6e 2d 57 72 69 67 |lmour-Mason-Wrig| 00000220 68 74 2d 47 65 65 73 6f 6e 00 50 69 6e 6b 20 46 |ht-Geeson.Pink F| 00000230 6c 6f 79 64 00 00 00 00 |loyd....| 00000238 This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. As Hartmann, Tomczyk and others in the software group felt the 264 would be most meaningful with built-in software, Magic Desk II became one of several possible option ROMs representing potential machine configurations, along with others featuring different programming languages or applications like a spreadsheet or terminal program. Tramiel embraced the idea, seeing it as a car with different models "just like General Motors." At least three "flavours," aligning with the internal groups in the software division (business, home and education), were envisioned — though the concept also met swift resistance from dealers and even Commodore's own sales team who protested having to handle multiple different versions of one computer. (One possible unspoken reason is that it was already known not to be 64 compatible, and dealers were undoubtedly unhappy about taking stock space away from a financial anchor.) With time yet again a factor, for the top-end "business flavour" the software division looked for a quick potential port and found it in Trilogy, a forthcoming 64 software package from Orange County, California-based Tri Micro demonstrated at Spring Comdex 1983. Trilogy was to be a combination of three existing Tri Micro programs, Your Home Office (word processor and spreadsheet) and The Write File (word processor and database) merged into a single application, and Plus Graph (charting) — what would have been called "integrated software" in those days. Commodore contracted with David Johnson, its developer and Tri Micro's VP of software engineering, to also port it to the 264. In January 1984 Jack Tramiel was forced out of the company he founded by chairman Irving Gould and shortly thereafter the 264 line was slashed by new CEO Marshall Smith. Three models were chosen from the various prototypes and experiments, the 16K 16 (and in Europe the 116 as well) to serve as the low-end, and the 64K 264, now renamed the Plus/4, as the high-end. Both the completed Magic Desk and Magic Desk II were cut, as was the education flavour based on a built-in Logo implementation. Only the Plus/4 would offer Trilogy, renamed to 3-Plus-1, and its ROM size was cut to 32K to reduce production costs further which in turn forced Johnson to make serious reductions in functionality. As a result 3-Plus-1 became nearly as maligned as the Plus/4 itself (mocked in the press as the "Minus/60" for its idiosyncrasies, deliberately incompatible ports and lack of 64 software compatibility), though yours truly actually used the spreadsheet for a household budget when I was a starving student, and it wasn't that bad. Nevertheless, as evidence of the hasty last-minute switch, the Plus/4 manual still makes vague reference to "built-in software packages," saying the computer will tell you "which packages are available and which function key to use to activate them." There was only ever one in the production model, and it was 3+1. As Tri-Micro had still maintained the rights, Trilogy was subsequently released in its original form for the 64 as Team-Mate to the rave reviews 3-Plus-1 never got (in July 1985 RUN called it "a high-performance program that Commodore users will discover to be one of the best available"). Johnson later got his chance to show what 3+1 was really capable of with Plus/Extra, a full disk version sold by Tri Micro, but it lacked the close integration of both Team-Mate and 3+1 and ended up tainted in the market by its predecessor. Commodore never adopted it. The failure of the Plus/4 to succeed the 64, much less overtake it, demonstrated clearly to Commodore management that 64 compatibility was essential in their next computer. Around this same time Sig Hartmann had noted the success of Atari's own first-party software unit Atarisoft on non-Atari platforms (though AtariLab was developed externally), even for the 64, and said there were similar plans to port Commodore first-party software and licenses to the Apple II, IBM PC and PCjr. (NARRATOR: This didn't happen.) However, by mid-1984 the software division had also developed a reputation for poor quality, with Scott Mace commenting in InfoWorld that — hits like International Soccer notwithstanding — "so far, the normal standard for Commodore software is mediocrity." In the meantime, Tramiel had bought the ailing Atari from Warner Communications and lured several Commodore managers, including Hartmann (who was already in conflict with Smith over cuts to the software division), to defect. Paul Goheen, the former systems software group head, became the new software chief. As the Commodore 128 neared completion, management constructed a new sales strategy to put it head to head against the Apple IIc and PCjr in specialty stores as well as Tramiel's favoured mass market retailers. To more plausibly bill it as a productivity machine, once again the software division had to look outside the company. Arktronics started in the dorms of the University of Michigan as a partnership between sophomore Robert "Bobby" Kotick and junior Howard Marks, who were then roommates. "We knew that unlike other industries," said Kotick in a 1984 interview, "there was a place for 19 and 20 year olds [in computers]." In July 1983 the company was formed to capitalize on Marks' ideas to envision a friendlier user interface for productivity applications. Marks, who was French, had previously worked for Apple and had access to its peripherals, including the then-novel use of a mouse as a pointer device. "This was way before there was ever a Lisa," Kotick added. "We realized that the biggest problem was that people like us couldn't use these things [computers] yet because they were too difficult and time-consuming to learn." They crafted a wish list and design document oriented to systems with 64K of RAM or less but featuring a picture (now we'd say icon-based) interface driven by a pointing device, such as a joystick or mouse, and an extensive on-line tutorial. Marks and Kotick hired students and even lured away some professors to work on the application, christened Jane after the Dick and Jane introductory reading books, who accepted shares in the company in lieu of salary. To fund development by their team of about thirty, Kotick tagged along with a friend to the annual Cattle Baron's Ball in Dallas at which he met real estate and casino investor Steve Wynn. Kotick managed to hitch a ride back to the East Coast on Wynn's plane where he pitched him on their company and Wynn encouraged him to write up a business plan. Three months later Marks and Kotick were summoned to Wynn's offices in Manhattan and flown to Atlantic City, whereupon Wynn handed them a cheque for $300,000 (in 2025 approximately $970,000) in exchange for a third of the company, providing business advice as the product progressed. Jane missed a first deadline for Comdex in December 1983 due to testing delays and finally launched at Softcon in February 1984 for the Apple II/II+ with 64K and the IIe at an MSRP of $295 [$920], later reduced to $179 [$560]. The program shipped on three colour-coded floppies, a grey bootable "systems disk" containing the word processor, database and spreadsheet applications (Janewrite, Janelist and Janecalc, respectively), a yellow "help disk" with the tutorial, and a black "data disk" for the user to save files. To ease the need for disk swapping, it would hunt for the right disk in either disk drive if you had two. Versions for the IBM PC and Atari 8-bits were said to be in progress. The initial release was uniquely accompanied by its own single-button mouse (Instagram link), a lower-cost unit — Kotick admitted settling for "a lesser quality product" — manufactured under contract by joystick maker Wico and incompatible with Apple's own later mouse options. This mouse interfaced to the Apple with a custom card and an 8-pin connector. Jane's appearance at the show attracted attention from another Steve, but at the Apple booth instead: Steve Jobs. Jobs visited the company in Ann Arbor and, suitably impressed, told Kotick and Marks they were wasting their time in college. Kotick duly dropped out to concentrate on the company, much to the consternation of his parents. Because it was intended to run on any existing Apple II with sufficient RAM, pretty much nothing was assumed about the hardware. It displayed strictly in monochrome and used the Apple hi-res mode to display upper and lowercase since the II/II+'s text mode was purely uppercase. Additionally, as 80-column capability wasn't universal, it used a software text shaper to display 60-column text in the word processor and, here, in the file requester. Basic windows like these, with title and information in the actual window bars, served for dialogue boxes and file selection. Although no emulator presently supports Jane's oddball original mouse, the PBS MacNeil/Lehrer NewsHour did a piece on Arktronics in 1984 (the photo above of Marks and an open Apple II case is from this clip) and, along with pictures of the Arktronics offices which I've scattered throughout this article, had some screenshots that illustrate its capabilities. Here a document is being edited in Janewrite. You can see close, scroll and size gadgets in the window frame, but interestingly the control to maximize the current window is in the lower right. The top of the screen shows the editing tools (hand pointer, arrow, scissors [cut], camera [copy] and paste jar), icons for the three core apps, and then system-wide icons for on-line help, printing, the file manager, preferences and "STOP" to globally cancel an operation. Across the bottom, beside the window maximize gadget, are tools for adjusting line justification, font style (bold, underline, bold and underline, superscript, subscript), print settings and search. I'll have more to say about all of these when we get to Jane's Commodore port. Document windows could also be moved and resized, and multiple windows from different Jane applications could be open simultaneously. If you hit Control-Reset, a Easter egg briefly flashes on-screen with the names of the Apple II programmers: Mike Lagae, John R. Haggis, Brent Iverson, Jim Poje, Peter Lee, Uwe Pleban, Allen Leibowitz and Ken Roe. Because portability to other, sometimes wildly different, systems was always contemplated, application-level components were written in a high level language and compiled for the target (allegedly an early microcomputer dialect of C), with the graphics and I/O drivers written directly in assembly. With the release of the IIc Arktronics updated the program to support Apple's mouse as well. Reviews of the Apple II version were decidedly mixed. In June 1984, InfoWorld called it "innovative" but also observed that "overbearing use of icons, some slow features, and some awkwardness mar the product, which could benefit from an emphasis on efficiency rather than gimmickry." Down under, Your Computer in November 1984 liked the simple interface and believed it would appeal to undemanding users but criticized the 236-page manual and found the mouse unreliable. "When the mouse works properly, it is good," wrote reviewer Evan McHugh, but "when it doesn't it's the pits." Likewise, although A+'s 1985 review also liked the interface and the fact that multiple windows from each module could be open at once, the magazine also felt that "the individual modules in Jane are not up to professional productivity quality." Perhaps because of the software display, Janewrite "was too slow to respond to the keystrokes of a moderately proficient typist," and Janecalc, equally slow, was also panned as "crippled" because it only supported a 24x20 maximum spreadsheet. "Thank you, Jane," quipped reviewer Danny Goodman, "[l]eave your number at the door." Jane was also billed as available for the Commodore 64, even in contemporary advertising, but COMPUTE!'s Gazette in January 1985 said it was "scheduled to be released for the Commodore 64 by the time you read this. The price is expected to be about $80 [$240]." Interviewed for the article, Marks said that Jane for the 64 was to come as a combination cartridge and disk package, where a "32K plug-in cartridge" would quickly and automatically bring up the system. The article claimed the cartridge would autoboot the applications from (now) just a single floppy plus the data disk, though I suspect the actual configuration was that the cartridge contained the applications and the disk contained the online tutorial, simultaneously furnishing a modicum of both instant access and copy protection. Notably, this version didn't come with its own mouse; Marks said they were working to support third-party mice as well as joystick and "touch pad" (presumably KoalaPad) options instead. Accounting for publishing delays, the Gazette piece would have been written several months prior in the fall of 1984 — after advertisements for the C64 version of Jane had been in multiple periodicals such as Creative Computing and Family Computing claiming you could purchase it already. In fact, the 64 version of Jane would never be released — it was simply cancelled once Commodore paid Arktronics to port it to the 128 and badged it as a Commodore product. As the 128's graphic and sound capabilities are virtually identical to the 64's in 40-column mode, save for the extra colour RAM, the port was relatively straightforward. (At the same time Commodore also rebadged the CP/M-based Perfect Software series from Thorn EMI for the 128, but this was non-exclusive, and their rebranded versions were exactly the same as sold for other CP/M-compatible systems. Goheen promised "comprehensive and professional developer support" for the new computer.) The new Jane could also be made cheaper: since the 128 is capable of autobooting a suitably coded floppy disk in drive 8, the cartridge could be dispensed with and the less expensive three-floppy scheme restored (though the grey disk was now called the "application disk"). A 128-mode 1541 fastloader is used if the new and much faster 1570 or 1571 disk drives aren't detected, though the 1571 still boots Jane noticeably faster than the fastloader. (Parenthetically, a frequent misconception is that the Z80 in the 128 does the boot sector check to start CP/M. In fact, the 8502 does that after the Z80 has already checked the Commodore key isn't down and entered 128 mode. In CP/M's case, the code in the CP/M disk boot sector instructs the 8502 to give control back to the Z80 so it can finish the boot sequence — if this weren't the case, the BASIC BOOT command wouldn't be able to start CP/M. Interestingly, 1581s booting CP/M have a special startup file to keep their own CP/M boot sector in a different location.) Otherwise, Jane 128 openly betrayed its origins on the 64: other than fastbooting with the 1571, which it mostly got for free, and support for the 128's new keys it took no advantage of any other 128 features, in particular no 2MHz support nor true VDC 80-column mode. Although the manual and box copy say using a mouse is supported, only the original 1350 mouse works, which strictly emulates a joystick. All three applications that were in the Apple II version are included. Under the hood the apps are implemented as overlays for a central kernel called JANEGM. Sadly, I didn't see any obvious credits while scanning through the disk files. The manual, which appears to have been written by a third party, insists on camelcasing the apps as JaneWrite, JaneCalc and JaneList even though the rear box copy doesn't distinguish them that way and the Apple II version and Arktronics' own advertising called them Janewrite, Janecalc and Janelist. I'll use the latter here. Commodore also included some official marketing material with the box, hawking their new 1902 monitor (with 80 column mode, which was useless for Jane), 1571 disk drive (which works well with Jane), 1670 Modem/1200 (which Jane doesn't use), 512K REU (which Jane doesn't use either) and the 1350 mouse — which in this photo is somewhat different-appearing than the released 1350/1351, and might have been a mockup. Actually, this system would have been a very nice 128 setup and very similar to the one we'll be using both for real and in VICE. Too bad Jane 128 could use relatively little of it. Both Jane and the Perfect series were demonstrated with the 128 for Winter CES 1985, though Commodore didn't announce MSRPs then for any of them at the time. It eventually emerged later that year for $49.95 [$150]; by the next year some retailers were selling it for as low as $35 [$100], compared to each of the Perfect titles then going for $45 apiece [$130]. Plus, the Perfect titles, being CP/M-based, were bland and text-based and failed to show off the C128's graphics, so Commodore ended up emphasizing Jane more in its contemporary marketing. Booting Jane 128 from the 128DCR's internal 1571 drive with my own 1902 monitor. Although its interface is similar to the Apple II's in broad strokes, Jane 128's most obvious difference is colour. However, there are numerous more subtle UI changes in this version, sufficient for it to be called "Jane 2.0" internally before release. We'll step through them here and in the next set of screenshots because they're an interesting comparison point to modern human interface practice. As with the Apple II, across the top of the screen are the various icons, or what the manual calls "pictures." These were slightly altered for the 128 from the Apple II originals. The blue icons again set the mode of the pointer ("tools") from the hand pointer, the insertion arrow, scissors (cut), camera (copy) and paste jar. The current tool is highlighted. You select a new tool by clicking on it, but you can also use the function keys (CLR/HOME, F1, F3, F5 and F7). By modern conventions Jane's tools are used backwards: instead of selecting a text range and "choosing a tool" (e.g., Command-C for copy) to operate on it, you choose a tool first and with that tool select the text range it operates on. I'll demonstrate this specific functionality in a couple instances, but any verb-object operation in Jane will work this way. (Linguistically, this makes Jane a head-initial language, while most modern GUIs are head-final.) Next to the tools are the main apps, Janewrite (now in purple), Janecalc (in green) and Janelist (in cyan), and next to them in grey are the same standard applets built into the kernel (online help, print dialogue, disk/file manager and setup). Finally, the STOP icon, now a solid red, stops the current app, and can be used to escape some screens, though not all. Unexpectedly it doesn't serve to quit Jane entirely: you just turn the computer off. Jane remembers what app is loaded and doesn't reload the overlay if you exit and re-enter it. However, unlike Jane for the Apple II, Jane 128 does not allow you to have multiple documents open simultaneously, a limitation that challenges the definition of "integrated software." In fact, of the three official Commodore productivity packages we've looked at so far, only poor abused 3-Plus-1 could do so. If you're working in one app and select another, Jane 128 will prompt you to save your work as if you'd clicked STOP, and the window will close. Given that the Apple II version managed to implement multiple documents in 64K of RAM, the Commodore 64 version — let alone the 128 — would seem to have little excuse, though I can think of two potential explanations. One is to increase the amount of memory available for any one document, which the Apple II version was indeed criticized for. The second is particular to the 128: its default memory configuration doesn't have a lot of free RAM, and it may have been judged too complicated to span or swap working sets across banks. (Some fiddling in the monitor shows that the documents simply occupy RAM in bank 1 and don't span elsewhere.) On the other hand, other 128 applications certainly do manage it, and it's possible development deadlines were a contributing factor. Let's start out with the online help, one of Marks and Kotick's fundamental design goals. Assuming you got the joystick (or 1350) plugged into the right port, there's a big honking question mark. What happens when you click on it? You get right into the online help window. The pointer snaps to the options; you can also move the pointer from option or cell to another option or cell with the CRSR keys/128 arrow keys and select it with the Commodore key. The window's yellow border is salient: any window that gives you choices to select from carries a yellow border. We'll see this again later. Incidentally, the manual is not in colour (just black, white and an accent magenta), and possibly as a result is all but totally ignorant of these UI choices or why they were made. The Apple II version's windows have a corner close gadget in the typical open square style, but this would only have made visual sense to someone familiar with the Lisa or Mac — which most Commodore users in 1985 wouldn't be. Instead, here windows you can close have a big bright red EXIT button (the ESC key can also serve this role in most cases). All icons are simply drawn onto the VIC-II high-res screen; unlike Magic Desk where pretty much everything was a sprite, the only sprite here is the pointer. Windows cannot be moved or resized, but by limiting icon and window boundaries to VIC-II 8x8 cells, drawing is fairly fast. Of course, most of the topics are on the yellow help disk (see? it matches). Jane 128, like the Apple II version, supports two disk drives, so you could have the help disk in device 9 and it would find it. The online help is pretty good, considering. It shows the icons and images as they would appear on-screen, and while they aren't live, they are accurate. The only black eye it gets is the technically truthful but functionally insufficient prompt "Press a key to continue" — the joystick or 1350 mouse button also work, and so does the ESC key to exit early, even though the exit button isn't shown. Some help items are animated and show you a demonstration, and each app has its own bespoke help. The system keeps track of what disks are where. If we start Janewrite by going to the typewriter, this blue dialogue box will appear — informational dialogue boxes always have a blue border — as it loads the overlay ... ... but then looks for a data disk, fails to find it, and asks for one. You need one even for a new document, and you can get stuck in a loop here if you don't provide one (pressing ESC just makes it try again, and clicking on the STOP icon doesn't do anything). You could put in the black data disk it comes with, but this one contains our generous donor's files, so we'll just give a blank disk image to VICE instead which Jane will offer to format. When creating a new data disk in VICE, if a 1571 is detected then Jane will want a real .d71 with the full available space, not a .d64, as it will then expect it can format both sides of the virtual disk. However, all of the Jane original disks, including the black one, are formatted single-sided for the 1541 since many early 128 owners would still be using one. The other way you can do this is from the disk icon. As these icons are in grey, so are their windows (except, curiously, help, but I can see how a yellow question mark would have looked bad against a white background), suggesting a global applet served by the central Jane kernel. The disk icon brings up a basic file manager allowing you to make duplicate backup files (but only to the same disk), rename or delete them, or create a new disk. The copy option is the default and is pre-selected when the window opens, which is irritating, because our modern reflexive habit of selecting the file first and then the action will cause an immediate copy to occur before you get the chance to click anything else. I don't think this was just me: there were several spurious duplicate files on the original black data disk I suspect for the same reason. If files are present on the disk, they will appear with their names and a filetype letter (W, C or L for Janewrite, Janecalc or Janelist respectively). Notice the slightly misshapen scrolling arrows, which were nice and clean on the Apple. We'll provide the .d71 to Jane here. Windows warning you about data loss have a red border. Interestingly, it provides both a No button and the exit button, which both do the same thing: abort back to the file manager. Jane seems unable to distinguish between an unformatted disk and a completely absent one, and will (fruitlessly) attempt to format an empty drive. Formatting in progress. The time estimates are surprisingly not far off. With our disk formatted, let's return to Janewrite at the end, since this will be the majority of the documents we'll convert. Instead, we'll start with the spreadsheet, Janecalc. Whenever any of the three built-in applications starts up, and once Jane has located the data disk, a file selector (in grey) appears. There are no spreadsheets ("worksheets") on our freshly formatted disk, so we click the NEW icon. Entering the new filename (blue window). You may have noticed that the red and blue windows are all invariably the same size regardless of contents and any active controls they contain. This probably simplified rendering quite a bit. Because Janecalc is green, its content window border is likewise green, and because Jane 128 doesn't multitask between the applications, it takes up the entirety of the screen. Two templates are provided, along with a roll-your-own option. We'll go with the Home Budget for illustration. The Home Budget template pulls up a simplified home budget by month which you can fill in. Jane supports 40, 64 and 80 column modes, all rendered in software on the VIC-IIe 320x200 display (not with the VDC's 640x200 display), but by default it uses 40. (I'll get to this in more detail in the word processor.) Along the bottom are various operators and the extent of the formula functions available (hardly competition for the Convergent WorkSlate). They can be selected with the pointer in lieu of text entry, which makes them quite discoverable, but in practice it's simply faster to type them. No other functions are implemented. Since the content window cannot be resized, the maximize gadget from the Apple II version became obviously useless and was removed. By using the joystick/mouse you can use the hand to point to a cell and then, with the hand pointing to it, just start typing text or a number. The cursor keys will move the pointer from cell to cell for you, though they will not exit the content area. If you click or otherwise select the cell with the hand, however, Jane considers this an attempt to construct a formula, which again would be frustrating to modern audiences used to, say, Microsoft Excel. But to edit it again, you pick the insert tool instead of the hand, and this time you must select the cell to type in it. Motion around the content area in all three applications is accomplished using multiple small icons in the bottom and right window borders. The "half full" icon pushes it all the way to the outer edge in that direction, while the double and single arrows move the viewport by large leaps and small leaps respectively. There are no thumbs to show relative location, but you can click anywhere along the scroll area for a proportionately "medium" jump if you like. You can also use CTRL-CRSR/CTRL-arrow keys. Even in 40-column mode, and even given that the scroll doesn't animate and just snaps to the new position, scrolling is agonizingly slow and multiple clicks on the scroll controls invariably overshoot. Putting it in 80 column mode doesn't just give you more on the screen — it also means you don't need to endure as many pauses trying to move around. Again, I'll have more to say about font sizes when we get to Janewrite. Unique to Janecalc, the scrolling actually wraps. Worksheets remain limited to 26 columns (A-Z), as in the Apple II version, but now up to 50 rows are allowed. Still, this wouldn't have been sufficient for anything larger than a modest small business, even in 1985. Formulas are approximately VisiCalc-style using A1 absolute notation for cells, though there are no sigils for functions (not that there's very many) and ranges are delimited by colons. Most basic math operators and parentheses are available. Here, we'll get a sum of this row ... ... and then manually calculate an average by dividing the sum by the count of populated rows (we could also just use avg). The template includes this at the bottom, but this shows you how formula entry worked. As we add data to dependent cells the sheets recalculate but circular references are not handled, though in fairness this capability was still not common in small spreadsheet applications. We'll go to Janelist next. When we do so, a red window pops up to prompt us to save our work. Switching to Janelist. Creating our new list. All very consistent (the file manager and requester seem to be part of the Jane kernel). Janelist, in fairness, never purported to be a database in any incarnation and acts more like a cardfile; even the manual merely refers to it as a "list keeper." Like Janecalc it comes with templates, though Janelist supports a substantial number more. For variety I'll try to enter some of my very large CD collection, because I'm one of those people (vinyl is for art, CD is for listening). The list comes up as fillable fields. There may be up to 15 field names up to 12 characters long. If you choose to create your own, then Jane will step you through entering the field names. That's about all the customization you can do. The values for those fields can span multiple lines, which is what the viewport scrolling is for — you use the icons at the bottom to advance through individual cards. Incidentally, Atom Heart Mother is Pink Floyd's finest album and I will tolerate no disagreement. The icon that looks like cards being pulled out suggests how to make a query (the magnifying glass icon, or possibly the funnel icon to denote a filter, wasn't universal at this point). Because it gives you choices, it's yellow, remember? The two OK buttons do different things. The top one filters cards to the query requested, but the bottom one undoes any query. You can query on top of queries for a primitive sort of logical-AND. Partial word searches are supported. For example, here is the second best Beatles album — the best is, of course, Abbey Road. Since we searched for the Beatles, when we run out of Beatles CDs, nothing more turns up from my formidable library. It is also possible to sort cards, in which case they appear in that order instead. You cannot sort on multiple fields, and you can't sort descending. Finally, Janewrite, where we will spend the rest of our time — and where apparently most of Jane's users spent theirs, including our previous owners. I've got a prefab file here I constructed while playing around to explore the file format, so this time we'll load a document instead of entering one, just to show you what that looks like from the file requester. Janewrite is IMHO the most polished and competent of the three apps, and it feels like the most development time was spent on it, too. It also shows what the Jane font renderer is capable of: although non-proportional and only a single typeface, you can see bold, underline, bold and underlined, superscript, and subscript are all possible. The bottom shows left, right, centre and full justification options, done per line, plus the font options, and then search (this time with a magnifying glass) and page layout. These icons are larger and more detailed than the Apple's. As with other parts of the UI, text attributes are set verb-initial, i.e., you would choose the desired style, then the insertion tool, then highlight the range of text and finally release the button (or, annoyingly, wait, which makes fine adjustments harder than they should be). Notice that there is an explicit bold-and-underline option, instead of using the separate bold and underline options in combination: that's because you can't make superscripted or subscripted text bold or underlined. The top of the content area shows the ruler — in characters, not inches — and margin stops and the single paragraph indent stop, which you can drag to change them. Interestingly, the ruler seems to be new for Jane 128: no screenshot for the Apple II version demonstrates one. Janewrite is also capable of a modicum of WYSIWYG if you select the 80 column option. This and other options come from the "computer" icon, which acts as a preference panel. Preferences are saved to the application disk and are global to all three applications. Despite this presenting a choice window (ordinarily yellow), Jane seems to treat it as a global window from the kernel, so it's grey. The bottom set of options are specifically for configuring the printer. Print output is generated with control codes and text only; Jane does not generate graphic sequences, so what actually shows up on the page depends on what your printer actually supports. The default middle print size option corresponds to 80 columns (more accurately, the default or 12cpi font size), while the small font corresponds to the condensed 15cpi and/or 132 column option available on some printers, and the large font corresponds to the 60 or 64-column (e.g., 10cpi) option also only available on some printers — not the expanded double wide printing option more typical of Commodore-specific devices. You could also select between regular fanfold tractor feed or plain paper, as well as the Near Letter Quality print option some printers supported, and finally the printer itself. There was built-in support for the MPS-801 (i.e., 1525), MPS-802 (i.e., 1526), 1101, "Oki" (generic Okidata), and generic "Epson" printers, assuming they were connected somehow to the IEC serial such as through a third-party parallel printer interface. These printer drivers varied wildly in their capabilities: the 1525/MPS-801 "driver" supported almost nothing except basic text, while the generic Okidata and Epson drivers supported nearly everything that Jane could generate. The "OTHER" driver is customizeable, a neat idea, if a little clumsy. A BASIC program called BUILDPRT on the grey disk allows you to populate it with your printer's control codes. Control sequences up to three characters long were supported. You would enter these from the manual, it would save them to disk, and then you could use the custom driver inside Jane. The topmost options affect the appearance of Jane. You can choose from three font sizes, all non-proportional, corresponding to 40, 64 or 80 column text. Confusingly, the 80-column option is the last when it's the middle option for printing. (The Apple II version likely didn't support 80 column text due to its smaller hi-res horizontal width.) Pointer speed and the "beep" Jane makes when you select options are also configurable. Here's how it looks in 80 columns, using the typical "soft 80" approach on the 64 which is more or less legible, at least on a composite display. As there are no colours in the content area, there is no risk of colour clash. This is probably the most useful view in Janewrite. The 64-column view, by contrast, is probably the least useful. The 40-column view is the most legible and 2:1 the size of a typical 80-column line, so it's easy to mentally grok page layout that way, but the 64-column view is odd enough to end up being the worst of both worlds. An interesting feature of Janewrite are the accented characters, which was not frequently seen on home computer-class word processors, as explained by the on-line help. Janewrite treats them as diacritics, and they can even be applied to letters that wouldn't ordinarily use them (because who knows? some language might), such as the grave and acute accents on the n as well as the more typical tilde. In fact, you can apply them to any character, even punctuation. However, the use of the up arrow to indicate a circumflex means there's no way you can type a literal caret into your document, and while a macron would have been nice, omitting the umlaut seems a greater fault. The decorators are also rather hard to distinguish in 80 columns, so Spanish users of Juana 128 might want to go to cuarenta column mode to mirar mejor. Janewrite also has basic find and/or find-and-replace, and a small pane appears below the content area when it's active. There are also decent page layout options, including setting both a per-page title and its position, adding a page number and its position, and margins, number of copies and starting page, though the last two would seem more appropriate for a print dialogue than a page layout one. Note that Jane will always print a 10-space left margin, so an 80-column printed line can be no longer than 70 characters, and this is indeed the maximum width Janewrite will support. However, paragraphs are apparently not stored as continuous sequences of text, demonstrated here with a contrived example. (In fact, we'll prove they aren't shortly.) While Janewrite will word-wrap at the right margin, inserting text after that will wrap onto a new line, not into the next line, even if the two lines were previously entered "together." There's a speed/flexibility tradeoff here in that Janewrite doesn't have to continuously reflow paragraphs, but it also means its concept of a paragraph is entirely based on how much you select. The text can be manually reflowed, joining lines if necessary, by picking one of the paragraph justification options and selecting the text with the hand, which will then be reflowed (and, if needed, spaces inserted) to match. In fact, this is also necessary if you change the margins because Jane doesn't automatically reformat your document then either. I also promised you an example of cut and paste, so here's one using the scissors (cut). You simply pick it and, with the button down, drag it across the text you want and release the button. Note that there is no undo, though I suppose you could just immediately paste it back in. Exiting Janewrite (though not saving, because we need the accented characters to stay in the file). Now that we understand what Jane can do and how it works, let's move on to converting the files. We can extract our test files we made from our .d71 with VICE's c1541 utility and hexdump it. This got a little more difficult than it should have been: % c1541 work.d71 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> dir 0 "data#000 " 01 2a 39 "c.TESTCALC" prg 3 "l.TESTLIST" prg 4 "w.nOTE.2" prg 4 "w.TESTCONV" prg 1278 blocks free. c1541 #8> read "w.TESTCONV" ERR = 62, FILE NOT FOUND, 00, 00 cannot read `w.TESTCONV' on unit 8 invalid filename As you may have guessed, that's because the filenames, and it turns out the data in the files themselves, are stored as true ASCII, not PETSCII (indeed as they would have been on the Apple II, also), so c1541's filename conversion fails. Fortunately, the extract command will walk the entire directory and pull out all the files no matter what they're named. The documents are all regular Commodore PRoGram files with a starting address and they appear to be loaded in-place at that address into bank 1. This introduces the possibility of some delightful save-file hacks but we're not here for that today. That means we can also simply extract our previous owners' files en masse as well. I imaged their disk using my ZoomFloppy and external 1571, and since they are normal PRGs, a BAM copy of the allocated sectors is all we need to do, with one wrinkle: % d64copy -B 9 r_jane_bam.d64 [Warning] growing image file to 683 blocks 14: --*****--*****--***** 8% 15/171[Warning] read error: 0e/00: 5 14: ?******************** 12% 21/171[Warning] giving up... 14: ?******************** 15: ********************* 16: ********************* 17: ********************* 18: ******************* 19: ******************* 20: ******************* 21: ******************* 22: ****..***...***...* 100% 171/171 170 blocks copied. % c1541 r_jane_bam.d64 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> extract c1541 #8> quit Fortunately it doesn't look like the bad sector was in any of the files they cared about. Let's get an idea of the format from our test files. Janecalc files are "huge" because it looks like the entire 26x50 cell range is saved regardless of whether anything's in it or not. Looking at the directory of their data disk where they had saved a couple of sparse test spreadsheets of their own, they also were 39 blocks in length no matter how many cells were actually populated. The on-disk format is consequentially a bit wasteful: 000003a0 00 00 00 00 00 20 20 20 4a 61 6e 75 61 72 79 20 |..... January | 000003b0 20 46 65 62 72 75 61 72 79 20 20 20 20 20 4d 61 | February Ma| 000003c0 72 63 68 20 20 20 20 20 41 70 72 69 6c 20 20 20 |rch April | 000003d0 20 20 20 20 4d 61 79 20 20 20 20 20 20 4a 75 6e | May Jun| 000003e0 65 20 20 20 20 20 20 4a 75 6c 79 20 20 20 20 41 |e July A| 000003f0 75 67 75 73 74 20 53 65 70 74 65 6d 62 65 72 20 |ugust September | 00000400 20 20 4f 63 74 6f 62 65 72 20 20 4e 6f 76 65 6d | October Novem| 00000410 62 65 72 20 20 44 65 63 65 6d 62 65 72 00 00 01 |ber December...| 00000420 04 00 00 00 00 00 00 20 20 54 6f 74 61 6c 20 20 |....... Total | 00000430 20 41 76 65 72 61 67 65 20 20 20 00 00 01 04 00 | Average .....| Cardfiles are stored much more efficiently. Here's the entirety of our two cards. The fields are in the header, padded out to the fixed 12 character length, but with technically unnecessary nulls between them. A spurious "Beatles" entry looks like a buffer that was captured as part of the save, and there is also a page-aligned (counting the starting address) pad of nulls. Otherwise, the value strings look null-delimited, in the order they appear in the field list (unpopulated fields are zero-length strings). When you run out of fields, you're on the next card. % hexdump -C l.TESTLIST 00000000 00 7f 01 00 36 02 08 00 04 00 54 69 74 6c 65 20 |....6.....Title | 00000010 20 20 20 20 20 20 00 4c 65 61 64 20 41 72 74 69 | .Lead Arti| 00000020 73 74 20 00 4f 74 68 65 72 20 41 72 74 69 73 74 |st .Other Artist| 00000030 00 43 6f 6d 70 6f 73 65 72 20 20 20 20 00 43 6f |.Composer .Co| 00000040 6e 64 75 63 74 6f 72 20 20 20 00 57 68 65 72 65 |nductor .Where| 00000050 20 4b 65 70 74 20 20 00 42 6f 72 72 6f 77 65 64 | Kept .Borrowed| 00000060 20 62 79 20 00 44 61 74 65 20 4c 65 6e 74 20 20 | by .Date Lent | 00000070 20 00 00 00 ff ff 01 ff ff ff ff ff ff ff ff ff | ...............| 00000080 ff ff ff ff ff 00 01 02 03 04 05 06 07 00 01 02 |................| 00000090 03 04 05 06 07 ff ff ff ff ff ff ff ff ff ff 00 |................| 000000a0 00 54 68 65 20 42 65 61 74 6c 65 73 00 00 00 00 |.The Beatles....| 000000b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00000100 d7 09 80 60 60 ac 98 09 ae 04 cf a5 ea a9 d7 15 |...``...........| 00000110 80 ac 1d 21 d6 1c 80 60 60 ac 98 09 ae 04 cf 20 |...!...``...... | 00000120 75 0b 00 00 ac 0a 95 a5 f0 b0 a9 a6 b1 a9 a4 b1 |u...............| 00000130 a5 f1 b0 a9 a7 b1 a9 a5 b1 ac c0 08 cf 20 75 0b |............. u.| 00000140 fe ff a5 37 ae 8c ff 00 c0 d8 4b 80 cf a5 f0 b0 |...7......K.....| 00000150 a7 a6 b1 c0 d8 60 80 a5 f1 b0 a7 a7 b1 c0 d8 60 |.....`.........`| 00000160 80 cf a5 f0 b0 a7 a6 b1 00 00 09 00 01 5d f6 00 |.............]..| 00000170 00 00 00 09 00 09 00 01 66 f6 00 00 00 00 54 00 |........f.....T.| 00000180 50 00 01 b1 f6 69 64 65 20 12 00 42 00 01 6f f6 |P....ide ..B..o.| 00000190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 000001a0 00 00 00 00 00 00 00 52 65 76 6f 6c 76 65 72 00 |.......Revolver.| 000001b0 54 68 65 20 42 65 61 74 6c 65 73 00 00 4c 65 6e |The Beatles..Len| 000001c0 6e 6f 6e 2d 4d 63 43 61 72 74 6e 65 79 2d 48 61 |non-McCartney-Ha| 000001d0 72 72 69 73 6f 6e 00 47 65 6f 72 67 65 20 4d 61 |rrison.George Ma| 000001e0 72 74 69 6e 00 00 00 00 00 41 74 6f 6d 20 48 65 |rtin.....Atom He| 000001f0 61 72 74 20 4d 6f 74 68 65 72 00 50 69 6e 6b 20 |art Mother.Pink | 00000200 46 6c 6f 79 64 00 00 57 61 74 65 72 73 2d 47 69 |Floyd..Waters-Gi| 00000210 6c 6d 6f 75 72 2d 4d 61 73 6f 6e 2d 57 72 69 67 |lmour-Mason-Wrig| 00000220 68 74 2d 47 65 65 73 6f 6e 00 50 69 6e 6b 20 46 |ht-Geeson.Pink F| 00000230 6c 6f 79 64 00 00 00 00 |loyd....| 00000238 This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. In January 1984 Jack Tramiel was forced out of the company he founded by chairman Irving Gould and shortly thereafter the 264 line was slashed by new CEO Marshall Smith. Three models were chosen from the various prototypes and experiments, the 16K 16 (and in Europe the 116 as well) to serve as the low-end, and the 64K 264, now renamed the Plus/4, as the high-end. Both the completed Magic Desk and Magic Desk II were cut, as was the education flavour based on a built-in Logo implementation. Only the Plus/4 would offer Trilogy, renamed to 3-Plus-1, and its ROM size was cut to 32K to reduce production costs further which in turn forced Johnson to make serious reductions in functionality. As a result 3-Plus-1 became nearly as maligned as the Plus/4 itself (mocked in the press as the "Minus/60" for its idiosyncrasies, deliberately incompatible ports and lack of 64 software compatibility), though yours truly actually used the spreadsheet for a household budget when I was a starving student, and it wasn't that bad. Nevertheless, as evidence of the hasty last-minute switch, the Plus/4 manual still makes vague reference to "built-in software packages," saying the computer will tell you "which packages are available and which function key to use to activate them." There was only ever one in the production model, and it was 3+1. As Tri-Micro had still maintained the rights, Trilogy was subsequently released in its original form for the 64 as Team-Mate to the rave reviews 3-Plus-1 never got (in July 1985 RUN called it "a high-performance program that Commodore users will discover to be one of the best available"). Johnson later got his chance to show what 3+1 was really capable of with Plus/Extra, a full disk version sold by Tri Micro, but it lacked the close integration of both Team-Mate and 3+1 and ended up tainted in the market by its predecessor. Commodore never adopted it. The failure of the Plus/4 to succeed the 64, much less overtake it, demonstrated clearly to Commodore management that 64 compatibility was essential in their next computer. Around this same time Sig Hartmann had noted the success of Atari's own first-party software unit Atarisoft on non-Atari platforms (though AtariLab was developed externally), even for the 64, and said there were similar plans to port Commodore first-party software and licenses to the Apple II, IBM PC and PCjr. (NARRATOR: This didn't happen.) However, by mid-1984 the software division had also developed a reputation for poor quality, with Scott Mace commenting in InfoWorld that — hits like International Soccer notwithstanding — "so far, the normal standard for Commodore software is mediocrity." In the meantime, Tramiel had bought the ailing Atari from Warner Communications and lured several Commodore managers, including Hartmann (who was already in conflict with Smith over cuts to the software division), to defect. Paul Goheen, the former systems software group head, became the new software chief. As the Commodore 128 neared completion, management constructed a new sales strategy to put it head to head against the Apple IIc and PCjr in specialty stores as well as Tramiel's favoured mass market retailers. To more plausibly bill it as a productivity machine, once again the software division had to look outside the company. Arktronics started in the dorms of the University of Michigan as a partnership between sophomore Robert "Bobby" Kotick and junior Howard Marks, who were then roommates. "We knew that unlike other industries," said Kotick in a 1984 interview, "there was a place for 19 and 20 year olds [in computers]." In July 1983 the company was formed to capitalize on Marks' ideas to envision a friendlier user interface for productivity applications. Marks, who was French, had previously worked for Apple and had access to its peripherals, including the then-novel use of a mouse as a pointer device. "This was way before there was ever a Lisa," Kotick added. "We realized that the biggest problem was that people like us couldn't use these things [computers] yet because they were too difficult and time-consuming to learn." They crafted a wish list and design document oriented to systems with 64K of RAM or less but featuring a picture (now we'd say icon-based) interface driven by a pointing device, such as a joystick or mouse, and an extensive on-line tutorial. Marks and Kotick hired students and even lured away some professors to work on the application, christened Jane after the Dick and Jane introductory reading books, who accepted shares in the company in lieu of salary. To fund development by their team of about thirty, Kotick tagged along with a friend to the annual Cattle Baron's Ball in Dallas at which he met real estate and casino investor Steve Wynn. Kotick managed to hitch a ride back to the East Coast on Wynn's plane where he pitched him on their company and Wynn encouraged him to write up a business plan. Three months later Marks and Kotick were summoned to Wynn's offices in Manhattan and flown to Atlantic City, whereupon Wynn handed them a cheque for $300,000 (in 2025 approximately $970,000) in exchange for a third of the company, providing business advice as the product progressed. Jane missed a first deadline for Comdex in December 1983 due to testing delays and finally launched at Softcon in February 1984 for the Apple II/II+ with 64K and the IIe at an MSRP of $295 [$920], later reduced to $179 [$560]. The program shipped on three colour-coded floppies, a grey bootable "systems disk" containing the word processor, database and spreadsheet applications (Janewrite, Janelist and Janecalc, respectively), a yellow "help disk" with the tutorial, and a black "data disk" for the user to save files. To ease the need for disk swapping, it would hunt for the right disk in either disk drive if you had two. Versions for the IBM PC and Atari 8-bits were said to be in progress. The initial release was uniquely accompanied by its own single-button mouse (Instagram link), a lower-cost unit — Kotick admitted settling for "a lesser quality product" — manufactured under contract by joystick maker Wico and incompatible with Apple's own later mouse options. This mouse interfaced to the Apple with a custom card and an 8-pin connector. Jane's appearance at the show attracted attention from another Steve, but at the Apple booth instead: Steve Jobs. Jobs visited the company in Ann Arbor and, suitably impressed, told Kotick and Marks they were wasting their time in college. Kotick duly dropped out to concentrate on the company, much to the consternation of his parents. Because it was intended to run on any existing Apple II with sufficient RAM, pretty much nothing was assumed about the hardware. It displayed strictly in monochrome and used the Apple hi-res mode to display upper and lowercase since the II/II+'s text mode was purely uppercase. Additionally, as 80-column capability wasn't universal, it used a software text shaper to display 60-column text in the word processor and, here, in the file requester. Basic windows like these, with title and information in the actual window bars, served for dialogue boxes and file selection. Although no emulator presently supports Jane's oddball original mouse, the PBS MacNeil/Lehrer NewsHour did a piece on Arktronics in 1984 (the photo above of Marks and an open Apple II case is from this clip) and, along with pictures of the Arktronics offices which I've scattered throughout this article, had some screenshots that illustrate its capabilities. Here a document is being edited in Janewrite. You can see close, scroll and size gadgets in the window frame, but interestingly the control to maximize the current window is in the lower right. The top of the screen shows the editing tools (hand pointer, arrow, scissors [cut], camera [copy] and paste jar), icons for the three core apps, and then system-wide icons for on-line help, printing, the file manager, preferences and "STOP" to globally cancel an operation. Across the bottom, beside the window maximize gadget, are tools for adjusting line justification, font style (bold, underline, bold and underline, superscript, subscript), print settings and search. I'll have more to say about all of these when we get to Jane's Commodore port. Document windows could also be moved and resized, and multiple windows from different Jane applications could be open simultaneously. If you hit Control-Reset, a Easter egg briefly flashes on-screen with the names of the Apple II programmers: Mike Lagae, John R. Haggis, Brent Iverson, Jim Poje, Peter Lee, Uwe Pleban, Allen Leibowitz and Ken Roe. Because portability to other, sometimes wildly different, systems was always contemplated, application-level components were written in a high level language and compiled for the target (allegedly an early microcomputer dialect of C), with the graphics and I/O drivers written directly in assembly. With the release of the IIc Arktronics updated the program to support Apple's mouse as well. Reviews of the Apple II version were decidedly mixed. In June 1984, InfoWorld called it "innovative" but also observed that "overbearing use of icons, some slow features, and some awkwardness mar the product, which could benefit from an emphasis on efficiency rather than gimmickry." Down under, Your Computer in November 1984 liked the simple interface and believed it would appeal to undemanding users but criticized the 236-page manual and found the mouse unreliable. "When the mouse works properly, it is good," wrote reviewer Evan McHugh, but "when it doesn't it's the pits." Likewise, although A+'s 1985 review also liked the interface and the fact that multiple windows from each module could be open at once, the magazine also felt that "the individual modules in Jane are not up to professional productivity quality." Perhaps because of the software display, Janewrite "was too slow to respond to the keystrokes of a moderately proficient typist," and Janecalc, equally slow, was also panned as "crippled" because it only supported a 24x20 maximum spreadsheet. "Thank you, Jane," quipped reviewer Danny Goodman, "[l]eave your number at the door." Jane was also billed as available for the Commodore 64, even in contemporary advertising, but COMPUTE!'s Gazette in January 1985 said it was "scheduled to be released for the Commodore 64 by the time you read this. The price is expected to be about $80 [$240]." Interviewed for the article, Marks said that Jane for the 64 was to come as a combination cartridge and disk package, where a "32K plug-in cartridge" would quickly and automatically bring up the system. The article claimed the cartridge would autoboot the applications from (now) just a single floppy plus the data disk, though I suspect the actual configuration was that the cartridge contained the applications and the disk contained the online tutorial, simultaneously furnishing a modicum of both instant access and copy protection. Notably, this version didn't come with its own mouse; Marks said they were working to support third-party mice as well as joystick and "touch pad" (presumably KoalaPad) options instead. Accounting for publishing delays, the Gazette piece would have been written several months prior in the fall of 1984 — after advertisements for the C64 version of Jane had been in multiple periodicals such as Creative Computing and Family Computing claiming you could purchase it already. In fact, the 64 version of Jane would never be released — it was simply cancelled once Commodore paid Arktronics to port it to the 128 and badged it as a Commodore product. As the 128's graphic and sound capabilities are virtually identical to the 64's in 40-column mode, save for the extra colour RAM, the port was relatively straightforward. (At the same time Commodore also rebadged the CP/M-based Perfect Software series from Thorn EMI for the 128, but this was non-exclusive, and their rebranded versions were exactly the same as sold for other CP/M-compatible systems. Goheen promised "comprehensive and professional developer support" for the new computer.) The new Jane could also be made cheaper: since the 128 is capable of autobooting a suitably coded floppy disk in drive 8, the cartridge could be dispensed with and the less expensive three-floppy scheme restored (though the grey disk was now called the "application disk"). A 128-mode 1541 fastloader is used if the new and much faster 1570 or 1571 disk drives aren't detected, though the 1571 still boots Jane noticeably faster than the fastloader. (Parenthetically, a frequent misconception is that the Z80 in the 128 does the boot sector check to start CP/M. In fact, the 8502 does that after the Z80 has already checked the Commodore key isn't down and entered 128 mode. In CP/M's case, the code in the CP/M disk boot sector instructs the 8502 to give control back to the Z80 so it can finish the boot sequence — if this weren't the case, the BASIC BOOT command wouldn't be able to start CP/M. Interestingly, 1581s booting CP/M have a special startup file to keep their own CP/M boot sector in a different location.) Otherwise, Jane 128 openly betrayed its origins on the 64: other than fastbooting with the 1571, which it mostly got for free, and support for the 128's new keys it took no advantage of any other 128 features, in particular no 2MHz support nor true VDC 80-column mode. Although the manual and box copy say using a mouse is supported, only the original 1350 mouse works, which strictly emulates a joystick. All three applications that were in the Apple II version are included. Under the hood the apps are implemented as overlays for a central kernel called JANEGM. Sadly, I didn't see any obvious credits while scanning through the disk files. The manual, which appears to have been written by a third party, insists on camelcasing the apps as JaneWrite, JaneCalc and JaneList even though the rear box copy doesn't distinguish them that way and the Apple II version and Arktronics' own advertising called them Janewrite, Janecalc and Janelist. I'll use the latter here. Commodore also included some official marketing material with the box, hawking their new 1902 monitor (with 80 column mode, which was useless for Jane), 1571 disk drive (which works well with Jane), 1670 Modem/1200 (which Jane doesn't use), 512K REU (which Jane doesn't use either) and the 1350 mouse — which in this photo is somewhat different-appearing than the released 1350/1351, and might have been a mockup. Actually, this system would have been a very nice 128 setup and very similar to the one we'll be using both for real and in VICE. Too bad Jane 128 could use relatively little of it. Both Jane and the Perfect series were demonstrated with the 128 for Winter CES 1985, though Commodore didn't announce MSRPs then for any of them at the time. It eventually emerged later that year for $49.95 [$150]; by the next year some retailers were selling it for as low as $35 [$100], compared to each of the Perfect titles then going for $45 apiece [$130]. Plus, the Perfect titles, being CP/M-based, were bland and text-based and failed to show off the C128's graphics, so Commodore ended up emphasizing Jane more in its contemporary marketing. Booting Jane 128 from the 128DCR's internal 1571 drive with my own 1902 monitor. Although its interface is similar to the Apple II's in broad strokes, Jane 128's most obvious difference is colour. However, there are numerous more subtle UI changes in this version, sufficient for it to be called "Jane 2.0" internally before release. We'll step through them here and in the next set of screenshots because they're an interesting comparison point to modern human interface practice. As with the Apple II, across the top of the screen are the various icons, or what the manual calls "pictures." These were slightly altered for the 128 from the Apple II originals. The blue icons again set the mode of the pointer ("tools") from the hand pointer, the insertion arrow, scissors (cut), camera (copy) and paste jar. The current tool is highlighted. You select a new tool by clicking on it, but you can also use the function keys (CLR/HOME, F1, F3, F5 and F7). By modern conventions Jane's tools are used backwards: instead of selecting a text range and "choosing a tool" (e.g., Command-C for copy) to operate on it, you choose a tool first and with that tool select the text range it operates on. I'll demonstrate this specific functionality in a couple instances, but any verb-object operation in Jane will work this way. (Linguistically, this makes Jane a head-initial language, while most modern GUIs are head-final.) Next to the tools are the main apps, Janewrite (now in purple), Janecalc (in green) and Janelist (in cyan), and next to them in grey are the same standard applets built into the kernel (online help, print dialogue, disk/file manager and setup). Finally, the STOP icon, now a solid red, stops the current app, and can be used to escape some screens, though not all. Unexpectedly it doesn't serve to quit Jane entirely: you just turn the computer off. Jane remembers what app is loaded and doesn't reload the overlay if you exit and re-enter it. However, unlike Jane for the Apple II, Jane 128 does not allow you to have multiple documents open simultaneously, a limitation that challenges the definition of "integrated software." In fact, of the three official Commodore productivity packages we've looked at so far, only poor abused 3-Plus-1 could do so. If you're working in one app and select another, Jane 128 will prompt you to save your work as if you'd clicked STOP, and the window will close. Given that the Apple II version managed to implement multiple documents in 64K of RAM, the Commodore 64 version — let alone the 128 — would seem to have little excuse, though I can think of two potential explanations. One is to increase the amount of memory available for any one document, which the Apple II version was indeed criticized for. The second is particular to the 128: its default memory configuration doesn't have a lot of free RAM, and it may have been judged too complicated to span or swap working sets across banks. (Some fiddling in the monitor shows that the documents simply occupy RAM in bank 1 and don't span elsewhere.) On the other hand, other 128 applications certainly do manage it, and it's possible development deadlines were a contributing factor. Let's start out with the online help, one of Marks and Kotick's fundamental design goals. Assuming you got the joystick (or 1350) plugged into the right port, there's a big honking question mark. What happens when you click on it? You get right into the online help window. The pointer snaps to the options; you can also move the pointer from option or cell to another option or cell with the CRSR keys/128 arrow keys and select it with the Commodore key. The window's yellow border is salient: any window that gives you choices to select from carries a yellow border. We'll see this again later. Incidentally, the manual is not in colour (just black, white and an accent magenta), and possibly as a result is all but totally ignorant of these UI choices or why they were made. The Apple II version's windows have a corner close gadget in the typical open square style, but this would only have made visual sense to someone familiar with the Lisa or Mac — which most Commodore users in 1985 wouldn't be. Instead, here windows you can close have a big bright red EXIT button (the ESC key can also serve this role in most cases). All icons are simply drawn onto the VIC-II high-res screen; unlike Magic Desk where pretty much everything was a sprite, the only sprite here is the pointer. Windows cannot be moved or resized, but by limiting icon and window boundaries to VIC-II 8x8 cells, drawing is fairly fast. Of course, most of the topics are on the yellow help disk (see? it matches). Jane 128, like the Apple II version, supports two disk drives, so you could have the help disk in device 9 and it would find it. The online help is pretty good, considering. It shows the icons and images as they would appear on-screen, and while they aren't live, they are accurate. The only black eye it gets is the technically truthful but functionally insufficient prompt "Press a key to continue" — the joystick or 1350 mouse button also work, and so does the ESC key to exit early, even though the exit button isn't shown. Some help items are animated and show you a demonstration, and each app has its own bespoke help. The system keeps track of what disks are where. If we start Janewrite by going to the typewriter, this blue dialogue box will appear — informational dialogue boxes always have a blue border — as it loads the overlay ... ... but then looks for a data disk, fails to find it, and asks for one. You need one even for a new document, and you can get stuck in a loop here if you don't provide one (pressing ESC just makes it try again, and clicking on the STOP icon doesn't do anything). You could put in the black data disk it comes with, but this one contains our generous donor's files, so we'll just give a blank disk image to VICE instead which Jane will offer to format. When creating a new data disk in VICE, if a 1571 is detected then Jane will want a real .d71 with the full available space, not a .d64, as it will then expect it can format both sides of the virtual disk. However, all of the Jane original disks, including the black one, are formatted single-sided for the 1541 since many early 128 owners would still be using one. The other way you can do this is from the disk icon. As these icons are in grey, so are their windows (except, curiously, help, but I can see how a yellow question mark would have looked bad against a white background), suggesting a global applet served by the central Jane kernel. The disk icon brings up a basic file manager allowing you to make duplicate backup files (but only to the same disk), rename or delete them, or create a new disk. The copy option is the default and is pre-selected when the window opens, which is irritating, because our modern reflexive habit of selecting the file first and then the action will cause an immediate copy to occur before you get the chance to click anything else. I don't think this was just me: there were several spurious duplicate files on the original black data disk I suspect for the same reason. If files are present on the disk, they will appear with their names and a filetype letter (W, C or L for Janewrite, Janecalc or Janelist respectively). Notice the slightly misshapen scrolling arrows, which were nice and clean on the Apple. We'll provide the .d71 to Jane here. Windows warning you about data loss have a red border. Interestingly, it provides both a No button and the exit button, which both do the same thing: abort back to the file manager. Jane seems unable to distinguish between an unformatted disk and a completely absent one, and will (fruitlessly) attempt to format an empty drive. Formatting in progress. The time estimates are surprisingly not far off. With our disk formatted, let's return to Janewrite at the end, since this will be the majority of the documents we'll convert. Instead, we'll start with the spreadsheet, Janecalc. Whenever any of the three built-in applications starts up, and once Jane has located the data disk, a file selector (in grey) appears. There are no spreadsheets ("worksheets") on our freshly formatted disk, so we click the NEW icon. Entering the new filename (blue window). You may have noticed that the red and blue windows are all invariably the same size regardless of contents and any active controls they contain. This probably simplified rendering quite a bit. Because Janecalc is green, its content window border is likewise green, and because Jane 128 doesn't multitask between the applications, it takes up the entirety of the screen. Two templates are provided, along with a roll-your-own option. We'll go with the Home Budget for illustration. The Home Budget template pulls up a simplified home budget by month which you can fill in. Jane supports 40, 64 and 80 column modes, all rendered in software on the VIC-IIe 320x200 display (not with the VDC's 640x200 display), but by default it uses 40. (I'll get to this in more detail in the word processor.) Along the bottom are various operators and the extent of the formula functions available (hardly competition for the Convergent WorkSlate). They can be selected with the pointer in lieu of text entry, which makes them quite discoverable, but in practice it's simply faster to type them. No other functions are implemented. Since the content window cannot be resized, the maximize gadget from the Apple II version became obviously useless and was removed. By using the joystick/mouse you can use the hand to point to a cell and then, with the hand pointing to it, just start typing text or a number. The cursor keys will move the pointer from cell to cell for you, though they will not exit the content area. If you click or otherwise select the cell with the hand, however, Jane considers this an attempt to construct a formula, which again would be frustrating to modern audiences used to, say, Microsoft Excel. But to edit it again, you pick the insert tool instead of the hand, and this time you must select the cell to type in it. Motion around the content area in all three applications is accomplished using multiple small icons in the bottom and right window borders. The "half full" icon pushes it all the way to the outer edge in that direction, while the double and single arrows move the viewport by large leaps and small leaps respectively. There are no thumbs to show relative location, but you can click anywhere along the scroll area for a proportionately "medium" jump if you like. You can also use CTRL-CRSR/CTRL-arrow keys. Even in 40-column mode, and even given that the scroll doesn't animate and just snaps to the new position, scrolling is agonizingly slow and multiple clicks on the scroll controls invariably overshoot. Putting it in 80 column mode doesn't just give you more on the screen — it also means you don't need to endure as many pauses trying to move around. Again, I'll have more to say about font sizes when we get to Janewrite. Unique to Janecalc, the scrolling actually wraps. Worksheets remain limited to 26 columns (A-Z), as in the Apple II version, but now up to 50 rows are allowed. Still, this wouldn't have been sufficient for anything larger than a modest small business, even in 1985. Formulas are approximately VisiCalc-style using A1 absolute notation for cells, though there are no sigils for functions (not that there's very many) and ranges are delimited by colons. Most basic math operators and parentheses are available. Here, we'll get a sum of this row ... ... and then manually calculate an average by dividing the sum by the count of populated rows (we could also just use avg). The template includes this at the bottom, but this shows you how formula entry worked. As we add data to dependent cells the sheets recalculate but circular references are not handled, though in fairness this capability was still not common in small spreadsheet applications. We'll go to Janelist next. When we do so, a red window pops up to prompt us to save our work. Switching to Janelist. Creating our new list. All very consistent (the file manager and requester seem to be part of the Jane kernel). Janelist, in fairness, never purported to be a database in any incarnation and acts more like a cardfile; even the manual merely refers to it as a "list keeper." Like Janecalc it comes with templates, though Janelist supports a substantial number more. For variety I'll try to enter some of my very large CD collection, because I'm one of those people (vinyl is for art, CD is for listening). The list comes up as fillable fields. There may be up to 15 field names up to 12 characters long. If you choose to create your own, then Jane will step you through entering the field names. That's about all the customization you can do. The values for those fields can span multiple lines, which is what the viewport scrolling is for — you use the icons at the bottom to advance through individual cards. Incidentally, Atom Heart Mother is Pink Floyd's finest album and I will tolerate no disagreement. The icon that looks like cards being pulled out suggests how to make a query (the magnifying glass icon, or possibly the funnel icon to denote a filter, wasn't universal at this point). Because it gives you choices, it's yellow, remember? The two OK buttons do different things. The top one filters cards to the query requested, but the bottom one undoes any query. You can query on top of queries for a primitive sort of logical-AND. Partial word searches are supported. For example, here is the second best Beatles album — the best is, of course, Abbey Road. Since we searched for the Beatles, when we run out of Beatles CDs, nothing more turns up from my formidable library. It is also possible to sort cards, in which case they appear in that order instead. You cannot sort on multiple fields, and you can't sort descending. Finally, Janewrite, where we will spend the rest of our time — and where apparently most of Jane's users spent theirs, including our previous owners. I've got a prefab file here I constructed while playing around to explore the file format, so this time we'll load a document instead of entering one, just to show you what that looks like from the file requester. Janewrite is IMHO the most polished and competent of the three apps, and it feels like the most development time was spent on it, too. It also shows what the Jane font renderer is capable of: although non-proportional and only a single typeface, you can see bold, underline, bold and underlined, superscript, and subscript are all possible. The bottom shows left, right, centre and full justification options, done per line, plus the font options, and then search (this time with a magnifying glass) and page layout. These icons are larger and more detailed than the Apple's. As with other parts of the UI, text attributes are set verb-initial, i.e., you would choose the desired style, then the insertion tool, then highlight the range of text and finally release the button (or, annoyingly, wait, which makes fine adjustments harder than they should be). Notice that there is an explicit bold-and-underline option, instead of using the separate bold and underline options in combination: that's because you can't make superscripted or subscripted text bold or underlined. The top of the content area shows the ruler — in characters, not inches — and margin stops and the single paragraph indent stop, which you can drag to change them. Interestingly, the ruler seems to be new for Jane 128: no screenshot for the Apple II version demonstrates one. Janewrite is also capable of a modicum of WYSIWYG if you select the 80 column option. This and other options come from the "computer" icon, which acts as a preference panel. Preferences are saved to the application disk and are global to all three applications. Despite this presenting a choice window (ordinarily yellow), Jane seems to treat it as a global window from the kernel, so it's grey. The bottom set of options are specifically for configuring the printer. Print output is generated with control codes and text only; Jane does not generate graphic sequences, so what actually shows up on the page depends on what your printer actually supports. The default middle print size option corresponds to 80 columns (more accurately, the default or 12cpi font size), while the small font corresponds to the condensed 15cpi and/or 132 column option available on some printers, and the large font corresponds to the 60 or 64-column (e.g., 10cpi) option also only available on some printers — not the expanded double wide printing option more typical of Commodore-specific devices. You could also select between regular fanfold tractor feed or plain paper, as well as the Near Letter Quality print option some printers supported, and finally the printer itself. There was built-in support for the MPS-801 (i.e., 1525), MPS-802 (i.e., 1526), 1101, "Oki" (generic Okidata), and generic "Epson" printers, assuming they were connected somehow to the IEC serial such as through a third-party parallel printer interface. These printer drivers varied wildly in their capabilities: the 1525/MPS-801 "driver" supported almost nothing except basic text, while the generic Okidata and Epson drivers supported nearly everything that Jane could generate. The "OTHER" driver is customizeable, a neat idea, if a little clumsy. A BASIC program called BUILDPRT on the grey disk allows you to populate it with your printer's control codes. Control sequences up to three characters long were supported. You would enter these from the manual, it would save them to disk, and then you could use the custom driver inside Jane. The topmost options affect the appearance of Jane. You can choose from three font sizes, all non-proportional, corresponding to 40, 64 or 80 column text. Confusingly, the 80-column option is the last when it's the middle option for printing. (The Apple II version likely didn't support 80 column text due to its smaller hi-res horizontal width.) Pointer speed and the "beep" Jane makes when you select options are also configurable. Here's how it looks in 80 columns, using the typical "soft 80" approach on the 64 which is more or less legible, at least on a composite display. As there are no colours in the content area, there is no risk of colour clash. This is probably the most useful view in Janewrite. The 64-column view, by contrast, is probably the least useful. The 40-column view is the most legible and 2:1 the size of a typical 80-column line, so it's easy to mentally grok page layout that way, but the 64-column view is odd enough to end up being the worst of both worlds. An interesting feature of Janewrite are the accented characters, which was not frequently seen on home computer-class word processors, as explained by the on-line help. Janewrite treats them as diacritics, and they can even be applied to letters that wouldn't ordinarily use them (because who knows? some language might), such as the grave and acute accents on the n as well as the more typical tilde. In fact, you can apply them to any character, even punctuation. However, the use of the up arrow to indicate a circumflex means there's no way you can type a literal caret into your document, and while a macron would have been nice, omitting the umlaut seems a greater fault. The decorators are also rather hard to distinguish in 80 columns, so Spanish users of Juana 128 might want to go to cuarenta column mode to mirar mejor. Janewrite also has basic find and/or find-and-replace, and a small pane appears below the content area when it's active. There are also decent page layout options, including setting both a per-page title and its position, adding a page number and its position, and margins, number of copies and starting page, though the last two would seem more appropriate for a print dialogue than a page layout one. Note that Jane will always print a 10-space left margin, so an 80-column printed line can be no longer than 70 characters, and this is indeed the maximum width Janewrite will support. However, paragraphs are apparently not stored as continuous sequences of text, demonstrated here with a contrived example. (In fact, we'll prove they aren't shortly.) While Janewrite will word-wrap at the right margin, inserting text after that will wrap onto a new line, not into the next line, even if the two lines were previously entered "together." There's a speed/flexibility tradeoff here in that Janewrite doesn't have to continuously reflow paragraphs, but it also means its concept of a paragraph is entirely based on how much you select. The text can be manually reflowed, joining lines if necessary, by picking one of the paragraph justification options and selecting the text with the hand, which will then be reflowed (and, if needed, spaces inserted) to match. In fact, this is also necessary if you change the margins because Jane doesn't automatically reformat your document then either. I also promised you an example of cut and paste, so here's one using the scissors (cut). You simply pick it and, with the button down, drag it across the text you want and release the button. Note that there is no undo, though I suppose you could just immediately paste it back in. Exiting Janewrite (though not saving, because we need the accented characters to stay in the file). Now that we understand what Jane can do and how it works, let's move on to converting the files. We can extract our test files we made from our .d71 with VICE's c1541 utility and hexdump it. This got a little more difficult than it should have been: % c1541 work.d71 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> dir 0 "data#000 " 01 2a 39 "c.TESTCALC" prg 3 "l.TESTLIST" prg 4 "w.nOTE.2" prg 4 "w.TESTCONV" prg 1278 blocks free. c1541 #8> read "w.TESTCONV" ERR = 62, FILE NOT FOUND, 00, 00 cannot read `w.TESTCONV' on unit 8 invalid filename As you may have guessed, that's because the filenames, and it turns out the data in the files themselves, are stored as true ASCII, not PETSCII (indeed as they would have been on the Apple II, also), so c1541's filename conversion fails. Fortunately, the extract command will walk the entire directory and pull out all the files no matter what they're named. The documents are all regular Commodore PRoGram files with a starting address and they appear to be loaded in-place at that address into bank 1. This introduces the possibility of some delightful save-file hacks but we're not here for that today. That means we can also simply extract our previous owners' files en masse as well. I imaged their disk using my ZoomFloppy and external 1571, and since they are normal PRGs, a BAM copy of the allocated sectors is all we need to do, with one wrinkle: % d64copy -B 9 r_jane_bam.d64 [Warning] growing image file to 683 blocks 14: --*****--*****--***** 8% 15/171[Warning] read error: 0e/00: 5 14: ?******************** 12% 21/171[Warning] giving up... 14: ?******************** 15: ********************* 16: ********************* 17: ********************* 18: ******************* 19: ******************* 20: ******************* 21: ******************* 22: ****..***...***...* 100% 171/171 170 blocks copied. % c1541 r_jane_bam.d64 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> extract c1541 #8> quit Fortunately it doesn't look like the bad sector was in any of the files they cared about. Let's get an idea of the format from our test files. Janecalc files are "huge" because it looks like the entire 26x50 cell range is saved regardless of whether anything's in it or not. Looking at the directory of their data disk where they had saved a couple of sparse test spreadsheets of their own, they also were 39 blocks in length no matter how many cells were actually populated. The on-disk format is consequentially a bit wasteful: 000003a0 00 00 00 00 00 20 20 20 4a 61 6e 75 61 72 79 20 |..... January | 000003b0 20 46 65 62 72 75 61 72 79 20 20 20 20 20 4d 61 | February Ma| 000003c0 72 63 68 20 20 20 20 20 41 70 72 69 6c 20 20 20 |rch April | 000003d0 20 20 20 20 4d 61 79 20 20 20 20 20 20 4a 75 6e | May Jun| 000003e0 65 20 20 20 20 20 20 4a 75 6c 79 20 20 20 20 41 |e July A| 000003f0 75 67 75 73 74 20 53 65 70 74 65 6d 62 65 72 20 |ugust September | 00000400 20 20 4f 63 74 6f 62 65 72 20 20 4e 6f 76 65 6d | October Novem| 00000410 62 65 72 20 20 44 65 63 65 6d 62 65 72 00 00 01 |ber December...| 00000420 04 00 00 00 00 00 00 20 20 54 6f 74 61 6c 20 20 |....... Total | 00000430 20 41 76 65 72 61 67 65 20 20 20 00 00 01 04 00 | Average .....| Cardfiles are stored much more efficiently. Here's the entirety of our two cards. The fields are in the header, padded out to the fixed 12 character length, but with technically unnecessary nulls between them. A spurious "Beatles" entry looks like a buffer that was captured as part of the save, and there is also a page-aligned (counting the starting address) pad of nulls. Otherwise, the value strings look null-delimited, in the order they appear in the field list (unpopulated fields are zero-length strings). When you run out of fields, you're on the next card. % hexdump -C l.TESTLIST 00000000 00 7f 01 00 36 02 08 00 04 00 54 69 74 6c 65 20 |....6.....Title | 00000010 20 20 20 20 20 20 00 4c 65 61 64 20 41 72 74 69 | .Lead Arti| 00000020 73 74 20 00 4f 74 68 65 72 20 41 72 74 69 73 74 |st .Other Artist| 00000030 00 43 6f 6d 70 6f 73 65 72 20 20 20 20 00 43 6f |.Composer .Co| 00000040 6e 64 75 63 74 6f 72 20 20 20 00 57 68 65 72 65 |nductor .Where| 00000050 20 4b 65 70 74 20 20 00 42 6f 72 72 6f 77 65 64 | Kept .Borrowed| 00000060 20 62 79 20 00 44 61 74 65 20 4c 65 6e 74 20 20 | by .Date Lent | 00000070 20 00 00 00 ff ff 01 ff ff ff ff ff ff ff ff ff | ...............| 00000080 ff ff ff ff ff 00 01 02 03 04 05 06 07 00 01 02 |................| 00000090 03 04 05 06 07 ff ff ff ff ff ff ff ff ff ff 00 |................| 000000a0 00 54 68 65 20 42 65 61 74 6c 65 73 00 00 00 00 |.The Beatles....| 000000b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00000100 d7 09 80 60 60 ac 98 09 ae 04 cf a5 ea a9 d7 15 |...``...........| 00000110 80 ac 1d 21 d6 1c 80 60 60 ac 98 09 ae 04 cf 20 |...!...``...... | 00000120 75 0b 00 00 ac 0a 95 a5 f0 b0 a9 a6 b1 a9 a4 b1 |u...............| 00000130 a5 f1 b0 a9 a7 b1 a9 a5 b1 ac c0 08 cf 20 75 0b |............. u.| 00000140 fe ff a5 37 ae 8c ff 00 c0 d8 4b 80 cf a5 f0 b0 |...7......K.....| 00000150 a7 a6 b1 c0 d8 60 80 a5 f1 b0 a7 a7 b1 c0 d8 60 |.....`.........`| 00000160 80 cf a5 f0 b0 a7 a6 b1 00 00 09 00 01 5d f6 00 |.............]..| 00000170 00 00 00 09 00 09 00 01 66 f6 00 00 00 00 54 00 |........f.....T.| 00000180 50 00 01 b1 f6 69 64 65 20 12 00 42 00 01 6f f6 |P....ide ..B..o.| 00000190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 000001a0 00 00 00 00 00 00 00 52 65 76 6f 6c 76 65 72 00 |.......Revolver.| 000001b0 54 68 65 20 42 65 61 74 6c 65 73 00 00 4c 65 6e |The Beatles..Len| 000001c0 6e 6f 6e 2d 4d 63 43 61 72 74 6e 65 79 2d 48 61 |non-McCartney-Ha| 000001d0 72 72 69 73 6f 6e 00 47 65 6f 72 67 65 20 4d 61 |rrison.George Ma| 000001e0 72 74 69 6e 00 00 00 00 00 41 74 6f 6d 20 48 65 |rtin.....Atom He| 000001f0 61 72 74 20 4d 6f 74 68 65 72 00 50 69 6e 6b 20 |art Mother.Pink | 00000200 46 6c 6f 79 64 00 00 57 61 74 65 72 73 2d 47 69 |Floyd..Waters-Gi| 00000210 6c 6d 6f 75 72 2d 4d 61 73 6f 6e 2d 57 72 69 67 |lmour-Mason-Wrig| 00000220 68 74 2d 47 65 65 73 6f 6e 00 50 69 6e 6b 20 46 |ht-Geeson.Pink F| 00000230 6c 6f 79 64 00 00 00 00 |loyd....| 00000238 This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. The failure of the Plus/4 to succeed the 64, much less overtake it, demonstrated clearly to Commodore management that 64 compatibility was essential in their next computer. Around this same time Sig Hartmann had noted the success of Atari's own first-party software unit Atarisoft on non-Atari platforms (though AtariLab was developed externally), even for the 64, and said there were similar plans to port Commodore first-party software and licenses to the Apple II, IBM PC and PCjr. (NARRATOR: This didn't happen.) However, by mid-1984 the software division had also developed a reputation for poor quality, with Scott Mace commenting in InfoWorld that — hits like International Soccer notwithstanding — "so far, the normal standard for Commodore software is mediocrity." In the meantime, Tramiel had bought the ailing Atari from Warner Communications and lured several Commodore managers, including Hartmann (who was already in conflict with Smith over cuts to the software division), to defect. Paul Goheen, the former systems software group head, became the new software chief. As the Commodore 128 neared completion, management constructed a new sales strategy to put it head to head against the Apple IIc and PCjr in specialty stores as well as Tramiel's favoured mass market retailers. To more plausibly bill it as a productivity machine, once again the software division had to look outside the company. Arktronics started in the dorms of the University of Michigan as a partnership between sophomore Robert "Bobby" Kotick and junior Howard Marks, who were then roommates. "We knew that unlike other industries," said Kotick in a 1984 interview, "there was a place for 19 and 20 year olds [in computers]." In July 1983 the company was formed to capitalize on Marks' ideas to envision a friendlier user interface for productivity applications. Marks, who was French, had previously worked for Apple and had access to its peripherals, including the then-novel use of a mouse as a pointer device. "This was way before there was ever a Lisa," Kotick added. "We realized that the biggest problem was that people like us couldn't use these things [computers] yet because they were too difficult and time-consuming to learn." They crafted a wish list and design document oriented to systems with 64K of RAM or less but featuring a picture (now we'd say icon-based) interface driven by a pointing device, such as a joystick or mouse, and an extensive on-line tutorial. Marks and Kotick hired students and even lured away some professors to work on the application, christened Jane after the Dick and Jane introductory reading books, who accepted shares in the company in lieu of salary. To fund development by their team of about thirty, Kotick tagged along with a friend to the annual Cattle Baron's Ball in Dallas at which he met real estate and casino investor Steve Wynn. Kotick managed to hitch a ride back to the East Coast on Wynn's plane where he pitched him on their company and Wynn encouraged him to write up a business plan. Three months later Marks and Kotick were summoned to Wynn's offices in Manhattan and flown to Atlantic City, whereupon Wynn handed them a cheque for $300,000 (in 2025 approximately $970,000) in exchange for a third of the company, providing business advice as the product progressed. Jane missed a first deadline for Comdex in December 1983 due to testing delays and finally launched at Softcon in February 1984 for the Apple II/II+ with 64K and the IIe at an MSRP of $295 [$920], later reduced to $179 [$560]. The program shipped on three colour-coded floppies, a grey bootable "systems disk" containing the word processor, database and spreadsheet applications (Janewrite, Janelist and Janecalc, respectively), a yellow "help disk" with the tutorial, and a black "data disk" for the user to save files. To ease the need for disk swapping, it would hunt for the right disk in either disk drive if you had two. Versions for the IBM PC and Atari 8-bits were said to be in progress. The initial release was uniquely accompanied by its own single-button mouse (Instagram link), a lower-cost unit — Kotick admitted settling for "a lesser quality product" — manufactured under contract by joystick maker Wico and incompatible with Apple's own later mouse options. This mouse interfaced to the Apple with a custom card and an 8-pin connector. Jane's appearance at the show attracted attention from another Steve, but at the Apple booth instead: Steve Jobs. Jobs visited the company in Ann Arbor and, suitably impressed, told Kotick and Marks they were wasting their time in college. Kotick duly dropped out to concentrate on the company, much to the consternation of his parents. Because it was intended to run on any existing Apple II with sufficient RAM, pretty much nothing was assumed about the hardware. It displayed strictly in monochrome and used the Apple hi-res mode to display upper and lowercase since the II/II+'s text mode was purely uppercase. Additionally, as 80-column capability wasn't universal, it used a software text shaper to display 60-column text in the word processor and, here, in the file requester. Basic windows like these, with title and information in the actual window bars, served for dialogue boxes and file selection. Although no emulator presently supports Jane's oddball original mouse, the PBS MacNeil/Lehrer NewsHour did a piece on Arktronics in 1984 (the photo above of Marks and an open Apple II case is from this clip) and, along with pictures of the Arktronics offices which I've scattered throughout this article, had some screenshots that illustrate its capabilities. Here a document is being edited in Janewrite. You can see close, scroll and size gadgets in the window frame, but interestingly the control to maximize the current window is in the lower right. The top of the screen shows the editing tools (hand pointer, arrow, scissors [cut], camera [copy] and paste jar), icons for the three core apps, and then system-wide icons for on-line help, printing, the file manager, preferences and "STOP" to globally cancel an operation. Across the bottom, beside the window maximize gadget, are tools for adjusting line justification, font style (bold, underline, bold and underline, superscript, subscript), print settings and search. I'll have more to say about all of these when we get to Jane's Commodore port. Document windows could also be moved and resized, and multiple windows from different Jane applications could be open simultaneously. If you hit Control-Reset, a Easter egg briefly flashes on-screen with the names of the Apple II programmers: Mike Lagae, John R. Haggis, Brent Iverson, Jim Poje, Peter Lee, Uwe Pleban, Allen Leibowitz and Ken Roe. Because portability to other, sometimes wildly different, systems was always contemplated, application-level components were written in a high level language and compiled for the target (allegedly an early microcomputer dialect of C), with the graphics and I/O drivers written directly in assembly. With the release of the IIc Arktronics updated the program to support Apple's mouse as well. Reviews of the Apple II version were decidedly mixed. In June 1984, InfoWorld called it "innovative" but also observed that "overbearing use of icons, some slow features, and some awkwardness mar the product, which could benefit from an emphasis on efficiency rather than gimmickry." Down under, Your Computer in November 1984 liked the simple interface and believed it would appeal to undemanding users but criticized the 236-page manual and found the mouse unreliable. "When the mouse works properly, it is good," wrote reviewer Evan McHugh, but "when it doesn't it's the pits." Likewise, although A+'s 1985 review also liked the interface and the fact that multiple windows from each module could be open at once, the magazine also felt that "the individual modules in Jane are not up to professional productivity quality." Perhaps because of the software display, Janewrite "was too slow to respond to the keystrokes of a moderately proficient typist," and Janecalc, equally slow, was also panned as "crippled" because it only supported a 24x20 maximum spreadsheet. "Thank you, Jane," quipped reviewer Danny Goodman, "[l]eave your number at the door." Jane was also billed as available for the Commodore 64, even in contemporary advertising, but COMPUTE!'s Gazette in January 1985 said it was "scheduled to be released for the Commodore 64 by the time you read this. The price is expected to be about $80 [$240]." Interviewed for the article, Marks said that Jane for the 64 was to come as a combination cartridge and disk package, where a "32K plug-in cartridge" would quickly and automatically bring up the system. The article claimed the cartridge would autoboot the applications from (now) just a single floppy plus the data disk, though I suspect the actual configuration was that the cartridge contained the applications and the disk contained the online tutorial, simultaneously furnishing a modicum of both instant access and copy protection. Notably, this version didn't come with its own mouse; Marks said they were working to support third-party mice as well as joystick and "touch pad" (presumably KoalaPad) options instead. Accounting for publishing delays, the Gazette piece would have been written several months prior in the fall of 1984 — after advertisements for the C64 version of Jane had been in multiple periodicals such as Creative Computing and Family Computing claiming you could purchase it already. In fact, the 64 version of Jane would never be released — it was simply cancelled once Commodore paid Arktronics to port it to the 128 and badged it as a Commodore product. As the 128's graphic and sound capabilities are virtually identical to the 64's in 40-column mode, save for the extra colour RAM, the port was relatively straightforward. (At the same time Commodore also rebadged the CP/M-based Perfect Software series from Thorn EMI for the 128, but this was non-exclusive, and their rebranded versions were exactly the same as sold for other CP/M-compatible systems. Goheen promised "comprehensive and professional developer support" for the new computer.) The new Jane could also be made cheaper: since the 128 is capable of autobooting a suitably coded floppy disk in drive 8, the cartridge could be dispensed with and the less expensive three-floppy scheme restored (though the grey disk was now called the "application disk"). A 128-mode 1541 fastloader is used if the new and much faster 1570 or 1571 disk drives aren't detected, though the 1571 still boots Jane noticeably faster than the fastloader. (Parenthetically, a frequent misconception is that the Z80 in the 128 does the boot sector check to start CP/M. In fact, the 8502 does that after the Z80 has already checked the Commodore key isn't down and entered 128 mode. In CP/M's case, the code in the CP/M disk boot sector instructs the 8502 to give control back to the Z80 so it can finish the boot sequence — if this weren't the case, the BASIC BOOT command wouldn't be able to start CP/M. Interestingly, 1581s booting CP/M have a special startup file to keep their own CP/M boot sector in a different location.) Otherwise, Jane 128 openly betrayed its origins on the 64: other than fastbooting with the 1571, which it mostly got for free, and support for the 128's new keys it took no advantage of any other 128 features, in particular no 2MHz support nor true VDC 80-column mode. Although the manual and box copy say using a mouse is supported, only the original 1350 mouse works, which strictly emulates a joystick. All three applications that were in the Apple II version are included. Under the hood the apps are implemented as overlays for a central kernel called JANEGM. Sadly, I didn't see any obvious credits while scanning through the disk files. The manual, which appears to have been written by a third party, insists on camelcasing the apps as JaneWrite, JaneCalc and JaneList even though the rear box copy doesn't distinguish them that way and the Apple II version and Arktronics' own advertising called them Janewrite, Janecalc and Janelist. I'll use the latter here. Commodore also included some official marketing material with the box, hawking their new 1902 monitor (with 80 column mode, which was useless for Jane), 1571 disk drive (which works well with Jane), 1670 Modem/1200 (which Jane doesn't use), 512K REU (which Jane doesn't use either) and the 1350 mouse — which in this photo is somewhat different-appearing than the released 1350/1351, and might have been a mockup. Actually, this system would have been a very nice 128 setup and very similar to the one we'll be using both for real and in VICE. Too bad Jane 128 could use relatively little of it. Both Jane and the Perfect series were demonstrated with the 128 for Winter CES 1985, though Commodore didn't announce MSRPs then for any of them at the time. It eventually emerged later that year for $49.95 [$150]; by the next year some retailers were selling it for as low as $35 [$100], compared to each of the Perfect titles then going for $45 apiece [$130]. Plus, the Perfect titles, being CP/M-based, were bland and text-based and failed to show off the C128's graphics, so Commodore ended up emphasizing Jane more in its contemporary marketing. Booting Jane 128 from the 128DCR's internal 1571 drive with my own 1902 monitor. Although its interface is similar to the Apple II's in broad strokes, Jane 128's most obvious difference is colour. However, there are numerous more subtle UI changes in this version, sufficient for it to be called "Jane 2.0" internally before release. We'll step through them here and in the next set of screenshots because they're an interesting comparison point to modern human interface practice. As with the Apple II, across the top of the screen are the various icons, or what the manual calls "pictures." These were slightly altered for the 128 from the Apple II originals. The blue icons again set the mode of the pointer ("tools") from the hand pointer, the insertion arrow, scissors (cut), camera (copy) and paste jar. The current tool is highlighted. You select a new tool by clicking on it, but you can also use the function keys (CLR/HOME, F1, F3, F5 and F7). By modern conventions Jane's tools are used backwards: instead of selecting a text range and "choosing a tool" (e.g., Command-C for copy) to operate on it, you choose a tool first and with that tool select the text range it operates on. I'll demonstrate this specific functionality in a couple instances, but any verb-object operation in Jane will work this way. (Linguistically, this makes Jane a head-initial language, while most modern GUIs are head-final.) Next to the tools are the main apps, Janewrite (now in purple), Janecalc (in green) and Janelist (in cyan), and next to them in grey are the same standard applets built into the kernel (online help, print dialogue, disk/file manager and setup). Finally, the STOP icon, now a solid red, stops the current app, and can be used to escape some screens, though not all. Unexpectedly it doesn't serve to quit Jane entirely: you just turn the computer off. Jane remembers what app is loaded and doesn't reload the overlay if you exit and re-enter it. However, unlike Jane for the Apple II, Jane 128 does not allow you to have multiple documents open simultaneously, a limitation that challenges the definition of "integrated software." In fact, of the three official Commodore productivity packages we've looked at so far, only poor abused 3-Plus-1 could do so. If you're working in one app and select another, Jane 128 will prompt you to save your work as if you'd clicked STOP, and the window will close. Given that the Apple II version managed to implement multiple documents in 64K of RAM, the Commodore 64 version — let alone the 128 — would seem to have little excuse, though I can think of two potential explanations. One is to increase the amount of memory available for any one document, which the Apple II version was indeed criticized for. The second is particular to the 128: its default memory configuration doesn't have a lot of free RAM, and it may have been judged too complicated to span or swap working sets across banks. (Some fiddling in the monitor shows that the documents simply occupy RAM in bank 1 and don't span elsewhere.) On the other hand, other 128 applications certainly do manage it, and it's possible development deadlines were a contributing factor. Let's start out with the online help, one of Marks and Kotick's fundamental design goals. Assuming you got the joystick (or 1350) plugged into the right port, there's a big honking question mark. What happens when you click on it? You get right into the online help window. The pointer snaps to the options; you can also move the pointer from option or cell to another option or cell with the CRSR keys/128 arrow keys and select it with the Commodore key. The window's yellow border is salient: any window that gives you choices to select from carries a yellow border. We'll see this again later. Incidentally, the manual is not in colour (just black, white and an accent magenta), and possibly as a result is all but totally ignorant of these UI choices or why they were made. The Apple II version's windows have a corner close gadget in the typical open square style, but this would only have made visual sense to someone familiar with the Lisa or Mac — which most Commodore users in 1985 wouldn't be. Instead, here windows you can close have a big bright red EXIT button (the ESC key can also serve this role in most cases). All icons are simply drawn onto the VIC-II high-res screen; unlike Magic Desk where pretty much everything was a sprite, the only sprite here is the pointer. Windows cannot be moved or resized, but by limiting icon and window boundaries to VIC-II 8x8 cells, drawing is fairly fast. Of course, most of the topics are on the yellow help disk (see? it matches). Jane 128, like the Apple II version, supports two disk drives, so you could have the help disk in device 9 and it would find it. The online help is pretty good, considering. It shows the icons and images as they would appear on-screen, and while they aren't live, they are accurate. The only black eye it gets is the technically truthful but functionally insufficient prompt "Press a key to continue" — the joystick or 1350 mouse button also work, and so does the ESC key to exit early, even though the exit button isn't shown. Some help items are animated and show you a demonstration, and each app has its own bespoke help. The system keeps track of what disks are where. If we start Janewrite by going to the typewriter, this blue dialogue box will appear — informational dialogue boxes always have a blue border — as it loads the overlay ... ... but then looks for a data disk, fails to find it, and asks for one. You need one even for a new document, and you can get stuck in a loop here if you don't provide one (pressing ESC just makes it try again, and clicking on the STOP icon doesn't do anything). You could put in the black data disk it comes with, but this one contains our generous donor's files, so we'll just give a blank disk image to VICE instead which Jane will offer to format. When creating a new data disk in VICE, if a 1571 is detected then Jane will want a real .d71 with the full available space, not a .d64, as it will then expect it can format both sides of the virtual disk. However, all of the Jane original disks, including the black one, are formatted single-sided for the 1541 since many early 128 owners would still be using one. The other way you can do this is from the disk icon. As these icons are in grey, so are their windows (except, curiously, help, but I can see how a yellow question mark would have looked bad against a white background), suggesting a global applet served by the central Jane kernel. The disk icon brings up a basic file manager allowing you to make duplicate backup files (but only to the same disk), rename or delete them, or create a new disk. The copy option is the default and is pre-selected when the window opens, which is irritating, because our modern reflexive habit of selecting the file first and then the action will cause an immediate copy to occur before you get the chance to click anything else. I don't think this was just me: there were several spurious duplicate files on the original black data disk I suspect for the same reason. If files are present on the disk, they will appear with their names and a filetype letter (W, C or L for Janewrite, Janecalc or Janelist respectively). Notice the slightly misshapen scrolling arrows, which were nice and clean on the Apple. We'll provide the .d71 to Jane here. Windows warning you about data loss have a red border. Interestingly, it provides both a No button and the exit button, which both do the same thing: abort back to the file manager. Jane seems unable to distinguish between an unformatted disk and a completely absent one, and will (fruitlessly) attempt to format an empty drive. Formatting in progress. The time estimates are surprisingly not far off. With our disk formatted, let's return to Janewrite at the end, since this will be the majority of the documents we'll convert. Instead, we'll start with the spreadsheet, Janecalc. Whenever any of the three built-in applications starts up, and once Jane has located the data disk, a file selector (in grey) appears. There are no spreadsheets ("worksheets") on our freshly formatted disk, so we click the NEW icon. Entering the new filename (blue window). You may have noticed that the red and blue windows are all invariably the same size regardless of contents and any active controls they contain. This probably simplified rendering quite a bit. Because Janecalc is green, its content window border is likewise green, and because Jane 128 doesn't multitask between the applications, it takes up the entirety of the screen. Two templates are provided, along with a roll-your-own option. We'll go with the Home Budget for illustration. The Home Budget template pulls up a simplified home budget by month which you can fill in. Jane supports 40, 64 and 80 column modes, all rendered in software on the VIC-IIe 320x200 display (not with the VDC's 640x200 display), but by default it uses 40. (I'll get to this in more detail in the word processor.) Along the bottom are various operators and the extent of the formula functions available (hardly competition for the Convergent WorkSlate). They can be selected with the pointer in lieu of text entry, which makes them quite discoverable, but in practice it's simply faster to type them. No other functions are implemented. Since the content window cannot be resized, the maximize gadget from the Apple II version became obviously useless and was removed. By using the joystick/mouse you can use the hand to point to a cell and then, with the hand pointing to it, just start typing text or a number. The cursor keys will move the pointer from cell to cell for you, though they will not exit the content area. If you click or otherwise select the cell with the hand, however, Jane considers this an attempt to construct a formula, which again would be frustrating to modern audiences used to, say, Microsoft Excel. But to edit it again, you pick the insert tool instead of the hand, and this time you must select the cell to type in it. Motion around the content area in all three applications is accomplished using multiple small icons in the bottom and right window borders. The "half full" icon pushes it all the way to the outer edge in that direction, while the double and single arrows move the viewport by large leaps and small leaps respectively. There are no thumbs to show relative location, but you can click anywhere along the scroll area for a proportionately "medium" jump if you like. You can also use CTRL-CRSR/CTRL-arrow keys. Even in 40-column mode, and even given that the scroll doesn't animate and just snaps to the new position, scrolling is agonizingly slow and multiple clicks on the scroll controls invariably overshoot. Putting it in 80 column mode doesn't just give you more on the screen — it also means you don't need to endure as many pauses trying to move around. Again, I'll have more to say about font sizes when we get to Janewrite. Unique to Janecalc, the scrolling actually wraps. Worksheets remain limited to 26 columns (A-Z), as in the Apple II version, but now up to 50 rows are allowed. Still, this wouldn't have been sufficient for anything larger than a modest small business, even in 1985. Formulas are approximately VisiCalc-style using A1 absolute notation for cells, though there are no sigils for functions (not that there's very many) and ranges are delimited by colons. Most basic math operators and parentheses are available. Here, we'll get a sum of this row ... ... and then manually calculate an average by dividing the sum by the count of populated rows (we could also just use avg). The template includes this at the bottom, but this shows you how formula entry worked. As we add data to dependent cells the sheets recalculate but circular references are not handled, though in fairness this capability was still not common in small spreadsheet applications. We'll go to Janelist next. When we do so, a red window pops up to prompt us to save our work. Switching to Janelist. Creating our new list. All very consistent (the file manager and requester seem to be part of the Jane kernel). Janelist, in fairness, never purported to be a database in any incarnation and acts more like a cardfile; even the manual merely refers to it as a "list keeper." Like Janecalc it comes with templates, though Janelist supports a substantial number more. For variety I'll try to enter some of my very large CD collection, because I'm one of those people (vinyl is for art, CD is for listening). The list comes up as fillable fields. There may be up to 15 field names up to 12 characters long. If you choose to create your own, then Jane will step you through entering the field names. That's about all the customization you can do. The values for those fields can span multiple lines, which is what the viewport scrolling is for — you use the icons at the bottom to advance through individual cards. Incidentally, Atom Heart Mother is Pink Floyd's finest album and I will tolerate no disagreement. The icon that looks like cards being pulled out suggests how to make a query (the magnifying glass icon, or possibly the funnel icon to denote a filter, wasn't universal at this point). Because it gives you choices, it's yellow, remember? The two OK buttons do different things. The top one filters cards to the query requested, but the bottom one undoes any query. You can query on top of queries for a primitive sort of logical-AND. Partial word searches are supported. For example, here is the second best Beatles album — the best is, of course, Abbey Road. Since we searched for the Beatles, when we run out of Beatles CDs, nothing more turns up from my formidable library. It is also possible to sort cards, in which case they appear in that order instead. You cannot sort on multiple fields, and you can't sort descending. Finally, Janewrite, where we will spend the rest of our time — and where apparently most of Jane's users spent theirs, including our previous owners. I've got a prefab file here I constructed while playing around to explore the file format, so this time we'll load a document instead of entering one, just to show you what that looks like from the file requester. Janewrite is IMHO the most polished and competent of the three apps, and it feels like the most development time was spent on it, too. It also shows what the Jane font renderer is capable of: although non-proportional and only a single typeface, you can see bold, underline, bold and underlined, superscript, and subscript are all possible. The bottom shows left, right, centre and full justification options, done per line, plus the font options, and then search (this time with a magnifying glass) and page layout. These icons are larger and more detailed than the Apple's. As with other parts of the UI, text attributes are set verb-initial, i.e., you would choose the desired style, then the insertion tool, then highlight the range of text and finally release the button (or, annoyingly, wait, which makes fine adjustments harder than they should be). Notice that there is an explicit bold-and-underline option, instead of using the separate bold and underline options in combination: that's because you can't make superscripted or subscripted text bold or underlined. The top of the content area shows the ruler — in characters, not inches — and margin stops and the single paragraph indent stop, which you can drag to change them. Interestingly, the ruler seems to be new for Jane 128: no screenshot for the Apple II version demonstrates one. Janewrite is also capable of a modicum of WYSIWYG if you select the 80 column option. This and other options come from the "computer" icon, which acts as a preference panel. Preferences are saved to the application disk and are global to all three applications. Despite this presenting a choice window (ordinarily yellow), Jane seems to treat it as a global window from the kernel, so it's grey. The bottom set of options are specifically for configuring the printer. Print output is generated with control codes and text only; Jane does not generate graphic sequences, so what actually shows up on the page depends on what your printer actually supports. The default middle print size option corresponds to 80 columns (more accurately, the default or 12cpi font size), while the small font corresponds to the condensed 15cpi and/or 132 column option available on some printers, and the large font corresponds to the 60 or 64-column (e.g., 10cpi) option also only available on some printers — not the expanded double wide printing option more typical of Commodore-specific devices. You could also select between regular fanfold tractor feed or plain paper, as well as the Near Letter Quality print option some printers supported, and finally the printer itself. There was built-in support for the MPS-801 (i.e., 1525), MPS-802 (i.e., 1526), 1101, "Oki" (generic Okidata), and generic "Epson" printers, assuming they were connected somehow to the IEC serial such as through a third-party parallel printer interface. These printer drivers varied wildly in their capabilities: the 1525/MPS-801 "driver" supported almost nothing except basic text, while the generic Okidata and Epson drivers supported nearly everything that Jane could generate. The "OTHER" driver is customizeable, a neat idea, if a little clumsy. A BASIC program called BUILDPRT on the grey disk allows you to populate it with your printer's control codes. Control sequences up to three characters long were supported. You would enter these from the manual, it would save them to disk, and then you could use the custom driver inside Jane. The topmost options affect the appearance of Jane. You can choose from three font sizes, all non-proportional, corresponding to 40, 64 or 80 column text. Confusingly, the 80-column option is the last when it's the middle option for printing. (The Apple II version likely didn't support 80 column text due to its smaller hi-res horizontal width.) Pointer speed and the "beep" Jane makes when you select options are also configurable. Here's how it looks in 80 columns, using the typical "soft 80" approach on the 64 which is more or less legible, at least on a composite display. As there are no colours in the content area, there is no risk of colour clash. This is probably the most useful view in Janewrite. The 64-column view, by contrast, is probably the least useful. The 40-column view is the most legible and 2:1 the size of a typical 80-column line, so it's easy to mentally grok page layout that way, but the 64-column view is odd enough to end up being the worst of both worlds. An interesting feature of Janewrite are the accented characters, which was not frequently seen on home computer-class word processors, as explained by the on-line help. Janewrite treats them as diacritics, and they can even be applied to letters that wouldn't ordinarily use them (because who knows? some language might), such as the grave and acute accents on the n as well as the more typical tilde. In fact, you can apply them to any character, even punctuation. However, the use of the up arrow to indicate a circumflex means there's no way you can type a literal caret into your document, and while a macron would have been nice, omitting the umlaut seems a greater fault. The decorators are also rather hard to distinguish in 80 columns, so Spanish users of Juana 128 might want to go to cuarenta column mode to mirar mejor. Janewrite also has basic find and/or find-and-replace, and a small pane appears below the content area when it's active. There are also decent page layout options, including setting both a per-page title and its position, adding a page number and its position, and margins, number of copies and starting page, though the last two would seem more appropriate for a print dialogue than a page layout one. Note that Jane will always print a 10-space left margin, so an 80-column printed line can be no longer than 70 characters, and this is indeed the maximum width Janewrite will support. However, paragraphs are apparently not stored as continuous sequences of text, demonstrated here with a contrived example. (In fact, we'll prove they aren't shortly.) While Janewrite will word-wrap at the right margin, inserting text after that will wrap onto a new line, not into the next line, even if the two lines were previously entered "together." There's a speed/flexibility tradeoff here in that Janewrite doesn't have to continuously reflow paragraphs, but it also means its concept of a paragraph is entirely based on how much you select. The text can be manually reflowed, joining lines if necessary, by picking one of the paragraph justification options and selecting the text with the hand, which will then be reflowed (and, if needed, spaces inserted) to match. In fact, this is also necessary if you change the margins because Jane doesn't automatically reformat your document then either. I also promised you an example of cut and paste, so here's one using the scissors (cut). You simply pick it and, with the button down, drag it across the text you want and release the button. Note that there is no undo, though I suppose you could just immediately paste it back in. Exiting Janewrite (though not saving, because we need the accented characters to stay in the file). Now that we understand what Jane can do and how it works, let's move on to converting the files. We can extract our test files we made from our .d71 with VICE's c1541 utility and hexdump it. This got a little more difficult than it should have been: % c1541 work.d71 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> dir 0 "data#000 " 01 2a 39 "c.TESTCALC" prg 3 "l.TESTLIST" prg 4 "w.nOTE.2" prg 4 "w.TESTCONV" prg 1278 blocks free. c1541 #8> read "w.TESTCONV" ERR = 62, FILE NOT FOUND, 00, 00 cannot read `w.TESTCONV' on unit 8 invalid filename As you may have guessed, that's because the filenames, and it turns out the data in the files themselves, are stored as true ASCII, not PETSCII (indeed as they would have been on the Apple II, also), so c1541's filename conversion fails. Fortunately, the extract command will walk the entire directory and pull out all the files no matter what they're named. The documents are all regular Commodore PRoGram files with a starting address and they appear to be loaded in-place at that address into bank 1. This introduces the possibility of some delightful save-file hacks but we're not here for that today. That means we can also simply extract our previous owners' files en masse as well. I imaged their disk using my ZoomFloppy and external 1571, and since they are normal PRGs, a BAM copy of the allocated sectors is all we need to do, with one wrinkle: % d64copy -B 9 r_jane_bam.d64 [Warning] growing image file to 683 blocks 14: --*****--*****--***** 8% 15/171[Warning] read error: 0e/00: 5 14: ?******************** 12% 21/171[Warning] giving up... 14: ?******************** 15: ********************* 16: ********************* 17: ********************* 18: ******************* 19: ******************* 20: ******************* 21: ******************* 22: ****..***...***...* 100% 171/171 170 blocks copied. % c1541 r_jane_bam.d64 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> extract c1541 #8> quit Fortunately it doesn't look like the bad sector was in any of the files they cared about. Let's get an idea of the format from our test files. Janecalc files are "huge" because it looks like the entire 26x50 cell range is saved regardless of whether anything's in it or not. Looking at the directory of their data disk where they had saved a couple of sparse test spreadsheets of their own, they also were 39 blocks in length no matter how many cells were actually populated. The on-disk format is consequentially a bit wasteful: 000003a0 00 00 00 00 00 20 20 20 4a 61 6e 75 61 72 79 20 |..... January | 000003b0 20 46 65 62 72 75 61 72 79 20 20 20 20 20 4d 61 | February Ma| 000003c0 72 63 68 20 20 20 20 20 41 70 72 69 6c 20 20 20 |rch April | 000003d0 20 20 20 20 4d 61 79 20 20 20 20 20 20 4a 75 6e | May Jun| 000003e0 65 20 20 20 20 20 20 4a 75 6c 79 20 20 20 20 41 |e July A| 000003f0 75 67 75 73 74 20 53 65 70 74 65 6d 62 65 72 20 |ugust September | 00000400 20 20 4f 63 74 6f 62 65 72 20 20 4e 6f 76 65 6d | October Novem| 00000410 62 65 72 20 20 44 65 63 65 6d 62 65 72 00 00 01 |ber December...| 00000420 04 00 00 00 00 00 00 20 20 54 6f 74 61 6c 20 20 |....... Total | 00000430 20 41 76 65 72 61 67 65 20 20 20 00 00 01 04 00 | Average .....| Cardfiles are stored much more efficiently. Here's the entirety of our two cards. The fields are in the header, padded out to the fixed 12 character length, but with technically unnecessary nulls between them. A spurious "Beatles" entry looks like a buffer that was captured as part of the save, and there is also a page-aligned (counting the starting address) pad of nulls. Otherwise, the value strings look null-delimited, in the order they appear in the field list (unpopulated fields are zero-length strings). When you run out of fields, you're on the next card. % hexdump -C l.TESTLIST 00000000 00 7f 01 00 36 02 08 00 04 00 54 69 74 6c 65 20 |....6.....Title | 00000010 20 20 20 20 20 20 00 4c 65 61 64 20 41 72 74 69 | .Lead Arti| 00000020 73 74 20 00 4f 74 68 65 72 20 41 72 74 69 73 74 |st .Other Artist| 00000030 00 43 6f 6d 70 6f 73 65 72 20 20 20 20 00 43 6f |.Composer .Co| 00000040 6e 64 75 63 74 6f 72 20 20 20 00 57 68 65 72 65 |nductor .Where| 00000050 20 4b 65 70 74 20 20 00 42 6f 72 72 6f 77 65 64 | Kept .Borrowed| 00000060 20 62 79 20 00 44 61 74 65 20 4c 65 6e 74 20 20 | by .Date Lent | 00000070 20 00 00 00 ff ff 01 ff ff ff ff ff ff ff ff ff | ...............| 00000080 ff ff ff ff ff 00 01 02 03 04 05 06 07 00 01 02 |................| 00000090 03 04 05 06 07 ff ff ff ff ff ff ff ff ff ff 00 |................| 000000a0 00 54 68 65 20 42 65 61 74 6c 65 73 00 00 00 00 |.The Beatles....| 000000b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00000100 d7 09 80 60 60 ac 98 09 ae 04 cf a5 ea a9 d7 15 |...``...........| 00000110 80 ac 1d 21 d6 1c 80 60 60 ac 98 09 ae 04 cf 20 |...!...``...... | 00000120 75 0b 00 00 ac 0a 95 a5 f0 b0 a9 a6 b1 a9 a4 b1 |u...............| 00000130 a5 f1 b0 a9 a7 b1 a9 a5 b1 ac c0 08 cf 20 75 0b |............. u.| 00000140 fe ff a5 37 ae 8c ff 00 c0 d8 4b 80 cf a5 f0 b0 |...7......K.....| 00000150 a7 a6 b1 c0 d8 60 80 a5 f1 b0 a7 a7 b1 c0 d8 60 |.....`.........`| 00000160 80 cf a5 f0 b0 a7 a6 b1 00 00 09 00 01 5d f6 00 |.............]..| 00000170 00 00 00 09 00 09 00 01 66 f6 00 00 00 00 54 00 |........f.....T.| 00000180 50 00 01 b1 f6 69 64 65 20 12 00 42 00 01 6f f6 |P....ide ..B..o.| 00000190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 000001a0 00 00 00 00 00 00 00 52 65 76 6f 6c 76 65 72 00 |.......Revolver.| 000001b0 54 68 65 20 42 65 61 74 6c 65 73 00 00 4c 65 6e |The Beatles..Len| 000001c0 6e 6f 6e 2d 4d 63 43 61 72 74 6e 65 79 2d 48 61 |non-McCartney-Ha| 000001d0 72 72 69 73 6f 6e 00 47 65 6f 72 67 65 20 4d 61 |rrison.George Ma| 000001e0 72 74 69 6e 00 00 00 00 00 41 74 6f 6d 20 48 65 |rtin.....Atom He| 000001f0 61 72 74 20 4d 6f 74 68 65 72 00 50 69 6e 6b 20 |art Mother.Pink | 00000200 46 6c 6f 79 64 00 00 57 61 74 65 72 73 2d 47 69 |Floyd..Waters-Gi| 00000210 6c 6d 6f 75 72 2d 4d 61 73 6f 6e 2d 57 72 69 67 |lmour-Mason-Wrig| 00000220 68 74 2d 47 65 65 73 6f 6e 00 50 69 6e 6b 20 46 |ht-Geeson.Pink F| 00000230 6c 6f 79 64 00 00 00 00 |loyd....| 00000238 This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. As the Commodore 128 neared completion, management constructed a new sales strategy to put it head to head against the Apple IIc and PCjr in specialty stores as well as Tramiel's favoured mass market retailers. To more plausibly bill it as a productivity machine, once again the software division had to look outside the company. Arktronics started in the dorms of the University of Michigan as a partnership between sophomore Robert "Bobby" Kotick and junior Howard Marks, who were then roommates. "We knew that unlike other industries," said Kotick in a 1984 interview, "there was a place for 19 and 20 year olds [in computers]." In July 1983 the company was formed to capitalize on Marks' ideas to envision a friendlier user interface for productivity applications. Marks, who was French, had previously worked for Apple and had access to its peripherals, including the then-novel use of a mouse as a pointer device. "This was way before there was ever a Lisa," Kotick added. "We realized that the biggest problem was that people like us couldn't use these things [computers] yet because they were too difficult and time-consuming to learn." They crafted a wish list and design document oriented to systems with 64K of RAM or less but featuring a picture (now we'd say icon-based) interface driven by a pointing device, such as a joystick or mouse, and an extensive on-line tutorial. Marks and Kotick hired students and even lured away some professors to work on the application, christened Jane after the Dick and Jane introductory reading books, who accepted shares in the company in lieu of salary. To fund development by their team of about thirty, Kotick tagged along with a friend to the annual Cattle Baron's Ball in Dallas at which he met real estate and casino investor Steve Wynn. Kotick managed to hitch a ride back to the East Coast on Wynn's plane where he pitched him on their company and Wynn encouraged him to write up a business plan. Three months later Marks and Kotick were summoned to Wynn's offices in Manhattan and flown to Atlantic City, whereupon Wynn handed them a cheque for $300,000 (in 2025 approximately $970,000) in exchange for a third of the company, providing business advice as the product progressed. Jane missed a first deadline for Comdex in December 1983 due to testing delays and finally launched at Softcon in February 1984 for the Apple II/II+ with 64K and the IIe at an MSRP of $295 [$920], later reduced to $179 [$560]. The program shipped on three colour-coded floppies, a grey bootable "systems disk" containing the word processor, database and spreadsheet applications (Janewrite, Janelist and Janecalc, respectively), a yellow "help disk" with the tutorial, and a black "data disk" for the user to save files. To ease the need for disk swapping, it would hunt for the right disk in either disk drive if you had two. Versions for the IBM PC and Atari 8-bits were said to be in progress. The initial release was uniquely accompanied by its own single-button mouse (Instagram link), a lower-cost unit — Kotick admitted settling for "a lesser quality product" — manufactured under contract by joystick maker Wico and incompatible with Apple's own later mouse options. This mouse interfaced to the Apple with a custom card and an 8-pin connector. Jane's appearance at the show attracted attention from another Steve, but at the Apple booth instead: Steve Jobs. Jobs visited the company in Ann Arbor and, suitably impressed, told Kotick and Marks they were wasting their time in college. Kotick duly dropped out to concentrate on the company, much to the consternation of his parents. Because it was intended to run on any existing Apple II with sufficient RAM, pretty much nothing was assumed about the hardware. It displayed strictly in monochrome and used the Apple hi-res mode to display upper and lowercase since the II/II+'s text mode was purely uppercase. Additionally, as 80-column capability wasn't universal, it used a software text shaper to display 60-column text in the word processor and, here, in the file requester. Basic windows like these, with title and information in the actual window bars, served for dialogue boxes and file selection. Although no emulator presently supports Jane's oddball original mouse, the PBS MacNeil/Lehrer NewsHour did a piece on Arktronics in 1984 (the photo above of Marks and an open Apple II case is from this clip) and, along with pictures of the Arktronics offices which I've scattered throughout this article, had some screenshots that illustrate its capabilities. Here a document is being edited in Janewrite. You can see close, scroll and size gadgets in the window frame, but interestingly the control to maximize the current window is in the lower right. The top of the screen shows the editing tools (hand pointer, arrow, scissors [cut], camera [copy] and paste jar), icons for the three core apps, and then system-wide icons for on-line help, printing, the file manager, preferences and "STOP" to globally cancel an operation. Across the bottom, beside the window maximize gadget, are tools for adjusting line justification, font style (bold, underline, bold and underline, superscript, subscript), print settings and search. I'll have more to say about all of these when we get to Jane's Commodore port. Document windows could also be moved and resized, and multiple windows from different Jane applications could be open simultaneously. If you hit Control-Reset, a Easter egg briefly flashes on-screen with the names of the Apple II programmers: Mike Lagae, John R. Haggis, Brent Iverson, Jim Poje, Peter Lee, Uwe Pleban, Allen Leibowitz and Ken Roe. Because portability to other, sometimes wildly different, systems was always contemplated, application-level components were written in a high level language and compiled for the target (allegedly an early microcomputer dialect of C), with the graphics and I/O drivers written directly in assembly. With the release of the IIc Arktronics updated the program to support Apple's mouse as well. Reviews of the Apple II version were decidedly mixed. In June 1984, InfoWorld called it "innovative" but also observed that "overbearing use of icons, some slow features, and some awkwardness mar the product, which could benefit from an emphasis on efficiency rather than gimmickry." Down under, Your Computer in November 1984 liked the simple interface and believed it would appeal to undemanding users but criticized the 236-page manual and found the mouse unreliable. "When the mouse works properly, it is good," wrote reviewer Evan McHugh, but "when it doesn't it's the pits." Likewise, although A+'s 1985 review also liked the interface and the fact that multiple windows from each module could be open at once, the magazine also felt that "the individual modules in Jane are not up to professional productivity quality." Perhaps because of the software display, Janewrite "was too slow to respond to the keystrokes of a moderately proficient typist," and Janecalc, equally slow, was also panned as "crippled" because it only supported a 24x20 maximum spreadsheet. "Thank you, Jane," quipped reviewer Danny Goodman, "[l]eave your number at the door." Jane was also billed as available for the Commodore 64, even in contemporary advertising, but COMPUTE!'s Gazette in January 1985 said it was "scheduled to be released for the Commodore 64 by the time you read this. The price is expected to be about $80 [$240]." Interviewed for the article, Marks said that Jane for the 64 was to come as a combination cartridge and disk package, where a "32K plug-in cartridge" would quickly and automatically bring up the system. The article claimed the cartridge would autoboot the applications from (now) just a single floppy plus the data disk, though I suspect the actual configuration was that the cartridge contained the applications and the disk contained the online tutorial, simultaneously furnishing a modicum of both instant access and copy protection. Notably, this version didn't come with its own mouse; Marks said they were working to support third-party mice as well as joystick and "touch pad" (presumably KoalaPad) options instead. Accounting for publishing delays, the Gazette piece would have been written several months prior in the fall of 1984 — after advertisements for the C64 version of Jane had been in multiple periodicals such as Creative Computing and Family Computing claiming you could purchase it already. In fact, the 64 version of Jane would never be released — it was simply cancelled once Commodore paid Arktronics to port it to the 128 and badged it as a Commodore product. As the 128's graphic and sound capabilities are virtually identical to the 64's in 40-column mode, save for the extra colour RAM, the port was relatively straightforward. (At the same time Commodore also rebadged the CP/M-based Perfect Software series from Thorn EMI for the 128, but this was non-exclusive, and their rebranded versions were exactly the same as sold for other CP/M-compatible systems. Goheen promised "comprehensive and professional developer support" for the new computer.) The new Jane could also be made cheaper: since the 128 is capable of autobooting a suitably coded floppy disk in drive 8, the cartridge could be dispensed with and the less expensive three-floppy scheme restored (though the grey disk was now called the "application disk"). A 128-mode 1541 fastloader is used if the new and much faster 1570 or 1571 disk drives aren't detected, though the 1571 still boots Jane noticeably faster than the fastloader. (Parenthetically, a frequent misconception is that the Z80 in the 128 does the boot sector check to start CP/M. In fact, the 8502 does that after the Z80 has already checked the Commodore key isn't down and entered 128 mode. In CP/M's case, the code in the CP/M disk boot sector instructs the 8502 to give control back to the Z80 so it can finish the boot sequence — if this weren't the case, the BASIC BOOT command wouldn't be able to start CP/M. Interestingly, 1581s booting CP/M have a special startup file to keep their own CP/M boot sector in a different location.) Otherwise, Jane 128 openly betrayed its origins on the 64: other than fastbooting with the 1571, which it mostly got for free, and support for the 128's new keys it took no advantage of any other 128 features, in particular no 2MHz support nor true VDC 80-column mode. Although the manual and box copy say using a mouse is supported, only the original 1350 mouse works, which strictly emulates a joystick. All three applications that were in the Apple II version are included. Under the hood the apps are implemented as overlays for a central kernel called JANEGM. Sadly, I didn't see any obvious credits while scanning through the disk files. The manual, which appears to have been written by a third party, insists on camelcasing the apps as JaneWrite, JaneCalc and JaneList even though the rear box copy doesn't distinguish them that way and the Apple II version and Arktronics' own advertising called them Janewrite, Janecalc and Janelist. I'll use the latter here. Commodore also included some official marketing material with the box, hawking their new 1902 monitor (with 80 column mode, which was useless for Jane), 1571 disk drive (which works well with Jane), 1670 Modem/1200 (which Jane doesn't use), 512K REU (which Jane doesn't use either) and the 1350 mouse — which in this photo is somewhat different-appearing than the released 1350/1351, and might have been a mockup. Actually, this system would have been a very nice 128 setup and very similar to the one we'll be using both for real and in VICE. Too bad Jane 128 could use relatively little of it. Both Jane and the Perfect series were demonstrated with the 128 for Winter CES 1985, though Commodore didn't announce MSRPs then for any of them at the time. It eventually emerged later that year for $49.95 [$150]; by the next year some retailers were selling it for as low as $35 [$100], compared to each of the Perfect titles then going for $45 apiece [$130]. Plus, the Perfect titles, being CP/M-based, were bland and text-based and failed to show off the C128's graphics, so Commodore ended up emphasizing Jane more in its contemporary marketing. Booting Jane 128 from the 128DCR's internal 1571 drive with my own 1902 monitor. Although its interface is similar to the Apple II's in broad strokes, Jane 128's most obvious difference is colour. However, there are numerous more subtle UI changes in this version, sufficient for it to be called "Jane 2.0" internally before release. We'll step through them here and in the next set of screenshots because they're an interesting comparison point to modern human interface practice. As with the Apple II, across the top of the screen are the various icons, or what the manual calls "pictures." These were slightly altered for the 128 from the Apple II originals. The blue icons again set the mode of the pointer ("tools") from the hand pointer, the insertion arrow, scissors (cut), camera (copy) and paste jar. The current tool is highlighted. You select a new tool by clicking on it, but you can also use the function keys (CLR/HOME, F1, F3, F5 and F7). By modern conventions Jane's tools are used backwards: instead of selecting a text range and "choosing a tool" (e.g., Command-C for copy) to operate on it, you choose a tool first and with that tool select the text range it operates on. I'll demonstrate this specific functionality in a couple instances, but any verb-object operation in Jane will work this way. (Linguistically, this makes Jane a head-initial language, while most modern GUIs are head-final.) Next to the tools are the main apps, Janewrite (now in purple), Janecalc (in green) and Janelist (in cyan), and next to them in grey are the same standard applets built into the kernel (online help, print dialogue, disk/file manager and setup). Finally, the STOP icon, now a solid red, stops the current app, and can be used to escape some screens, though not all. Unexpectedly it doesn't serve to quit Jane entirely: you just turn the computer off. Jane remembers what app is loaded and doesn't reload the overlay if you exit and re-enter it. However, unlike Jane for the Apple II, Jane 128 does not allow you to have multiple documents open simultaneously, a limitation that challenges the definition of "integrated software." In fact, of the three official Commodore productivity packages we've looked at so far, only poor abused 3-Plus-1 could do so. If you're working in one app and select another, Jane 128 will prompt you to save your work as if you'd clicked STOP, and the window will close. Given that the Apple II version managed to implement multiple documents in 64K of RAM, the Commodore 64 version — let alone the 128 — would seem to have little excuse, though I can think of two potential explanations. One is to increase the amount of memory available for any one document, which the Apple II version was indeed criticized for. The second is particular to the 128: its default memory configuration doesn't have a lot of free RAM, and it may have been judged too complicated to span or swap working sets across banks. (Some fiddling in the monitor shows that the documents simply occupy RAM in bank 1 and don't span elsewhere.) On the other hand, other 128 applications certainly do manage it, and it's possible development deadlines were a contributing factor. Let's start out with the online help, one of Marks and Kotick's fundamental design goals. Assuming you got the joystick (or 1350) plugged into the right port, there's a big honking question mark. What happens when you click on it? You get right into the online help window. The pointer snaps to the options; you can also move the pointer from option or cell to another option or cell with the CRSR keys/128 arrow keys and select it with the Commodore key. The window's yellow border is salient: any window that gives you choices to select from carries a yellow border. We'll see this again later. Incidentally, the manual is not in colour (just black, white and an accent magenta), and possibly as a result is all but totally ignorant of these UI choices or why they were made. The Apple II version's windows have a corner close gadget in the typical open square style, but this would only have made visual sense to someone familiar with the Lisa or Mac — which most Commodore users in 1985 wouldn't be. Instead, here windows you can close have a big bright red EXIT button (the ESC key can also serve this role in most cases). All icons are simply drawn onto the VIC-II high-res screen; unlike Magic Desk where pretty much everything was a sprite, the only sprite here is the pointer. Windows cannot be moved or resized, but by limiting icon and window boundaries to VIC-II 8x8 cells, drawing is fairly fast. Of course, most of the topics are on the yellow help disk (see? it matches). Jane 128, like the Apple II version, supports two disk drives, so you could have the help disk in device 9 and it would find it. The online help is pretty good, considering. It shows the icons and images as they would appear on-screen, and while they aren't live, they are accurate. The only black eye it gets is the technically truthful but functionally insufficient prompt "Press a key to continue" — the joystick or 1350 mouse button also work, and so does the ESC key to exit early, even though the exit button isn't shown. Some help items are animated and show you a demonstration, and each app has its own bespoke help. The system keeps track of what disks are where. If we start Janewrite by going to the typewriter, this blue dialogue box will appear — informational dialogue boxes always have a blue border — as it loads the overlay ... ... but then looks for a data disk, fails to find it, and asks for one. You need one even for a new document, and you can get stuck in a loop here if you don't provide one (pressing ESC just makes it try again, and clicking on the STOP icon doesn't do anything). You could put in the black data disk it comes with, but this one contains our generous donor's files, so we'll just give a blank disk image to VICE instead which Jane will offer to format. When creating a new data disk in VICE, if a 1571 is detected then Jane will want a real .d71 with the full available space, not a .d64, as it will then expect it can format both sides of the virtual disk. However, all of the Jane original disks, including the black one, are formatted single-sided for the 1541 since many early 128 owners would still be using one. The other way you can do this is from the disk icon. As these icons are in grey, so are their windows (except, curiously, help, but I can see how a yellow question mark would have looked bad against a white background), suggesting a global applet served by the central Jane kernel. The disk icon brings up a basic file manager allowing you to make duplicate backup files (but only to the same disk), rename or delete them, or create a new disk. The copy option is the default and is pre-selected when the window opens, which is irritating, because our modern reflexive habit of selecting the file first and then the action will cause an immediate copy to occur before you get the chance to click anything else. I don't think this was just me: there were several spurious duplicate files on the original black data disk I suspect for the same reason. If files are present on the disk, they will appear with their names and a filetype letter (W, C or L for Janewrite, Janecalc or Janelist respectively). Notice the slightly misshapen scrolling arrows, which were nice and clean on the Apple. We'll provide the .d71 to Jane here. Windows warning you about data loss have a red border. Interestingly, it provides both a No button and the exit button, which both do the same thing: abort back to the file manager. Jane seems unable to distinguish between an unformatted disk and a completely absent one, and will (fruitlessly) attempt to format an empty drive. Formatting in progress. The time estimates are surprisingly not far off. With our disk formatted, let's return to Janewrite at the end, since this will be the majority of the documents we'll convert. Instead, we'll start with the spreadsheet, Janecalc. Whenever any of the three built-in applications starts up, and once Jane has located the data disk, a file selector (in grey) appears. There are no spreadsheets ("worksheets") on our freshly formatted disk, so we click the NEW icon. Entering the new filename (blue window). You may have noticed that the red and blue windows are all invariably the same size regardless of contents and any active controls they contain. This probably simplified rendering quite a bit. Because Janecalc is green, its content window border is likewise green, and because Jane 128 doesn't multitask between the applications, it takes up the entirety of the screen. Two templates are provided, along with a roll-your-own option. We'll go with the Home Budget for illustration. The Home Budget template pulls up a simplified home budget by month which you can fill in. Jane supports 40, 64 and 80 column modes, all rendered in software on the VIC-IIe 320x200 display (not with the VDC's 640x200 display), but by default it uses 40. (I'll get to this in more detail in the word processor.) Along the bottom are various operators and the extent of the formula functions available (hardly competition for the Convergent WorkSlate). They can be selected with the pointer in lieu of text entry, which makes them quite discoverable, but in practice it's simply faster to type them. No other functions are implemented. Since the content window cannot be resized, the maximize gadget from the Apple II version became obviously useless and was removed. By using the joystick/mouse you can use the hand to point to a cell and then, with the hand pointing to it, just start typing text or a number. The cursor keys will move the pointer from cell to cell for you, though they will not exit the content area. If you click or otherwise select the cell with the hand, however, Jane considers this an attempt to construct a formula, which again would be frustrating to modern audiences used to, say, Microsoft Excel. But to edit it again, you pick the insert tool instead of the hand, and this time you must select the cell to type in it. Motion around the content area in all three applications is accomplished using multiple small icons in the bottom and right window borders. The "half full" icon pushes it all the way to the outer edge in that direction, while the double and single arrows move the viewport by large leaps and small leaps respectively. There are no thumbs to show relative location, but you can click anywhere along the scroll area for a proportionately "medium" jump if you like. You can also use CTRL-CRSR/CTRL-arrow keys. Even in 40-column mode, and even given that the scroll doesn't animate and just snaps to the new position, scrolling is agonizingly slow and multiple clicks on the scroll controls invariably overshoot. Putting it in 80 column mode doesn't just give you more on the screen — it also means you don't need to endure as many pauses trying to move around. Again, I'll have more to say about font sizes when we get to Janewrite. Unique to Janecalc, the scrolling actually wraps. Worksheets remain limited to 26 columns (A-Z), as in the Apple II version, but now up to 50 rows are allowed. Still, this wouldn't have been sufficient for anything larger than a modest small business, even in 1985. Formulas are approximately VisiCalc-style using A1 absolute notation for cells, though there are no sigils for functions (not that there's very many) and ranges are delimited by colons. Most basic math operators and parentheses are available. Here, we'll get a sum of this row ... ... and then manually calculate an average by dividing the sum by the count of populated rows (we could also just use avg). The template includes this at the bottom, but this shows you how formula entry worked. As we add data to dependent cells the sheets recalculate but circular references are not handled, though in fairness this capability was still not common in small spreadsheet applications. We'll go to Janelist next. When we do so, a red window pops up to prompt us to save our work. Switching to Janelist. Creating our new list. All very consistent (the file manager and requester seem to be part of the Jane kernel). Janelist, in fairness, never purported to be a database in any incarnation and acts more like a cardfile; even the manual merely refers to it as a "list keeper." Like Janecalc it comes with templates, though Janelist supports a substantial number more. For variety I'll try to enter some of my very large CD collection, because I'm one of those people (vinyl is for art, CD is for listening). The list comes up as fillable fields. There may be up to 15 field names up to 12 characters long. If you choose to create your own, then Jane will step you through entering the field names. That's about all the customization you can do. The values for those fields can span multiple lines, which is what the viewport scrolling is for — you use the icons at the bottom to advance through individual cards. Incidentally, Atom Heart Mother is Pink Floyd's finest album and I will tolerate no disagreement. The icon that looks like cards being pulled out suggests how to make a query (the magnifying glass icon, or possibly the funnel icon to denote a filter, wasn't universal at this point). Because it gives you choices, it's yellow, remember? The two OK buttons do different things. The top one filters cards to the query requested, but the bottom one undoes any query. You can query on top of queries for a primitive sort of logical-AND. Partial word searches are supported. For example, here is the second best Beatles album — the best is, of course, Abbey Road. Since we searched for the Beatles, when we run out of Beatles CDs, nothing more turns up from my formidable library. It is also possible to sort cards, in which case they appear in that order instead. You cannot sort on multiple fields, and you can't sort descending. Finally, Janewrite, where we will spend the rest of our time — and where apparently most of Jane's users spent theirs, including our previous owners. I've got a prefab file here I constructed while playing around to explore the file format, so this time we'll load a document instead of entering one, just to show you what that looks like from the file requester. Janewrite is IMHO the most polished and competent of the three apps, and it feels like the most development time was spent on it, too. It also shows what the Jane font renderer is capable of: although non-proportional and only a single typeface, you can see bold, underline, bold and underlined, superscript, and subscript are all possible. The bottom shows left, right, centre and full justification options, done per line, plus the font options, and then search (this time with a magnifying glass) and page layout. These icons are larger and more detailed than the Apple's. As with other parts of the UI, text attributes are set verb-initial, i.e., you would choose the desired style, then the insertion tool, then highlight the range of text and finally release the button (or, annoyingly, wait, which makes fine adjustments harder than they should be). Notice that there is an explicit bold-and-underline option, instead of using the separate bold and underline options in combination: that's because you can't make superscripted or subscripted text bold or underlined. The top of the content area shows the ruler — in characters, not inches — and margin stops and the single paragraph indent stop, which you can drag to change them. Interestingly, the ruler seems to be new for Jane 128: no screenshot for the Apple II version demonstrates one. Janewrite is also capable of a modicum of WYSIWYG if you select the 80 column option. This and other options come from the "computer" icon, which acts as a preference panel. Preferences are saved to the application disk and are global to all three applications. Despite this presenting a choice window (ordinarily yellow), Jane seems to treat it as a global window from the kernel, so it's grey. The bottom set of options are specifically for configuring the printer. Print output is generated with control codes and text only; Jane does not generate graphic sequences, so what actually shows up on the page depends on what your printer actually supports. The default middle print size option corresponds to 80 columns (more accurately, the default or 12cpi font size), while the small font corresponds to the condensed 15cpi and/or 132 column option available on some printers, and the large font corresponds to the 60 or 64-column (e.g., 10cpi) option also only available on some printers — not the expanded double wide printing option more typical of Commodore-specific devices. You could also select between regular fanfold tractor feed or plain paper, as well as the Near Letter Quality print option some printers supported, and finally the printer itself. There was built-in support for the MPS-801 (i.e., 1525), MPS-802 (i.e., 1526), 1101, "Oki" (generic Okidata), and generic "Epson" printers, assuming they were connected somehow to the IEC serial such as through a third-party parallel printer interface. These printer drivers varied wildly in their capabilities: the 1525/MPS-801 "driver" supported almost nothing except basic text, while the generic Okidata and Epson drivers supported nearly everything that Jane could generate. The "OTHER" driver is customizeable, a neat idea, if a little clumsy. A BASIC program called BUILDPRT on the grey disk allows you to populate it with your printer's control codes. Control sequences up to three characters long were supported. You would enter these from the manual, it would save them to disk, and then you could use the custom driver inside Jane. The topmost options affect the appearance of Jane. You can choose from three font sizes, all non-proportional, corresponding to 40, 64 or 80 column text. Confusingly, the 80-column option is the last when it's the middle option for printing. (The Apple II version likely didn't support 80 column text due to its smaller hi-res horizontal width.) Pointer speed and the "beep" Jane makes when you select options are also configurable. Here's how it looks in 80 columns, using the typical "soft 80" approach on the 64 which is more or less legible, at least on a composite display. As there are no colours in the content area, there is no risk of colour clash. This is probably the most useful view in Janewrite. The 64-column view, by contrast, is probably the least useful. The 40-column view is the most legible and 2:1 the size of a typical 80-column line, so it's easy to mentally grok page layout that way, but the 64-column view is odd enough to end up being the worst of both worlds. An interesting feature of Janewrite are the accented characters, which was not frequently seen on home computer-class word processors, as explained by the on-line help. Janewrite treats them as diacritics, and they can even be applied to letters that wouldn't ordinarily use them (because who knows? some language might), such as the grave and acute accents on the n as well as the more typical tilde. In fact, you can apply them to any character, even punctuation. However, the use of the up arrow to indicate a circumflex means there's no way you can type a literal caret into your document, and while a macron would have been nice, omitting the umlaut seems a greater fault. The decorators are also rather hard to distinguish in 80 columns, so Spanish users of Juana 128 might want to go to cuarenta column mode to mirar mejor. Janewrite also has basic find and/or find-and-replace, and a small pane appears below the content area when it's active. There are also decent page layout options, including setting both a per-page title and its position, adding a page number and its position, and margins, number of copies and starting page, though the last two would seem more appropriate for a print dialogue than a page layout one. Note that Jane will always print a 10-space left margin, so an 80-column printed line can be no longer than 70 characters, and this is indeed the maximum width Janewrite will support. However, paragraphs are apparently not stored as continuous sequences of text, demonstrated here with a contrived example. (In fact, we'll prove they aren't shortly.) While Janewrite will word-wrap at the right margin, inserting text after that will wrap onto a new line, not into the next line, even if the two lines were previously entered "together." There's a speed/flexibility tradeoff here in that Janewrite doesn't have to continuously reflow paragraphs, but it also means its concept of a paragraph is entirely based on how much you select. The text can be manually reflowed, joining lines if necessary, by picking one of the paragraph justification options and selecting the text with the hand, which will then be reflowed (and, if needed, spaces inserted) to match. In fact, this is also necessary if you change the margins because Jane doesn't automatically reformat your document then either. I also promised you an example of cut and paste, so here's one using the scissors (cut). You simply pick it and, with the button down, drag it across the text you want and release the button. Note that there is no undo, though I suppose you could just immediately paste it back in. Exiting Janewrite (though not saving, because we need the accented characters to stay in the file). Now that we understand what Jane can do and how it works, let's move on to converting the files. We can extract our test files we made from our .d71 with VICE's c1541 utility and hexdump it. This got a little more difficult than it should have been: % c1541 work.d71 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> dir 0 "data#000 " 01 2a 39 "c.TESTCALC" prg 3 "l.TESTLIST" prg 4 "w.nOTE.2" prg 4 "w.TESTCONV" prg 1278 blocks free. c1541 #8> read "w.TESTCONV" ERR = 62, FILE NOT FOUND, 00, 00 cannot read `w.TESTCONV' on unit 8 invalid filename As you may have guessed, that's because the filenames, and it turns out the data in the files themselves, are stored as true ASCII, not PETSCII (indeed as they would have been on the Apple II, also), so c1541's filename conversion fails. Fortunately, the extract command will walk the entire directory and pull out all the files no matter what they're named. The documents are all regular Commodore PRoGram files with a starting address and they appear to be loaded in-place at that address into bank 1. This introduces the possibility of some delightful save-file hacks but we're not here for that today. That means we can also simply extract our previous owners' files en masse as well. I imaged their disk using my ZoomFloppy and external 1571, and since they are normal PRGs, a BAM copy of the allocated sectors is all we need to do, with one wrinkle: % d64copy -B 9 r_jane_bam.d64 [Warning] growing image file to 683 blocks 14: --*****--*****--***** 8% 15/171[Warning] read error: 0e/00: 5 14: ?******************** 12% 21/171[Warning] giving up... 14: ?******************** 15: ********************* 16: ********************* 17: ********************* 18: ******************* 19: ******************* 20: ******************* 21: ******************* 22: ****..***...***...* 100% 171/171 170 blocks copied. % c1541 r_jane_bam.d64 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> extract c1541 #8> quit Fortunately it doesn't look like the bad sector was in any of the files they cared about. Let's get an idea of the format from our test files. Janecalc files are "huge" because it looks like the entire 26x50 cell range is saved regardless of whether anything's in it or not. Looking at the directory of their data disk where they had saved a couple of sparse test spreadsheets of their own, they also were 39 blocks in length no matter how many cells were actually populated. The on-disk format is consequentially a bit wasteful: 000003a0 00 00 00 00 00 20 20 20 4a 61 6e 75 61 72 79 20 |..... January | 000003b0 20 46 65 62 72 75 61 72 79 20 20 20 20 20 4d 61 | February Ma| 000003c0 72 63 68 20 20 20 20 20 41 70 72 69 6c 20 20 20 |rch April | 000003d0 20 20 20 20 4d 61 79 20 20 20 20 20 20 4a 75 6e | May Jun| 000003e0 65 20 20 20 20 20 20 4a 75 6c 79 20 20 20 20 41 |e July A| 000003f0 75 67 75 73 74 20 53 65 70 74 65 6d 62 65 72 20 |ugust September | 00000400 20 20 4f 63 74 6f 62 65 72 20 20 4e 6f 76 65 6d | October Novem| 00000410 62 65 72 20 20 44 65 63 65 6d 62 65 72 00 00 01 |ber December...| 00000420 04 00 00 00 00 00 00 20 20 54 6f 74 61 6c 20 20 |....... Total | 00000430 20 41 76 65 72 61 67 65 20 20 20 00 00 01 04 00 | Average .....| Cardfiles are stored much more efficiently. Here's the entirety of our two cards. The fields are in the header, padded out to the fixed 12 character length, but with technically unnecessary nulls between them. A spurious "Beatles" entry looks like a buffer that was captured as part of the save, and there is also a page-aligned (counting the starting address) pad of nulls. Otherwise, the value strings look null-delimited, in the order they appear in the field list (unpopulated fields are zero-length strings). When you run out of fields, you're on the next card. % hexdump -C l.TESTLIST 00000000 00 7f 01 00 36 02 08 00 04 00 54 69 74 6c 65 20 |....6.....Title | 00000010 20 20 20 20 20 20 00 4c 65 61 64 20 41 72 74 69 | .Lead Arti| 00000020 73 74 20 00 4f 74 68 65 72 20 41 72 74 69 73 74 |st .Other Artist| 00000030 00 43 6f 6d 70 6f 73 65 72 20 20 20 20 00 43 6f |.Composer .Co| 00000040 6e 64 75 63 74 6f 72 20 20 20 00 57 68 65 72 65 |nductor .Where| 00000050 20 4b 65 70 74 20 20 00 42 6f 72 72 6f 77 65 64 | Kept .Borrowed| 00000060 20 62 79 20 00 44 61 74 65 20 4c 65 6e 74 20 20 | by .Date Lent | 00000070 20 00 00 00 ff ff 01 ff ff ff ff ff ff ff ff ff | ...............| 00000080 ff ff ff ff ff 00 01 02 03 04 05 06 07 00 01 02 |................| 00000090 03 04 05 06 07 ff ff ff ff ff ff ff ff ff ff 00 |................| 000000a0 00 54 68 65 20 42 65 61 74 6c 65 73 00 00 00 00 |.The Beatles....| 000000b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00000100 d7 09 80 60 60 ac 98 09 ae 04 cf a5 ea a9 d7 15 |...``...........| 00000110 80 ac 1d 21 d6 1c 80 60 60 ac 98 09 ae 04 cf 20 |...!...``...... | 00000120 75 0b 00 00 ac 0a 95 a5 f0 b0 a9 a6 b1 a9 a4 b1 |u...............| 00000130 a5 f1 b0 a9 a7 b1 a9 a5 b1 ac c0 08 cf 20 75 0b |............. u.| 00000140 fe ff a5 37 ae 8c ff 00 c0 d8 4b 80 cf a5 f0 b0 |...7......K.....| 00000150 a7 a6 b1 c0 d8 60 80 a5 f1 b0 a7 a7 b1 c0 d8 60 |.....`.........`| 00000160 80 cf a5 f0 b0 a7 a6 b1 00 00 09 00 01 5d f6 00 |.............]..| 00000170 00 00 00 09 00 09 00 01 66 f6 00 00 00 00 54 00 |........f.....T.| 00000180 50 00 01 b1 f6 69 64 65 20 12 00 42 00 01 6f f6 |P....ide ..B..o.| 00000190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 000001a0 00 00 00 00 00 00 00 52 65 76 6f 6c 76 65 72 00 |.......Revolver.| 000001b0 54 68 65 20 42 65 61 74 6c 65 73 00 00 4c 65 6e |The Beatles..Len| 000001c0 6e 6f 6e 2d 4d 63 43 61 72 74 6e 65 79 2d 48 61 |non-McCartney-Ha| 000001d0 72 72 69 73 6f 6e 00 47 65 6f 72 67 65 20 4d 61 |rrison.George Ma| 000001e0 72 74 69 6e 00 00 00 00 00 41 74 6f 6d 20 48 65 |rtin.....Atom He| 000001f0 61 72 74 20 4d 6f 74 68 65 72 00 50 69 6e 6b 20 |art Mother.Pink | 00000200 46 6c 6f 79 64 00 00 57 61 74 65 72 73 2d 47 69 |Floyd..Waters-Gi| 00000210 6c 6d 6f 75 72 2d 4d 61 73 6f 6e 2d 57 72 69 67 |lmour-Mason-Wrig| 00000220 68 74 2d 47 65 65 73 6f 6e 00 50 69 6e 6b 20 46 |ht-Geeson.Pink F| 00000230 6c 6f 79 64 00 00 00 00 |loyd....| 00000238 This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. The initial release was uniquely accompanied by its own single-button mouse (Instagram link), a lower-cost unit — Kotick admitted settling for "a lesser quality product" — manufactured under contract by joystick maker Wico and incompatible with Apple's own later mouse options. This mouse interfaced to the Apple with a custom card and an 8-pin connector. Jane's appearance at the show attracted attention from another Steve, but at the Apple booth instead: Steve Jobs. Jobs visited the company in Ann Arbor and, suitably impressed, told Kotick and Marks they were wasting their time in college. Kotick duly dropped out to concentrate on the company, much to the consternation of his parents. Because it was intended to run on any existing Apple II with sufficient RAM, pretty much nothing was assumed about the hardware. It displayed strictly in monochrome and used the Apple hi-res mode to display upper and lowercase since the II/II+'s text mode was purely uppercase. Additionally, as 80-column capability wasn't universal, it used a software text shaper to display 60-column text in the word processor and, here, in the file requester. Basic windows like these, with title and information in the actual window bars, served for dialogue boxes and file selection. Although no emulator presently supports Jane's oddball original mouse, the PBS MacNeil/Lehrer NewsHour did a piece on Arktronics in 1984 (the photo above of Marks and an open Apple II case is from this clip) and, along with pictures of the Arktronics offices which I've scattered throughout this article, had some screenshots that illustrate its capabilities. Here a document is being edited in Janewrite. You can see close, scroll and size gadgets in the window frame, but interestingly the control to maximize the current window is in the lower right. The top of the screen shows the editing tools (hand pointer, arrow, scissors [cut], camera [copy] and paste jar), icons for the three core apps, and then system-wide icons for on-line help, printing, the file manager, preferences and "STOP" to globally cancel an operation. Across the bottom, beside the window maximize gadget, are tools for adjusting line justification, font style (bold, underline, bold and underline, superscript, subscript), print settings and search. I'll have more to say about all of these when we get to Jane's Commodore port. Document windows could also be moved and resized, and multiple windows from different Jane applications could be open simultaneously. If you hit Control-Reset, a Easter egg briefly flashes on-screen with the names of the Apple II programmers: Mike Lagae, John R. Haggis, Brent Iverson, Jim Poje, Peter Lee, Uwe Pleban, Allen Leibowitz and Ken Roe. Because portability to other, sometimes wildly different, systems was always contemplated, application-level components were written in a high level language and compiled for the target (allegedly an early microcomputer dialect of C), with the graphics and I/O drivers written directly in assembly. With the release of the IIc Arktronics updated the program to support Apple's mouse as well. Reviews of the Apple II version were decidedly mixed. In June 1984, InfoWorld called it "innovative" but also observed that "overbearing use of icons, some slow features, and some awkwardness mar the product, which could benefit from an emphasis on efficiency rather than gimmickry." Down under, Your Computer in November 1984 liked the simple interface and believed it would appeal to undemanding users but criticized the 236-page manual and found the mouse unreliable. "When the mouse works properly, it is good," wrote reviewer Evan McHugh, but "when it doesn't it's the pits." Likewise, although A+'s 1985 review also liked the interface and the fact that multiple windows from each module could be open at once, the magazine also felt that "the individual modules in Jane are not up to professional productivity quality." Perhaps because of the software display, Janewrite "was too slow to respond to the keystrokes of a moderately proficient typist," and Janecalc, equally slow, was also panned as "crippled" because it only supported a 24x20 maximum spreadsheet. "Thank you, Jane," quipped reviewer Danny Goodman, "[l]eave your number at the door." Jane was also billed as available for the Commodore 64, even in contemporary advertising, but COMPUTE!'s Gazette in January 1985 said it was "scheduled to be released for the Commodore 64 by the time you read this. The price is expected to be about $80 [$240]." Interviewed for the article, Marks said that Jane for the 64 was to come as a combination cartridge and disk package, where a "32K plug-in cartridge" would quickly and automatically bring up the system. The article claimed the cartridge would autoboot the applications from (now) just a single floppy plus the data disk, though I suspect the actual configuration was that the cartridge contained the applications and the disk contained the online tutorial, simultaneously furnishing a modicum of both instant access and copy protection. Notably, this version didn't come with its own mouse; Marks said they were working to support third-party mice as well as joystick and "touch pad" (presumably KoalaPad) options instead. Accounting for publishing delays, the Gazette piece would have been written several months prior in the fall of 1984 — after advertisements for the C64 version of Jane had been in multiple periodicals such as Creative Computing and Family Computing claiming you could purchase it already. In fact, the 64 version of Jane would never be released — it was simply cancelled once Commodore paid Arktronics to port it to the 128 and badged it as a Commodore product. As the 128's graphic and sound capabilities are virtually identical to the 64's in 40-column mode, save for the extra colour RAM, the port was relatively straightforward. (At the same time Commodore also rebadged the CP/M-based Perfect Software series from Thorn EMI for the 128, but this was non-exclusive, and their rebranded versions were exactly the same as sold for other CP/M-compatible systems. Goheen promised "comprehensive and professional developer support" for the new computer.) The new Jane could also be made cheaper: since the 128 is capable of autobooting a suitably coded floppy disk in drive 8, the cartridge could be dispensed with and the less expensive three-floppy scheme restored (though the grey disk was now called the "application disk"). A 128-mode 1541 fastloader is used if the new and much faster 1570 or 1571 disk drives aren't detected, though the 1571 still boots Jane noticeably faster than the fastloader. (Parenthetically, a frequent misconception is that the Z80 in the 128 does the boot sector check to start CP/M. In fact, the 8502 does that after the Z80 has already checked the Commodore key isn't down and entered 128 mode. In CP/M's case, the code in the CP/M disk boot sector instructs the 8502 to give control back to the Z80 so it can finish the boot sequence — if this weren't the case, the BASIC BOOT command wouldn't be able to start CP/M. Interestingly, 1581s booting CP/M have a special startup file to keep their own CP/M boot sector in a different location.) Otherwise, Jane 128 openly betrayed its origins on the 64: other than fastbooting with the 1571, which it mostly got for free, and support for the 128's new keys it took no advantage of any other 128 features, in particular no 2MHz support nor true VDC 80-column mode. Although the manual and box copy say using a mouse is supported, only the original 1350 mouse works, which strictly emulates a joystick. All three applications that were in the Apple II version are included. Under the hood the apps are implemented as overlays for a central kernel called JANEGM. Sadly, I didn't see any obvious credits while scanning through the disk files. The manual, which appears to have been written by a third party, insists on camelcasing the apps as JaneWrite, JaneCalc and JaneList even though the rear box copy doesn't distinguish them that way and the Apple II version and Arktronics' own advertising called them Janewrite, Janecalc and Janelist. I'll use the latter here. Commodore also included some official marketing material with the box, hawking their new 1902 monitor (with 80 column mode, which was useless for Jane), 1571 disk drive (which works well with Jane), 1670 Modem/1200 (which Jane doesn't use), 512K REU (which Jane doesn't use either) and the 1350 mouse — which in this photo is somewhat different-appearing than the released 1350/1351, and might have been a mockup. Actually, this system would have been a very nice 128 setup and very similar to the one we'll be using both for real and in VICE. Too bad Jane 128 could use relatively little of it. Both Jane and the Perfect series were demonstrated with the 128 for Winter CES 1985, though Commodore didn't announce MSRPs then for any of them at the time. It eventually emerged later that year for $49.95 [$150]; by the next year some retailers were selling it for as low as $35 [$100], compared to each of the Perfect titles then going for $45 apiece [$130]. Plus, the Perfect titles, being CP/M-based, were bland and text-based and failed to show off the C128's graphics, so Commodore ended up emphasizing Jane more in its contemporary marketing. Booting Jane 128 from the 128DCR's internal 1571 drive with my own 1902 monitor. Although its interface is similar to the Apple II's in broad strokes, Jane 128's most obvious difference is colour. However, there are numerous more subtle UI changes in this version, sufficient for it to be called "Jane 2.0" internally before release. We'll step through them here and in the next set of screenshots because they're an interesting comparison point to modern human interface practice. As with the Apple II, across the top of the screen are the various icons, or what the manual calls "pictures." These were slightly altered for the 128 from the Apple II originals. The blue icons again set the mode of the pointer ("tools") from the hand pointer, the insertion arrow, scissors (cut), camera (copy) and paste jar. The current tool is highlighted. You select a new tool by clicking on it, but you can also use the function keys (CLR/HOME, F1, F3, F5 and F7). By modern conventions Jane's tools are used backwards: instead of selecting a text range and "choosing a tool" (e.g., Command-C for copy) to operate on it, you choose a tool first and with that tool select the text range it operates on. I'll demonstrate this specific functionality in a couple instances, but any verb-object operation in Jane will work this way. (Linguistically, this makes Jane a head-initial language, while most modern GUIs are head-final.) Next to the tools are the main apps, Janewrite (now in purple), Janecalc (in green) and Janelist (in cyan), and next to them in grey are the same standard applets built into the kernel (online help, print dialogue, disk/file manager and setup). Finally, the STOP icon, now a solid red, stops the current app, and can be used to escape some screens, though not all. Unexpectedly it doesn't serve to quit Jane entirely: you just turn the computer off. Jane remembers what app is loaded and doesn't reload the overlay if you exit and re-enter it. However, unlike Jane for the Apple II, Jane 128 does not allow you to have multiple documents open simultaneously, a limitation that challenges the definition of "integrated software." In fact, of the three official Commodore productivity packages we've looked at so far, only poor abused 3-Plus-1 could do so. If you're working in one app and select another, Jane 128 will prompt you to save your work as if you'd clicked STOP, and the window will close. Given that the Apple II version managed to implement multiple documents in 64K of RAM, the Commodore 64 version — let alone the 128 — would seem to have little excuse, though I can think of two potential explanations. One is to increase the amount of memory available for any one document, which the Apple II version was indeed criticized for. The second is particular to the 128: its default memory configuration doesn't have a lot of free RAM, and it may have been judged too complicated to span or swap working sets across banks. (Some fiddling in the monitor shows that the documents simply occupy RAM in bank 1 and don't span elsewhere.) On the other hand, other 128 applications certainly do manage it, and it's possible development deadlines were a contributing factor. Let's start out with the online help, one of Marks and Kotick's fundamental design goals. Assuming you got the joystick (or 1350) plugged into the right port, there's a big honking question mark. What happens when you click on it? You get right into the online help window. The pointer snaps to the options; you can also move the pointer from option or cell to another option or cell with the CRSR keys/128 arrow keys and select it with the Commodore key. The window's yellow border is salient: any window that gives you choices to select from carries a yellow border. We'll see this again later. Incidentally, the manual is not in colour (just black, white and an accent magenta), and possibly as a result is all but totally ignorant of these UI choices or why they were made. The Apple II version's windows have a corner close gadget in the typical open square style, but this would only have made visual sense to someone familiar with the Lisa or Mac — which most Commodore users in 1985 wouldn't be. Instead, here windows you can close have a big bright red EXIT button (the ESC key can also serve this role in most cases). All icons are simply drawn onto the VIC-II high-res screen; unlike Magic Desk where pretty much everything was a sprite, the only sprite here is the pointer. Windows cannot be moved or resized, but by limiting icon and window boundaries to VIC-II 8x8 cells, drawing is fairly fast. Of course, most of the topics are on the yellow help disk (see? it matches). Jane 128, like the Apple II version, supports two disk drives, so you could have the help disk in device 9 and it would find it. The online help is pretty good, considering. It shows the icons and images as they would appear on-screen, and while they aren't live, they are accurate. The only black eye it gets is the technically truthful but functionally insufficient prompt "Press a key to continue" — the joystick or 1350 mouse button also work, and so does the ESC key to exit early, even though the exit button isn't shown. Some help items are animated and show you a demonstration, and each app has its own bespoke help. The system keeps track of what disks are where. If we start Janewrite by going to the typewriter, this blue dialogue box will appear — informational dialogue boxes always have a blue border — as it loads the overlay ... ... but then looks for a data disk, fails to find it, and asks for one. You need one even for a new document, and you can get stuck in a loop here if you don't provide one (pressing ESC just makes it try again, and clicking on the STOP icon doesn't do anything). You could put in the black data disk it comes with, but this one contains our generous donor's files, so we'll just give a blank disk image to VICE instead which Jane will offer to format. When creating a new data disk in VICE, if a 1571 is detected then Jane will want a real .d71 with the full available space, not a .d64, as it will then expect it can format both sides of the virtual disk. However, all of the Jane original disks, including the black one, are formatted single-sided for the 1541 since many early 128 owners would still be using one. The other way you can do this is from the disk icon. As these icons are in grey, so are their windows (except, curiously, help, but I can see how a yellow question mark would have looked bad against a white background), suggesting a global applet served by the central Jane kernel. The disk icon brings up a basic file manager allowing you to make duplicate backup files (but only to the same disk), rename or delete them, or create a new disk. The copy option is the default and is pre-selected when the window opens, which is irritating, because our modern reflexive habit of selecting the file first and then the action will cause an immediate copy to occur before you get the chance to click anything else. I don't think this was just me: there were several spurious duplicate files on the original black data disk I suspect for the same reason. If files are present on the disk, they will appear with their names and a filetype letter (W, C or L for Janewrite, Janecalc or Janelist respectively). Notice the slightly misshapen scrolling arrows, which were nice and clean on the Apple. We'll provide the .d71 to Jane here. Windows warning you about data loss have a red border. Interestingly, it provides both a No button and the exit button, which both do the same thing: abort back to the file manager. Jane seems unable to distinguish between an unformatted disk and a completely absent one, and will (fruitlessly) attempt to format an empty drive. Formatting in progress. The time estimates are surprisingly not far off. With our disk formatted, let's return to Janewrite at the end, since this will be the majority of the documents we'll convert. Instead, we'll start with the spreadsheet, Janecalc. Whenever any of the three built-in applications starts up, and once Jane has located the data disk, a file selector (in grey) appears. There are no spreadsheets ("worksheets") on our freshly formatted disk, so we click the NEW icon. Entering the new filename (blue window). You may have noticed that the red and blue windows are all invariably the same size regardless of contents and any active controls they contain. This probably simplified rendering quite a bit. Because Janecalc is green, its content window border is likewise green, and because Jane 128 doesn't multitask between the applications, it takes up the entirety of the screen. Two templates are provided, along with a roll-your-own option. We'll go with the Home Budget for illustration. The Home Budget template pulls up a simplified home budget by month which you can fill in. Jane supports 40, 64 and 80 column modes, all rendered in software on the VIC-IIe 320x200 display (not with the VDC's 640x200 display), but by default it uses 40. (I'll get to this in more detail in the word processor.) Along the bottom are various operators and the extent of the formula functions available (hardly competition for the Convergent WorkSlate). They can be selected with the pointer in lieu of text entry, which makes them quite discoverable, but in practice it's simply faster to type them. No other functions are implemented. Since the content window cannot be resized, the maximize gadget from the Apple II version became obviously useless and was removed. By using the joystick/mouse you can use the hand to point to a cell and then, with the hand pointing to it, just start typing text or a number. The cursor keys will move the pointer from cell to cell for you, though they will not exit the content area. If you click or otherwise select the cell with the hand, however, Jane considers this an attempt to construct a formula, which again would be frustrating to modern audiences used to, say, Microsoft Excel. But to edit it again, you pick the insert tool instead of the hand, and this time you must select the cell to type in it. Motion around the content area in all three applications is accomplished using multiple small icons in the bottom and right window borders. The "half full" icon pushes it all the way to the outer edge in that direction, while the double and single arrows move the viewport by large leaps and small leaps respectively. There are no thumbs to show relative location, but you can click anywhere along the scroll area for a proportionately "medium" jump if you like. You can also use CTRL-CRSR/CTRL-arrow keys. Even in 40-column mode, and even given that the scroll doesn't animate and just snaps to the new position, scrolling is agonizingly slow and multiple clicks on the scroll controls invariably overshoot. Putting it in 80 column mode doesn't just give you more on the screen — it also means you don't need to endure as many pauses trying to move around. Again, I'll have more to say about font sizes when we get to Janewrite. Unique to Janecalc, the scrolling actually wraps. Worksheets remain limited to 26 columns (A-Z), as in the Apple II version, but now up to 50 rows are allowed. Still, this wouldn't have been sufficient for anything larger than a modest small business, even in 1985. Formulas are approximately VisiCalc-style using A1 absolute notation for cells, though there are no sigils for functions (not that there's very many) and ranges are delimited by colons. Most basic math operators and parentheses are available. Here, we'll get a sum of this row ... ... and then manually calculate an average by dividing the sum by the count of populated rows (we could also just use avg). The template includes this at the bottom, but this shows you how formula entry worked. As we add data to dependent cells the sheets recalculate but circular references are not handled, though in fairness this capability was still not common in small spreadsheet applications. We'll go to Janelist next. When we do so, a red window pops up to prompt us to save our work. Switching to Janelist. Creating our new list. All very consistent (the file manager and requester seem to be part of the Jane kernel). Janelist, in fairness, never purported to be a database in any incarnation and acts more like a cardfile; even the manual merely refers to it as a "list keeper." Like Janecalc it comes with templates, though Janelist supports a substantial number more. For variety I'll try to enter some of my very large CD collection, because I'm one of those people (vinyl is for art, CD is for listening). The list comes up as fillable fields. There may be up to 15 field names up to 12 characters long. If you choose to create your own, then Jane will step you through entering the field names. That's about all the customization you can do. The values for those fields can span multiple lines, which is what the viewport scrolling is for — you use the icons at the bottom to advance through individual cards. Incidentally, Atom Heart Mother is Pink Floyd's finest album and I will tolerate no disagreement. The icon that looks like cards being pulled out suggests how to make a query (the magnifying glass icon, or possibly the funnel icon to denote a filter, wasn't universal at this point). Because it gives you choices, it's yellow, remember? The two OK buttons do different things. The top one filters cards to the query requested, but the bottom one undoes any query. You can query on top of queries for a primitive sort of logical-AND. Partial word searches are supported. For example, here is the second best Beatles album — the best is, of course, Abbey Road. Since we searched for the Beatles, when we run out of Beatles CDs, nothing more turns up from my formidable library. It is also possible to sort cards, in which case they appear in that order instead. You cannot sort on multiple fields, and you can't sort descending. Finally, Janewrite, where we will spend the rest of our time — and where apparently most of Jane's users spent theirs, including our previous owners. I've got a prefab file here I constructed while playing around to explore the file format, so this time we'll load a document instead of entering one, just to show you what that looks like from the file requester. Janewrite is IMHO the most polished and competent of the three apps, and it feels like the most development time was spent on it, too. It also shows what the Jane font renderer is capable of: although non-proportional and only a single typeface, you can see bold, underline, bold and underlined, superscript, and subscript are all possible. The bottom shows left, right, centre and full justification options, done per line, plus the font options, and then search (this time with a magnifying glass) and page layout. These icons are larger and more detailed than the Apple's. As with other parts of the UI, text attributes are set verb-initial, i.e., you would choose the desired style, then the insertion tool, then highlight the range of text and finally release the button (or, annoyingly, wait, which makes fine adjustments harder than they should be). Notice that there is an explicit bold-and-underline option, instead of using the separate bold and underline options in combination: that's because you can't make superscripted or subscripted text bold or underlined. The top of the content area shows the ruler — in characters, not inches — and margin stops and the single paragraph indent stop, which you can drag to change them. Interestingly, the ruler seems to be new for Jane 128: no screenshot for the Apple II version demonstrates one. Janewrite is also capable of a modicum of WYSIWYG if you select the 80 column option. This and other options come from the "computer" icon, which acts as a preference panel. Preferences are saved to the application disk and are global to all three applications. Despite this presenting a choice window (ordinarily yellow), Jane seems to treat it as a global window from the kernel, so it's grey. The bottom set of options are specifically for configuring the printer. Print output is generated with control codes and text only; Jane does not generate graphic sequences, so what actually shows up on the page depends on what your printer actually supports. The default middle print size option corresponds to 80 columns (more accurately, the default or 12cpi font size), while the small font corresponds to the condensed 15cpi and/or 132 column option available on some printers, and the large font corresponds to the 60 or 64-column (e.g., 10cpi) option also only available on some printers — not the expanded double wide printing option more typical of Commodore-specific devices. You could also select between regular fanfold tractor feed or plain paper, as well as the Near Letter Quality print option some printers supported, and finally the printer itself. There was built-in support for the MPS-801 (i.e., 1525), MPS-802 (i.e., 1526), 1101, "Oki" (generic Okidata), and generic "Epson" printers, assuming they were connected somehow to the IEC serial such as through a third-party parallel printer interface. These printer drivers varied wildly in their capabilities: the 1525/MPS-801 "driver" supported almost nothing except basic text, while the generic Okidata and Epson drivers supported nearly everything that Jane could generate. The "OTHER" driver is customizeable, a neat idea, if a little clumsy. A BASIC program called BUILDPRT on the grey disk allows you to populate it with your printer's control codes. Control sequences up to three characters long were supported. You would enter these from the manual, it would save them to disk, and then you could use the custom driver inside Jane. The topmost options affect the appearance of Jane. You can choose from three font sizes, all non-proportional, corresponding to 40, 64 or 80 column text. Confusingly, the 80-column option is the last when it's the middle option for printing. (The Apple II version likely didn't support 80 column text due to its smaller hi-res horizontal width.) Pointer speed and the "beep" Jane makes when you select options are also configurable. Here's how it looks in 80 columns, using the typical "soft 80" approach on the 64 which is more or less legible, at least on a composite display. As there are no colours in the content area, there is no risk of colour clash. This is probably the most useful view in Janewrite. The 64-column view, by contrast, is probably the least useful. The 40-column view is the most legible and 2:1 the size of a typical 80-column line, so it's easy to mentally grok page layout that way, but the 64-column view is odd enough to end up being the worst of both worlds. An interesting feature of Janewrite are the accented characters, which was not frequently seen on home computer-class word processors, as explained by the on-line help. Janewrite treats them as diacritics, and they can even be applied to letters that wouldn't ordinarily use them (because who knows? some language might), such as the grave and acute accents on the n as well as the more typical tilde. In fact, you can apply them to any character, even punctuation. However, the use of the up arrow to indicate a circumflex means there's no way you can type a literal caret into your document, and while a macron would have been nice, omitting the umlaut seems a greater fault. The decorators are also rather hard to distinguish in 80 columns, so Spanish users of Juana 128 might want to go to cuarenta column mode to mirar mejor. Janewrite also has basic find and/or find-and-replace, and a small pane appears below the content area when it's active. There are also decent page layout options, including setting both a per-page title and its position, adding a page number and its position, and margins, number of copies and starting page, though the last two would seem more appropriate for a print dialogue than a page layout one. Note that Jane will always print a 10-space left margin, so an 80-column printed line can be no longer than 70 characters, and this is indeed the maximum width Janewrite will support. However, paragraphs are apparently not stored as continuous sequences of text, demonstrated here with a contrived example. (In fact, we'll prove they aren't shortly.) While Janewrite will word-wrap at the right margin, inserting text after that will wrap onto a new line, not into the next line, even if the two lines were previously entered "together." There's a speed/flexibility tradeoff here in that Janewrite doesn't have to continuously reflow paragraphs, but it also means its concept of a paragraph is entirely based on how much you select. The text can be manually reflowed, joining lines if necessary, by picking one of the paragraph justification options and selecting the text with the hand, which will then be reflowed (and, if needed, spaces inserted) to match. In fact, this is also necessary if you change the margins because Jane doesn't automatically reformat your document then either. I also promised you an example of cut and paste, so here's one using the scissors (cut). You simply pick it and, with the button down, drag it across the text you want and release the button. Note that there is no undo, though I suppose you could just immediately paste it back in. Exiting Janewrite (though not saving, because we need the accented characters to stay in the file). Now that we understand what Jane can do and how it works, let's move on to converting the files. We can extract our test files we made from our .d71 with VICE's c1541 utility and hexdump it. This got a little more difficult than it should have been: % c1541 work.d71 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> dir 0 "data#000 " 01 2a 39 "c.TESTCALC" prg 3 "l.TESTLIST" prg 4 "w.nOTE.2" prg 4 "w.TESTCONV" prg 1278 blocks free. c1541 #8> read "w.TESTCONV" ERR = 62, FILE NOT FOUND, 00, 00 cannot read `w.TESTCONV' on unit 8 invalid filename As you may have guessed, that's because the filenames, and it turns out the data in the files themselves, are stored as true ASCII, not PETSCII (indeed as they would have been on the Apple II, also), so c1541's filename conversion fails. Fortunately, the extract command will walk the entire directory and pull out all the files no matter what they're named. The documents are all regular Commodore PRoGram files with a starting address and they appear to be loaded in-place at that address into bank 1. This introduces the possibility of some delightful save-file hacks but we're not here for that today. That means we can also simply extract our previous owners' files en masse as well. I imaged their disk using my ZoomFloppy and external 1571, and since they are normal PRGs, a BAM copy of the allocated sectors is all we need to do, with one wrinkle: % d64copy -B 9 r_jane_bam.d64 [Warning] growing image file to 683 blocks 14: --*****--*****--***** 8% 15/171[Warning] read error: 0e/00: 5 14: ?******************** 12% 21/171[Warning] giving up... 14: ?******************** 15: ********************* 16: ********************* 17: ********************* 18: ******************* 19: ******************* 20: ******************* 21: ******************* 22: ****..***...***...* 100% 171/171 170 blocks copied. % c1541 r_jane_bam.d64 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> extract c1541 #8> quit Fortunately it doesn't look like the bad sector was in any of the files they cared about. Let's get an idea of the format from our test files. Janecalc files are "huge" because it looks like the entire 26x50 cell range is saved regardless of whether anything's in it or not. Looking at the directory of their data disk where they had saved a couple of sparse test spreadsheets of their own, they also were 39 blocks in length no matter how many cells were actually populated. The on-disk format is consequentially a bit wasteful: 000003a0 00 00 00 00 00 20 20 20 4a 61 6e 75 61 72 79 20 |..... January | 000003b0 20 46 65 62 72 75 61 72 79 20 20 20 20 20 4d 61 | February Ma| 000003c0 72 63 68 20 20 20 20 20 41 70 72 69 6c 20 20 20 |rch April | 000003d0 20 20 20 20 4d 61 79 20 20 20 20 20 20 4a 75 6e | May Jun| 000003e0 65 20 20 20 20 20 20 4a 75 6c 79 20 20 20 20 41 |e July A| 000003f0 75 67 75 73 74 20 53 65 70 74 65 6d 62 65 72 20 |ugust September | 00000400 20 20 4f 63 74 6f 62 65 72 20 20 4e 6f 76 65 6d | October Novem| 00000410 62 65 72 20 20 44 65 63 65 6d 62 65 72 00 00 01 |ber December...| 00000420 04 00 00 00 00 00 00 20 20 54 6f 74 61 6c 20 20 |....... Total | 00000430 20 41 76 65 72 61 67 65 20 20 20 00 00 01 04 00 | Average .....| Cardfiles are stored much more efficiently. Here's the entirety of our two cards. The fields are in the header, padded out to the fixed 12 character length, but with technically unnecessary nulls between them. A spurious "Beatles" entry looks like a buffer that was captured as part of the save, and there is also a page-aligned (counting the starting address) pad of nulls. Otherwise, the value strings look null-delimited, in the order they appear in the field list (unpopulated fields are zero-length strings). When you run out of fields, you're on the next card. % hexdump -C l.TESTLIST 00000000 00 7f 01 00 36 02 08 00 04 00 54 69 74 6c 65 20 |....6.....Title | 00000010 20 20 20 20 20 20 00 4c 65 61 64 20 41 72 74 69 | .Lead Arti| 00000020 73 74 20 00 4f 74 68 65 72 20 41 72 74 69 73 74 |st .Other Artist| 00000030 00 43 6f 6d 70 6f 73 65 72 20 20 20 20 00 43 6f |.Composer .Co| 00000040 6e 64 75 63 74 6f 72 20 20 20 00 57 68 65 72 65 |nductor .Where| 00000050 20 4b 65 70 74 20 20 00 42 6f 72 72 6f 77 65 64 | Kept .Borrowed| 00000060 20 62 79 20 00 44 61 74 65 20 4c 65 6e 74 20 20 | by .Date Lent | 00000070 20 00 00 00 ff ff 01 ff ff ff ff ff ff ff ff ff | ...............| 00000080 ff ff ff ff ff 00 01 02 03 04 05 06 07 00 01 02 |................| 00000090 03 04 05 06 07 ff ff ff ff ff ff ff ff ff ff 00 |................| 000000a0 00 54 68 65 20 42 65 61 74 6c 65 73 00 00 00 00 |.The Beatles....| 000000b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00000100 d7 09 80 60 60 ac 98 09 ae 04 cf a5 ea a9 d7 15 |...``...........| 00000110 80 ac 1d 21 d6 1c 80 60 60 ac 98 09 ae 04 cf 20 |...!...``...... | 00000120 75 0b 00 00 ac 0a 95 a5 f0 b0 a9 a6 b1 a9 a4 b1 |u...............| 00000130 a5 f1 b0 a9 a7 b1 a9 a5 b1 ac c0 08 cf 20 75 0b |............. u.| 00000140 fe ff a5 37 ae 8c ff 00 c0 d8 4b 80 cf a5 f0 b0 |...7......K.....| 00000150 a7 a6 b1 c0 d8 60 80 a5 f1 b0 a7 a7 b1 c0 d8 60 |.....`.........`| 00000160 80 cf a5 f0 b0 a7 a6 b1 00 00 09 00 01 5d f6 00 |.............]..| 00000170 00 00 00 09 00 09 00 01 66 f6 00 00 00 00 54 00 |........f.....T.| 00000180 50 00 01 b1 f6 69 64 65 20 12 00 42 00 01 6f f6 |P....ide ..B..o.| 00000190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 000001a0 00 00 00 00 00 00 00 52 65 76 6f 6c 76 65 72 00 |.......Revolver.| 000001b0 54 68 65 20 42 65 61 74 6c 65 73 00 00 4c 65 6e |The Beatles..Len| 000001c0 6e 6f 6e 2d 4d 63 43 61 72 74 6e 65 79 2d 48 61 |non-McCartney-Ha| 000001d0 72 72 69 73 6f 6e 00 47 65 6f 72 67 65 20 4d 61 |rrison.George Ma| 000001e0 72 74 69 6e 00 00 00 00 00 41 74 6f 6d 20 48 65 |rtin.....Atom He| 000001f0 61 72 74 20 4d 6f 74 68 65 72 00 50 69 6e 6b 20 |art Mother.Pink | 00000200 46 6c 6f 79 64 00 00 57 61 74 65 72 73 2d 47 69 |Floyd..Waters-Gi| 00000210 6c 6d 6f 75 72 2d 4d 61 73 6f 6e 2d 57 72 69 67 |lmour-Mason-Wrig| 00000220 68 74 2d 47 65 65 73 6f 6e 00 50 69 6e 6b 20 46 |ht-Geeson.Pink F| 00000230 6c 6f 79 64 00 00 00 00 |loyd....| 00000238 This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. The top of the screen shows the editing tools (hand pointer, arrow, scissors [cut], camera [copy] and paste jar), icons for the three core apps, and then system-wide icons for on-line help, printing, the file manager, preferences and "STOP" to globally cancel an operation. Across the bottom, beside the window maximize gadget, are tools for adjusting line justification, font style (bold, underline, bold and underline, superscript, subscript), print settings and search. I'll have more to say about all of these when we get to Jane's Commodore port. Document windows could also be moved and resized, and multiple windows from different Jane applications could be open simultaneously. If you hit Control-Reset, a Easter egg briefly flashes on-screen with the names of the Apple II programmers: Mike Lagae, John R. Haggis, Brent Iverson, Jim Poje, Peter Lee, Uwe Pleban, Allen Leibowitz and Ken Roe. Because portability to other, sometimes wildly different, systems was always contemplated, application-level components were written in a high level language and compiled for the target (allegedly an early microcomputer dialect of C), with the graphics and I/O drivers written directly in assembly. With the release of the IIc Arktronics updated the program to support Apple's mouse as well. Reviews of the Apple II version were decidedly mixed. In June 1984, InfoWorld called it "innovative" but also observed that "overbearing use of icons, some slow features, and some awkwardness mar the product, which could benefit from an emphasis on efficiency rather than gimmickry." Down under, Your Computer in November 1984 liked the simple interface and believed it would appeal to undemanding users but criticized the 236-page manual and found the mouse unreliable. "When the mouse works properly, it is good," wrote reviewer Evan McHugh, but "when it doesn't it's the pits." Likewise, although A+'s 1985 review also liked the interface and the fact that multiple windows from each module could be open at once, the magazine also felt that "the individual modules in Jane are not up to professional productivity quality." Perhaps because of the software display, Janewrite "was too slow to respond to the keystrokes of a moderately proficient typist," and Janecalc, equally slow, was also panned as "crippled" because it only supported a 24x20 maximum spreadsheet. "Thank you, Jane," quipped reviewer Danny Goodman, "[l]eave your number at the door." Jane was also billed as available for the Commodore 64, even in contemporary advertising, but COMPUTE!'s Gazette in January 1985 said it was "scheduled to be released for the Commodore 64 by the time you read this. The price is expected to be about $80 [$240]." Interviewed for the article, Marks said that Jane for the 64 was to come as a combination cartridge and disk package, where a "32K plug-in cartridge" would quickly and automatically bring up the system. The article claimed the cartridge would autoboot the applications from (now) just a single floppy plus the data disk, though I suspect the actual configuration was that the cartridge contained the applications and the disk contained the online tutorial, simultaneously furnishing a modicum of both instant access and copy protection. Notably, this version didn't come with its own mouse; Marks said they were working to support third-party mice as well as joystick and "touch pad" (presumably KoalaPad) options instead. Accounting for publishing delays, the Gazette piece would have been written several months prior in the fall of 1984 — after advertisements for the C64 version of Jane had been in multiple periodicals such as Creative Computing and Family Computing claiming you could purchase it already. In fact, the 64 version of Jane would never be released — it was simply cancelled once Commodore paid Arktronics to port it to the 128 and badged it as a Commodore product. As the 128's graphic and sound capabilities are virtually identical to the 64's in 40-column mode, save for the extra colour RAM, the port was relatively straightforward. (At the same time Commodore also rebadged the CP/M-based Perfect Software series from Thorn EMI for the 128, but this was non-exclusive, and their rebranded versions were exactly the same as sold for other CP/M-compatible systems. Goheen promised "comprehensive and professional developer support" for the new computer.) The new Jane could also be made cheaper: since the 128 is capable of autobooting a suitably coded floppy disk in drive 8, the cartridge could be dispensed with and the less expensive three-floppy scheme restored (though the grey disk was now called the "application disk"). A 128-mode 1541 fastloader is used if the new and much faster 1570 or 1571 disk drives aren't detected, though the 1571 still boots Jane noticeably faster than the fastloader. (Parenthetically, a frequent misconception is that the Z80 in the 128 does the boot sector check to start CP/M. In fact, the 8502 does that after the Z80 has already checked the Commodore key isn't down and entered 128 mode. In CP/M's case, the code in the CP/M disk boot sector instructs the 8502 to give control back to the Z80 so it can finish the boot sequence — if this weren't the case, the BASIC BOOT command wouldn't be able to start CP/M. Interestingly, 1581s booting CP/M have a special startup file to keep their own CP/M boot sector in a different location.) Otherwise, Jane 128 openly betrayed its origins on the 64: other than fastbooting with the 1571, which it mostly got for free, and support for the 128's new keys it took no advantage of any other 128 features, in particular no 2MHz support nor true VDC 80-column mode. Although the manual and box copy say using a mouse is supported, only the original 1350 mouse works, which strictly emulates a joystick. All three applications that were in the Apple II version are included. Under the hood the apps are implemented as overlays for a central kernel called JANEGM. Sadly, I didn't see any obvious credits while scanning through the disk files. The manual, which appears to have been written by a third party, insists on camelcasing the apps as JaneWrite, JaneCalc and JaneList even though the rear box copy doesn't distinguish them that way and the Apple II version and Arktronics' own advertising called them Janewrite, Janecalc and Janelist. I'll use the latter here. Commodore also included some official marketing material with the box, hawking their new 1902 monitor (with 80 column mode, which was useless for Jane), 1571 disk drive (which works well with Jane), 1670 Modem/1200 (which Jane doesn't use), 512K REU (which Jane doesn't use either) and the 1350 mouse — which in this photo is somewhat different-appearing than the released 1350/1351, and might have been a mockup. Actually, this system would have been a very nice 128 setup and very similar to the one we'll be using both for real and in VICE. Too bad Jane 128 could use relatively little of it. Both Jane and the Perfect series were demonstrated with the 128 for Winter CES 1985, though Commodore didn't announce MSRPs then for any of them at the time. It eventually emerged later that year for $49.95 [$150]; by the next year some retailers were selling it for as low as $35 [$100], compared to each of the Perfect titles then going for $45 apiece [$130]. Plus, the Perfect titles, being CP/M-based, were bland and text-based and failed to show off the C128's graphics, so Commodore ended up emphasizing Jane more in its contemporary marketing. Booting Jane 128 from the 128DCR's internal 1571 drive with my own 1902 monitor. Although its interface is similar to the Apple II's in broad strokes, Jane 128's most obvious difference is colour. However, there are numerous more subtle UI changes in this version, sufficient for it to be called "Jane 2.0" internally before release. We'll step through them here and in the next set of screenshots because they're an interesting comparison point to modern human interface practice. As with the Apple II, across the top of the screen are the various icons, or what the manual calls "pictures." These were slightly altered for the 128 from the Apple II originals. The blue icons again set the mode of the pointer ("tools") from the hand pointer, the insertion arrow, scissors (cut), camera (copy) and paste jar. The current tool is highlighted. You select a new tool by clicking on it, but you can also use the function keys (CLR/HOME, F1, F3, F5 and F7). By modern conventions Jane's tools are used backwards: instead of selecting a text range and "choosing a tool" (e.g., Command-C for copy) to operate on it, you choose a tool first and with that tool select the text range it operates on. I'll demonstrate this specific functionality in a couple instances, but any verb-object operation in Jane will work this way. (Linguistically, this makes Jane a head-initial language, while most modern GUIs are head-final.) Next to the tools are the main apps, Janewrite (now in purple), Janecalc (in green) and Janelist (in cyan), and next to them in grey are the same standard applets built into the kernel (online help, print dialogue, disk/file manager and setup). Finally, the STOP icon, now a solid red, stops the current app, and can be used to escape some screens, though not all. Unexpectedly it doesn't serve to quit Jane entirely: you just turn the computer off. Jane remembers what app is loaded and doesn't reload the overlay if you exit and re-enter it. However, unlike Jane for the Apple II, Jane 128 does not allow you to have multiple documents open simultaneously, a limitation that challenges the definition of "integrated software." In fact, of the three official Commodore productivity packages we've looked at so far, only poor abused 3-Plus-1 could do so. If you're working in one app and select another, Jane 128 will prompt you to save your work as if you'd clicked STOP, and the window will close. Given that the Apple II version managed to implement multiple documents in 64K of RAM, the Commodore 64 version — let alone the 128 — would seem to have little excuse, though I can think of two potential explanations. One is to increase the amount of memory available for any one document, which the Apple II version was indeed criticized for. The second is particular to the 128: its default memory configuration doesn't have a lot of free RAM, and it may have been judged too complicated to span or swap working sets across banks. (Some fiddling in the monitor shows that the documents simply occupy RAM in bank 1 and don't span elsewhere.) On the other hand, other 128 applications certainly do manage it, and it's possible development deadlines were a contributing factor. Let's start out with the online help, one of Marks and Kotick's fundamental design goals. Assuming you got the joystick (or 1350) plugged into the right port, there's a big honking question mark. What happens when you click on it? You get right into the online help window. The pointer snaps to the options; you can also move the pointer from option or cell to another option or cell with the CRSR keys/128 arrow keys and select it with the Commodore key. The window's yellow border is salient: any window that gives you choices to select from carries a yellow border. We'll see this again later. Incidentally, the manual is not in colour (just black, white and an accent magenta), and possibly as a result is all but totally ignorant of these UI choices or why they were made. The Apple II version's windows have a corner close gadget in the typical open square style, but this would only have made visual sense to someone familiar with the Lisa or Mac — which most Commodore users in 1985 wouldn't be. Instead, here windows you can close have a big bright red EXIT button (the ESC key can also serve this role in most cases). All icons are simply drawn onto the VIC-II high-res screen; unlike Magic Desk where pretty much everything was a sprite, the only sprite here is the pointer. Windows cannot be moved or resized, but by limiting icon and window boundaries to VIC-II 8x8 cells, drawing is fairly fast. Of course, most of the topics are on the yellow help disk (see? it matches). Jane 128, like the Apple II version, supports two disk drives, so you could have the help disk in device 9 and it would find it. The online help is pretty good, considering. It shows the icons and images as they would appear on-screen, and while they aren't live, they are accurate. The only black eye it gets is the technically truthful but functionally insufficient prompt "Press a key to continue" — the joystick or 1350 mouse button also work, and so does the ESC key to exit early, even though the exit button isn't shown. Some help items are animated and show you a demonstration, and each app has its own bespoke help. The system keeps track of what disks are where. If we start Janewrite by going to the typewriter, this blue dialogue box will appear — informational dialogue boxes always have a blue border — as it loads the overlay ... ... but then looks for a data disk, fails to find it, and asks for one. You need one even for a new document, and you can get stuck in a loop here if you don't provide one (pressing ESC just makes it try again, and clicking on the STOP icon doesn't do anything). You could put in the black data disk it comes with, but this one contains our generous donor's files, so we'll just give a blank disk image to VICE instead which Jane will offer to format. When creating a new data disk in VICE, if a 1571 is detected then Jane will want a real .d71 with the full available space, not a .d64, as it will then expect it can format both sides of the virtual disk. However, all of the Jane original disks, including the black one, are formatted single-sided for the 1541 since many early 128 owners would still be using one. The other way you can do this is from the disk icon. As these icons are in grey, so are their windows (except, curiously, help, but I can see how a yellow question mark would have looked bad against a white background), suggesting a global applet served by the central Jane kernel. The disk icon brings up a basic file manager allowing you to make duplicate backup files (but only to the same disk), rename or delete them, or create a new disk. The copy option is the default and is pre-selected when the window opens, which is irritating, because our modern reflexive habit of selecting the file first and then the action will cause an immediate copy to occur before you get the chance to click anything else. I don't think this was just me: there were several spurious duplicate files on the original black data disk I suspect for the same reason. If files are present on the disk, they will appear with their names and a filetype letter (W, C or L for Janewrite, Janecalc or Janelist respectively). Notice the slightly misshapen scrolling arrows, which were nice and clean on the Apple. We'll provide the .d71 to Jane here. Windows warning you about data loss have a red border. Interestingly, it provides both a No button and the exit button, which both do the same thing: abort back to the file manager. Jane seems unable to distinguish between an unformatted disk and a completely absent one, and will (fruitlessly) attempt to format an empty drive. Formatting in progress. The time estimates are surprisingly not far off. With our disk formatted, let's return to Janewrite at the end, since this will be the majority of the documents we'll convert. Instead, we'll start with the spreadsheet, Janecalc. Whenever any of the three built-in applications starts up, and once Jane has located the data disk, a file selector (in grey) appears. There are no spreadsheets ("worksheets") on our freshly formatted disk, so we click the NEW icon. Entering the new filename (blue window). You may have noticed that the red and blue windows are all invariably the same size regardless of contents and any active controls they contain. This probably simplified rendering quite a bit. Because Janecalc is green, its content window border is likewise green, and because Jane 128 doesn't multitask between the applications, it takes up the entirety of the screen. Two templates are provided, along with a roll-your-own option. We'll go with the Home Budget for illustration. The Home Budget template pulls up a simplified home budget by month which you can fill in. Jane supports 40, 64 and 80 column modes, all rendered in software on the VIC-IIe 320x200 display (not with the VDC's 640x200 display), but by default it uses 40. (I'll get to this in more detail in the word processor.) Along the bottom are various operators and the extent of the formula functions available (hardly competition for the Convergent WorkSlate). They can be selected with the pointer in lieu of text entry, which makes them quite discoverable, but in practice it's simply faster to type them. No other functions are implemented. Since the content window cannot be resized, the maximize gadget from the Apple II version became obviously useless and was removed. By using the joystick/mouse you can use the hand to point to a cell and then, with the hand pointing to it, just start typing text or a number. The cursor keys will move the pointer from cell to cell for you, though they will not exit the content area. If you click or otherwise select the cell with the hand, however, Jane considers this an attempt to construct a formula, which again would be frustrating to modern audiences used to, say, Microsoft Excel. But to edit it again, you pick the insert tool instead of the hand, and this time you must select the cell to type in it. Motion around the content area in all three applications is accomplished using multiple small icons in the bottom and right window borders. The "half full" icon pushes it all the way to the outer edge in that direction, while the double and single arrows move the viewport by large leaps and small leaps respectively. There are no thumbs to show relative location, but you can click anywhere along the scroll area for a proportionately "medium" jump if you like. You can also use CTRL-CRSR/CTRL-arrow keys. Even in 40-column mode, and even given that the scroll doesn't animate and just snaps to the new position, scrolling is agonizingly slow and multiple clicks on the scroll controls invariably overshoot. Putting it in 80 column mode doesn't just give you more on the screen — it also means you don't need to endure as many pauses trying to move around. Again, I'll have more to say about font sizes when we get to Janewrite. Unique to Janecalc, the scrolling actually wraps. Worksheets remain limited to 26 columns (A-Z), as in the Apple II version, but now up to 50 rows are allowed. Still, this wouldn't have been sufficient for anything larger than a modest small business, even in 1985. Formulas are approximately VisiCalc-style using A1 absolute notation for cells, though there are no sigils for functions (not that there's very many) and ranges are delimited by colons. Most basic math operators and parentheses are available. Here, we'll get a sum of this row ... ... and then manually calculate an average by dividing the sum by the count of populated rows (we could also just use avg). The template includes this at the bottom, but this shows you how formula entry worked. As we add data to dependent cells the sheets recalculate but circular references are not handled, though in fairness this capability was still not common in small spreadsheet applications. We'll go to Janelist next. When we do so, a red window pops up to prompt us to save our work. Switching to Janelist. Creating our new list. All very consistent (the file manager and requester seem to be part of the Jane kernel). Janelist, in fairness, never purported to be a database in any incarnation and acts more like a cardfile; even the manual merely refers to it as a "list keeper." Like Janecalc it comes with templates, though Janelist supports a substantial number more. For variety I'll try to enter some of my very large CD collection, because I'm one of those people (vinyl is for art, CD is for listening). The list comes up as fillable fields. There may be up to 15 field names up to 12 characters long. If you choose to create your own, then Jane will step you through entering the field names. That's about all the customization you can do. The values for those fields can span multiple lines, which is what the viewport scrolling is for — you use the icons at the bottom to advance through individual cards. Incidentally, Atom Heart Mother is Pink Floyd's finest album and I will tolerate no disagreement. The icon that looks like cards being pulled out suggests how to make a query (the magnifying glass icon, or possibly the funnel icon to denote a filter, wasn't universal at this point). Because it gives you choices, it's yellow, remember? The two OK buttons do different things. The top one filters cards to the query requested, but the bottom one undoes any query. You can query on top of queries for a primitive sort of logical-AND. Partial word searches are supported. For example, here is the second best Beatles album — the best is, of course, Abbey Road. Since we searched for the Beatles, when we run out of Beatles CDs, nothing more turns up from my formidable library. It is also possible to sort cards, in which case they appear in that order instead. You cannot sort on multiple fields, and you can't sort descending. Finally, Janewrite, where we will spend the rest of our time — and where apparently most of Jane's users spent theirs, including our previous owners. I've got a prefab file here I constructed while playing around to explore the file format, so this time we'll load a document instead of entering one, just to show you what that looks like from the file requester. Janewrite is IMHO the most polished and competent of the three apps, and it feels like the most development time was spent on it, too. It also shows what the Jane font renderer is capable of: although non-proportional and only a single typeface, you can see bold, underline, bold and underlined, superscript, and subscript are all possible. The bottom shows left, right, centre and full justification options, done per line, plus the font options, and then search (this time with a magnifying glass) and page layout. These icons are larger and more detailed than the Apple's. As with other parts of the UI, text attributes are set verb-initial, i.e., you would choose the desired style, then the insertion tool, then highlight the range of text and finally release the button (or, annoyingly, wait, which makes fine adjustments harder than they should be). Notice that there is an explicit bold-and-underline option, instead of using the separate bold and underline options in combination: that's because you can't make superscripted or subscripted text bold or underlined. The top of the content area shows the ruler — in characters, not inches — and margin stops and the single paragraph indent stop, which you can drag to change them. Interestingly, the ruler seems to be new for Jane 128: no screenshot for the Apple II version demonstrates one. Janewrite is also capable of a modicum of WYSIWYG if you select the 80 column option. This and other options come from the "computer" icon, which acts as a preference panel. Preferences are saved to the application disk and are global to all three applications. Despite this presenting a choice window (ordinarily yellow), Jane seems to treat it as a global window from the kernel, so it's grey. The bottom set of options are specifically for configuring the printer. Print output is generated with control codes and text only; Jane does not generate graphic sequences, so what actually shows up on the page depends on what your printer actually supports. The default middle print size option corresponds to 80 columns (more accurately, the default or 12cpi font size), while the small font corresponds to the condensed 15cpi and/or 132 column option available on some printers, and the large font corresponds to the 60 or 64-column (e.g., 10cpi) option also only available on some printers — not the expanded double wide printing option more typical of Commodore-specific devices. You could also select between regular fanfold tractor feed or plain paper, as well as the Near Letter Quality print option some printers supported, and finally the printer itself. There was built-in support for the MPS-801 (i.e., 1525), MPS-802 (i.e., 1526), 1101, "Oki" (generic Okidata), and generic "Epson" printers, assuming they were connected somehow to the IEC serial such as through a third-party parallel printer interface. These printer drivers varied wildly in their capabilities: the 1525/MPS-801 "driver" supported almost nothing except basic text, while the generic Okidata and Epson drivers supported nearly everything that Jane could generate. The "OTHER" driver is customizeable, a neat idea, if a little clumsy. A BASIC program called BUILDPRT on the grey disk allows you to populate it with your printer's control codes. Control sequences up to three characters long were supported. You would enter these from the manual, it would save them to disk, and then you could use the custom driver inside Jane. The topmost options affect the appearance of Jane. You can choose from three font sizes, all non-proportional, corresponding to 40, 64 or 80 column text. Confusingly, the 80-column option is the last when it's the middle option for printing. (The Apple II version likely didn't support 80 column text due to its smaller hi-res horizontal width.) Pointer speed and the "beep" Jane makes when you select options are also configurable. Here's how it looks in 80 columns, using the typical "soft 80" approach on the 64 which is more or less legible, at least on a composite display. As there are no colours in the content area, there is no risk of colour clash. This is probably the most useful view in Janewrite. The 64-column view, by contrast, is probably the least useful. The 40-column view is the most legible and 2:1 the size of a typical 80-column line, so it's easy to mentally grok page layout that way, but the 64-column view is odd enough to end up being the worst of both worlds. An interesting feature of Janewrite are the accented characters, which was not frequently seen on home computer-class word processors, as explained by the on-line help. Janewrite treats them as diacritics, and they can even be applied to letters that wouldn't ordinarily use them (because who knows? some language might), such as the grave and acute accents on the n as well as the more typical tilde. In fact, you can apply them to any character, even punctuation. However, the use of the up arrow to indicate a circumflex means there's no way you can type a literal caret into your document, and while a macron would have been nice, omitting the umlaut seems a greater fault. The decorators are also rather hard to distinguish in 80 columns, so Spanish users of Juana 128 might want to go to cuarenta column mode to mirar mejor. Janewrite also has basic find and/or find-and-replace, and a small pane appears below the content area when it's active. There are also decent page layout options, including setting both a per-page title and its position, adding a page number and its position, and margins, number of copies and starting page, though the last two would seem more appropriate for a print dialogue than a page layout one. Note that Jane will always print a 10-space left margin, so an 80-column printed line can be no longer than 70 characters, and this is indeed the maximum width Janewrite will support. However, paragraphs are apparently not stored as continuous sequences of text, demonstrated here with a contrived example. (In fact, we'll prove they aren't shortly.) While Janewrite will word-wrap at the right margin, inserting text after that will wrap onto a new line, not into the next line, even if the two lines were previously entered "together." There's a speed/flexibility tradeoff here in that Janewrite doesn't have to continuously reflow paragraphs, but it also means its concept of a paragraph is entirely based on how much you select. The text can be manually reflowed, joining lines if necessary, by picking one of the paragraph justification options and selecting the text with the hand, which will then be reflowed (and, if needed, spaces inserted) to match. In fact, this is also necessary if you change the margins because Jane doesn't automatically reformat your document then either. I also promised you an example of cut and paste, so here's one using the scissors (cut). You simply pick it and, with the button down, drag it across the text you want and release the button. Note that there is no undo, though I suppose you could just immediately paste it back in. Exiting Janewrite (though not saving, because we need the accented characters to stay in the file). Now that we understand what Jane can do and how it works, let's move on to converting the files. We can extract our test files we made from our .d71 with VICE's c1541 utility and hexdump it. This got a little more difficult than it should have been: % c1541 work.d71 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> dir 0 "data#000 " 01 2a 39 "c.TESTCALC" prg 3 "l.TESTLIST" prg 4 "w.nOTE.2" prg 4 "w.TESTCONV" prg 1278 blocks free. c1541 #8> read "w.TESTCONV" ERR = 62, FILE NOT FOUND, 00, 00 cannot read `w.TESTCONV' on unit 8 invalid filename As you may have guessed, that's because the filenames, and it turns out the data in the files themselves, are stored as true ASCII, not PETSCII (indeed as they would have been on the Apple II, also), so c1541's filename conversion fails. Fortunately, the extract command will walk the entire directory and pull out all the files no matter what they're named. The documents are all regular Commodore PRoGram files with a starting address and they appear to be loaded in-place at that address into bank 1. This introduces the possibility of some delightful save-file hacks but we're not here for that today. That means we can also simply extract our previous owners' files en masse as well. I imaged their disk using my ZoomFloppy and external 1571, and since they are normal PRGs, a BAM copy of the allocated sectors is all we need to do, with one wrinkle: % d64copy -B 9 r_jane_bam.d64 [Warning] growing image file to 683 blocks 14: --*****--*****--***** 8% 15/171[Warning] read error: 0e/00: 5 14: ?******************** 12% 21/171[Warning] giving up... 14: ?******************** 15: ********************* 16: ********************* 17: ********************* 18: ******************* 19: ******************* 20: ******************* 21: ******************* 22: ****..***...***...* 100% 171/171 170 blocks copied. % c1541 r_jane_bam.d64 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> extract c1541 #8> quit Fortunately it doesn't look like the bad sector was in any of the files they cared about. Let's get an idea of the format from our test files. Janecalc files are "huge" because it looks like the entire 26x50 cell range is saved regardless of whether anything's in it or not. Looking at the directory of their data disk where they had saved a couple of sparse test spreadsheets of their own, they also were 39 blocks in length no matter how many cells were actually populated. The on-disk format is consequentially a bit wasteful: 000003a0 00 00 00 00 00 20 20 20 4a 61 6e 75 61 72 79 20 |..... January | 000003b0 20 46 65 62 72 75 61 72 79 20 20 20 20 20 4d 61 | February Ma| 000003c0 72 63 68 20 20 20 20 20 41 70 72 69 6c 20 20 20 |rch April | 000003d0 20 20 20 20 4d 61 79 20 20 20 20 20 20 4a 75 6e | May Jun| 000003e0 65 20 20 20 20 20 20 4a 75 6c 79 20 20 20 20 41 |e July A| 000003f0 75 67 75 73 74 20 53 65 70 74 65 6d 62 65 72 20 |ugust September | 00000400 20 20 4f 63 74 6f 62 65 72 20 20 4e 6f 76 65 6d | October Novem| 00000410 62 65 72 20 20 44 65 63 65 6d 62 65 72 00 00 01 |ber December...| 00000420 04 00 00 00 00 00 00 20 20 54 6f 74 61 6c 20 20 |....... Total | 00000430 20 41 76 65 72 61 67 65 20 20 20 00 00 01 04 00 | Average .....| Cardfiles are stored much more efficiently. Here's the entirety of our two cards. The fields are in the header, padded out to the fixed 12 character length, but with technically unnecessary nulls between them. A spurious "Beatles" entry looks like a buffer that was captured as part of the save, and there is also a page-aligned (counting the starting address) pad of nulls. Otherwise, the value strings look null-delimited, in the order they appear in the field list (unpopulated fields are zero-length strings). When you run out of fields, you're on the next card. % hexdump -C l.TESTLIST 00000000 00 7f 01 00 36 02 08 00 04 00 54 69 74 6c 65 20 |....6.....Title | 00000010 20 20 20 20 20 20 00 4c 65 61 64 20 41 72 74 69 | .Lead Arti| 00000020 73 74 20 00 4f 74 68 65 72 20 41 72 74 69 73 74 |st .Other Artist| 00000030 00 43 6f 6d 70 6f 73 65 72 20 20 20 20 00 43 6f |.Composer .Co| 00000040 6e 64 75 63 74 6f 72 20 20 20 00 57 68 65 72 65 |nductor .Where| 00000050 20 4b 65 70 74 20 20 00 42 6f 72 72 6f 77 65 64 | Kept .Borrowed| 00000060 20 62 79 20 00 44 61 74 65 20 4c 65 6e 74 20 20 | by .Date Lent | 00000070 20 00 00 00 ff ff 01 ff ff ff ff ff ff ff ff ff | ...............| 00000080 ff ff ff ff ff 00 01 02 03 04 05 06 07 00 01 02 |................| 00000090 03 04 05 06 07 ff ff ff ff ff ff ff ff ff ff 00 |................| 000000a0 00 54 68 65 20 42 65 61 74 6c 65 73 00 00 00 00 |.The Beatles....| 000000b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00000100 d7 09 80 60 60 ac 98 09 ae 04 cf a5 ea a9 d7 15 |...``...........| 00000110 80 ac 1d 21 d6 1c 80 60 60 ac 98 09 ae 04 cf 20 |...!...``...... | 00000120 75 0b 00 00 ac 0a 95 a5 f0 b0 a9 a6 b1 a9 a4 b1 |u...............| 00000130 a5 f1 b0 a9 a7 b1 a9 a5 b1 ac c0 08 cf 20 75 0b |............. u.| 00000140 fe ff a5 37 ae 8c ff 00 c0 d8 4b 80 cf a5 f0 b0 |...7......K.....| 00000150 a7 a6 b1 c0 d8 60 80 a5 f1 b0 a7 a7 b1 c0 d8 60 |.....`.........`| 00000160 80 cf a5 f0 b0 a7 a6 b1 00 00 09 00 01 5d f6 00 |.............]..| 00000170 00 00 00 09 00 09 00 01 66 f6 00 00 00 00 54 00 |........f.....T.| 00000180 50 00 01 b1 f6 69 64 65 20 12 00 42 00 01 6f f6 |P....ide ..B..o.| 00000190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 000001a0 00 00 00 00 00 00 00 52 65 76 6f 6c 76 65 72 00 |.......Revolver.| 000001b0 54 68 65 20 42 65 61 74 6c 65 73 00 00 4c 65 6e |The Beatles..Len| 000001c0 6e 6f 6e 2d 4d 63 43 61 72 74 6e 65 79 2d 48 61 |non-McCartney-Ha| 000001d0 72 72 69 73 6f 6e 00 47 65 6f 72 67 65 20 4d 61 |rrison.George Ma| 000001e0 72 74 69 6e 00 00 00 00 00 41 74 6f 6d 20 48 65 |rtin.....Atom He| 000001f0 61 72 74 20 4d 6f 74 68 65 72 00 50 69 6e 6b 20 |art Mother.Pink | 00000200 46 6c 6f 79 64 00 00 57 61 74 65 72 73 2d 47 69 |Floyd..Waters-Gi| 00000210 6c 6d 6f 75 72 2d 4d 61 73 6f 6e 2d 57 72 69 67 |lmour-Mason-Wrig| 00000220 68 74 2d 47 65 65 73 6f 6e 00 50 69 6e 6b 20 46 |ht-Geeson.Pink F| 00000230 6c 6f 79 64 00 00 00 00 |loyd....| 00000238 This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. (Parenthetically, a frequent misconception is that the Z80 in the 128 does the boot sector check to start CP/M. In fact, the 8502 does that after the Z80 has already checked the Commodore key isn't down and entered 128 mode. In CP/M's case, the code in the CP/M disk boot sector instructs the 8502 to give control back to the Z80 so it can finish the boot sequence — if this weren't the case, the BASIC BOOT command wouldn't be able to start CP/M. Interestingly, 1581s booting CP/M have a special startup file to keep their own CP/M boot sector in a different location.) Otherwise, Jane 128 openly betrayed its origins on the 64: other than fastbooting with the 1571, which it mostly got for free, and support for the 128's new keys it took no advantage of any other 128 features, in particular no 2MHz support nor true VDC 80-column mode. Although the manual and box copy say using a mouse is supported, only the original 1350 mouse works, which strictly emulates a joystick. All three applications that were in the Apple II version are included. Under the hood the apps are implemented as overlays for a central kernel called JANEGM. Sadly, I didn't see any obvious credits while scanning through the disk files. The manual, which appears to have been written by a third party, insists on camelcasing the apps as JaneWrite, JaneCalc and JaneList even though the rear box copy doesn't distinguish them that way and the Apple II version and Arktronics' own advertising called them Janewrite, Janecalc and Janelist. I'll use the latter here. Commodore also included some official marketing material with the box, hawking their new 1902 monitor (with 80 column mode, which was useless for Jane), 1571 disk drive (which works well with Jane), 1670 Modem/1200 (which Jane doesn't use), 512K REU (which Jane doesn't use either) and the 1350 mouse — which in this photo is somewhat different-appearing than the released 1350/1351, and might have been a mockup. Actually, this system would have been a very nice 128 setup and very similar to the one we'll be using both for real and in VICE. Too bad Jane 128 could use relatively little of it. Both Jane and the Perfect series were demonstrated with the 128 for Winter CES 1985, though Commodore didn't announce MSRPs then for any of them at the time. It eventually emerged later that year for $49.95 [$150]; by the next year some retailers were selling it for as low as $35 [$100], compared to each of the Perfect titles then going for $45 apiece [$130]. Plus, the Perfect titles, being CP/M-based, were bland and text-based and failed to show off the C128's graphics, so Commodore ended up emphasizing Jane more in its contemporary marketing. Booting Jane 128 from the 128DCR's internal 1571 drive with my own 1902 monitor. Although its interface is similar to the Apple II's in broad strokes, Jane 128's most obvious difference is colour. However, there are numerous more subtle UI changes in this version, sufficient for it to be called "Jane 2.0" internally before release. We'll step through them here and in the next set of screenshots because they're an interesting comparison point to modern human interface practice. As with the Apple II, across the top of the screen are the various icons, or what the manual calls "pictures." These were slightly altered for the 128 from the Apple II originals. The blue icons again set the mode of the pointer ("tools") from the hand pointer, the insertion arrow, scissors (cut), camera (copy) and paste jar. The current tool is highlighted. You select a new tool by clicking on it, but you can also use the function keys (CLR/HOME, F1, F3, F5 and F7). By modern conventions Jane's tools are used backwards: instead of selecting a text range and "choosing a tool" (e.g., Command-C for copy) to operate on it, you choose a tool first and with that tool select the text range it operates on. I'll demonstrate this specific functionality in a couple instances, but any verb-object operation in Jane will work this way. (Linguistically, this makes Jane a head-initial language, while most modern GUIs are head-final.) Next to the tools are the main apps, Janewrite (now in purple), Janecalc (in green) and Janelist (in cyan), and next to them in grey are the same standard applets built into the kernel (online help, print dialogue, disk/file manager and setup). Finally, the STOP icon, now a solid red, stops the current app, and can be used to escape some screens, though not all. Unexpectedly it doesn't serve to quit Jane entirely: you just turn the computer off. Jane remembers what app is loaded and doesn't reload the overlay if you exit and re-enter it. However, unlike Jane for the Apple II, Jane 128 does not allow you to have multiple documents open simultaneously, a limitation that challenges the definition of "integrated software." In fact, of the three official Commodore productivity packages we've looked at so far, only poor abused 3-Plus-1 could do so. If you're working in one app and select another, Jane 128 will prompt you to save your work as if you'd clicked STOP, and the window will close. Given that the Apple II version managed to implement multiple documents in 64K of RAM, the Commodore 64 version — let alone the 128 — would seem to have little excuse, though I can think of two potential explanations. One is to increase the amount of memory available for any one document, which the Apple II version was indeed criticized for. The second is particular to the 128: its default memory configuration doesn't have a lot of free RAM, and it may have been judged too complicated to span or swap working sets across banks. (Some fiddling in the monitor shows that the documents simply occupy RAM in bank 1 and don't span elsewhere.) On the other hand, other 128 applications certainly do manage it, and it's possible development deadlines were a contributing factor. Let's start out with the online help, one of Marks and Kotick's fundamental design goals. Assuming you got the joystick (or 1350) plugged into the right port, there's a big honking question mark. What happens when you click on it? You get right into the online help window. The pointer snaps to the options; you can also move the pointer from option or cell to another option or cell with the CRSR keys/128 arrow keys and select it with the Commodore key. The window's yellow border is salient: any window that gives you choices to select from carries a yellow border. We'll see this again later. Incidentally, the manual is not in colour (just black, white and an accent magenta), and possibly as a result is all but totally ignorant of these UI choices or why they were made. The Apple II version's windows have a corner close gadget in the typical open square style, but this would only have made visual sense to someone familiar with the Lisa or Mac — which most Commodore users in 1985 wouldn't be. Instead, here windows you can close have a big bright red EXIT button (the ESC key can also serve this role in most cases). All icons are simply drawn onto the VIC-II high-res screen; unlike Magic Desk where pretty much everything was a sprite, the only sprite here is the pointer. Windows cannot be moved or resized, but by limiting icon and window boundaries to VIC-II 8x8 cells, drawing is fairly fast. Of course, most of the topics are on the yellow help disk (see? it matches). Jane 128, like the Apple II version, supports two disk drives, so you could have the help disk in device 9 and it would find it. The online help is pretty good, considering. It shows the icons and images as they would appear on-screen, and while they aren't live, they are accurate. The only black eye it gets is the technically truthful but functionally insufficient prompt "Press a key to continue" — the joystick or 1350 mouse button also work, and so does the ESC key to exit early, even though the exit button isn't shown. Some help items are animated and show you a demonstration, and each app has its own bespoke help. The system keeps track of what disks are where. If we start Janewrite by going to the typewriter, this blue dialogue box will appear — informational dialogue boxes always have a blue border — as it loads the overlay ... ... but then looks for a data disk, fails to find it, and asks for one. You need one even for a new document, and you can get stuck in a loop here if you don't provide one (pressing ESC just makes it try again, and clicking on the STOP icon doesn't do anything). You could put in the black data disk it comes with, but this one contains our generous donor's files, so we'll just give a blank disk image to VICE instead which Jane will offer to format. When creating a new data disk in VICE, if a 1571 is detected then Jane will want a real .d71 with the full available space, not a .d64, as it will then expect it can format both sides of the virtual disk. However, all of the Jane original disks, including the black one, are formatted single-sided for the 1541 since many early 128 owners would still be using one. The other way you can do this is from the disk icon. As these icons are in grey, so are their windows (except, curiously, help, but I can see how a yellow question mark would have looked bad against a white background), suggesting a global applet served by the central Jane kernel. The disk icon brings up a basic file manager allowing you to make duplicate backup files (but only to the same disk), rename or delete them, or create a new disk. The copy option is the default and is pre-selected when the window opens, which is irritating, because our modern reflexive habit of selecting the file first and then the action will cause an immediate copy to occur before you get the chance to click anything else. I don't think this was just me: there were several spurious duplicate files on the original black data disk I suspect for the same reason. If files are present on the disk, they will appear with their names and a filetype letter (W, C or L for Janewrite, Janecalc or Janelist respectively). Notice the slightly misshapen scrolling arrows, which were nice and clean on the Apple. We'll provide the .d71 to Jane here. Windows warning you about data loss have a red border. Interestingly, it provides both a No button and the exit button, which both do the same thing: abort back to the file manager. Jane seems unable to distinguish between an unformatted disk and a completely absent one, and will (fruitlessly) attempt to format an empty drive. Formatting in progress. The time estimates are surprisingly not far off. With our disk formatted, let's return to Janewrite at the end, since this will be the majority of the documents we'll convert. Instead, we'll start with the spreadsheet, Janecalc. Whenever any of the three built-in applications starts up, and once Jane has located the data disk, a file selector (in grey) appears. There are no spreadsheets ("worksheets") on our freshly formatted disk, so we click the NEW icon. Entering the new filename (blue window). You may have noticed that the red and blue windows are all invariably the same size regardless of contents and any active controls they contain. This probably simplified rendering quite a bit. Because Janecalc is green, its content window border is likewise green, and because Jane 128 doesn't multitask between the applications, it takes up the entirety of the screen. Two templates are provided, along with a roll-your-own option. We'll go with the Home Budget for illustration. The Home Budget template pulls up a simplified home budget by month which you can fill in. Jane supports 40, 64 and 80 column modes, all rendered in software on the VIC-IIe 320x200 display (not with the VDC's 640x200 display), but by default it uses 40. (I'll get to this in more detail in the word processor.) Along the bottom are various operators and the extent of the formula functions available (hardly competition for the Convergent WorkSlate). They can be selected with the pointer in lieu of text entry, which makes them quite discoverable, but in practice it's simply faster to type them. No other functions are implemented. Since the content window cannot be resized, the maximize gadget from the Apple II version became obviously useless and was removed. By using the joystick/mouse you can use the hand to point to a cell and then, with the hand pointing to it, just start typing text or a number. The cursor keys will move the pointer from cell to cell for you, though they will not exit the content area. If you click or otherwise select the cell with the hand, however, Jane considers this an attempt to construct a formula, which again would be frustrating to modern audiences used to, say, Microsoft Excel. But to edit it again, you pick the insert tool instead of the hand, and this time you must select the cell to type in it. Motion around the content area in all three applications is accomplished using multiple small icons in the bottom and right window borders. The "half full" icon pushes it all the way to the outer edge in that direction, while the double and single arrows move the viewport by large leaps and small leaps respectively. There are no thumbs to show relative location, but you can click anywhere along the scroll area for a proportionately "medium" jump if you like. You can also use CTRL-CRSR/CTRL-arrow keys. Even in 40-column mode, and even given that the scroll doesn't animate and just snaps to the new position, scrolling is agonizingly slow and multiple clicks on the scroll controls invariably overshoot. Putting it in 80 column mode doesn't just give you more on the screen — it also means you don't need to endure as many pauses trying to move around. Again, I'll have more to say about font sizes when we get to Janewrite. Unique to Janecalc, the scrolling actually wraps. Worksheets remain limited to 26 columns (A-Z), as in the Apple II version, but now up to 50 rows are allowed. Still, this wouldn't have been sufficient for anything larger than a modest small business, even in 1985. Formulas are approximately VisiCalc-style using A1 absolute notation for cells, though there are no sigils for functions (not that there's very many) and ranges are delimited by colons. Most basic math operators and parentheses are available. Here, we'll get a sum of this row ... ... and then manually calculate an average by dividing the sum by the count of populated rows (we could also just use avg). The template includes this at the bottom, but this shows you how formula entry worked. As we add data to dependent cells the sheets recalculate but circular references are not handled, though in fairness this capability was still not common in small spreadsheet applications. We'll go to Janelist next. When we do so, a red window pops up to prompt us to save our work. Switching to Janelist. Creating our new list. All very consistent (the file manager and requester seem to be part of the Jane kernel). Janelist, in fairness, never purported to be a database in any incarnation and acts more like a cardfile; even the manual merely refers to it as a "list keeper." Like Janecalc it comes with templates, though Janelist supports a substantial number more. For variety I'll try to enter some of my very large CD collection, because I'm one of those people (vinyl is for art, CD is for listening). The list comes up as fillable fields. There may be up to 15 field names up to 12 characters long. If you choose to create your own, then Jane will step you through entering the field names. That's about all the customization you can do. The values for those fields can span multiple lines, which is what the viewport scrolling is for — you use the icons at the bottom to advance through individual cards. Incidentally, Atom Heart Mother is Pink Floyd's finest album and I will tolerate no disagreement. The icon that looks like cards being pulled out suggests how to make a query (the magnifying glass icon, or possibly the funnel icon to denote a filter, wasn't universal at this point). Because it gives you choices, it's yellow, remember? The two OK buttons do different things. The top one filters cards to the query requested, but the bottom one undoes any query. You can query on top of queries for a primitive sort of logical-AND. Partial word searches are supported. For example, here is the second best Beatles album — the best is, of course, Abbey Road. Since we searched for the Beatles, when we run out of Beatles CDs, nothing more turns up from my formidable library. It is also possible to sort cards, in which case they appear in that order instead. You cannot sort on multiple fields, and you can't sort descending. Finally, Janewrite, where we will spend the rest of our time — and where apparently most of Jane's users spent theirs, including our previous owners. I've got a prefab file here I constructed while playing around to explore the file format, so this time we'll load a document instead of entering one, just to show you what that looks like from the file requester. Janewrite is IMHO the most polished and competent of the three apps, and it feels like the most development time was spent on it, too. It also shows what the Jane font renderer is capable of: although non-proportional and only a single typeface, you can see bold, underline, bold and underlined, superscript, and subscript are all possible. The bottom shows left, right, centre and full justification options, done per line, plus the font options, and then search (this time with a magnifying glass) and page layout. These icons are larger and more detailed than the Apple's. As with other parts of the UI, text attributes are set verb-initial, i.e., you would choose the desired style, then the insertion tool, then highlight the range of text and finally release the button (or, annoyingly, wait, which makes fine adjustments harder than they should be). Notice that there is an explicit bold-and-underline option, instead of using the separate bold and underline options in combination: that's because you can't make superscripted or subscripted text bold or underlined. The top of the content area shows the ruler — in characters, not inches — and margin stops and the single paragraph indent stop, which you can drag to change them. Interestingly, the ruler seems to be new for Jane 128: no screenshot for the Apple II version demonstrates one. Janewrite is also capable of a modicum of WYSIWYG if you select the 80 column option. This and other options come from the "computer" icon, which acts as a preference panel. Preferences are saved to the application disk and are global to all three applications. Despite this presenting a choice window (ordinarily yellow), Jane seems to treat it as a global window from the kernel, so it's grey. The bottom set of options are specifically for configuring the printer. Print output is generated with control codes and text only; Jane does not generate graphic sequences, so what actually shows up on the page depends on what your printer actually supports. The default middle print size option corresponds to 80 columns (more accurately, the default or 12cpi font size), while the small font corresponds to the condensed 15cpi and/or 132 column option available on some printers, and the large font corresponds to the 60 or 64-column (e.g., 10cpi) option also only available on some printers — not the expanded double wide printing option more typical of Commodore-specific devices. You could also select between regular fanfold tractor feed or plain paper, as well as the Near Letter Quality print option some printers supported, and finally the printer itself. There was built-in support for the MPS-801 (i.e., 1525), MPS-802 (i.e., 1526), 1101, "Oki" (generic Okidata), and generic "Epson" printers, assuming they were connected somehow to the IEC serial such as through a third-party parallel printer interface. These printer drivers varied wildly in their capabilities: the 1525/MPS-801 "driver" supported almost nothing except basic text, while the generic Okidata and Epson drivers supported nearly everything that Jane could generate. The "OTHER" driver is customizeable, a neat idea, if a little clumsy. A BASIC program called BUILDPRT on the grey disk allows you to populate it with your printer's control codes. Control sequences up to three characters long were supported. You would enter these from the manual, it would save them to disk, and then you could use the custom driver inside Jane. The topmost options affect the appearance of Jane. You can choose from three font sizes, all non-proportional, corresponding to 40, 64 or 80 column text. Confusingly, the 80-column option is the last when it's the middle option for printing. (The Apple II version likely didn't support 80 column text due to its smaller hi-res horizontal width.) Pointer speed and the "beep" Jane makes when you select options are also configurable. Here's how it looks in 80 columns, using the typical "soft 80" approach on the 64 which is more or less legible, at least on a composite display. As there are no colours in the content area, there is no risk of colour clash. This is probably the most useful view in Janewrite. The 64-column view, by contrast, is probably the least useful. The 40-column view is the most legible and 2:1 the size of a typical 80-column line, so it's easy to mentally grok page layout that way, but the 64-column view is odd enough to end up being the worst of both worlds. An interesting feature of Janewrite are the accented characters, which was not frequently seen on home computer-class word processors, as explained by the on-line help. Janewrite treats them as diacritics, and they can even be applied to letters that wouldn't ordinarily use them (because who knows? some language might), such as the grave and acute accents on the n as well as the more typical tilde. In fact, you can apply them to any character, even punctuation. However, the use of the up arrow to indicate a circumflex means there's no way you can type a literal caret into your document, and while a macron would have been nice, omitting the umlaut seems a greater fault. The decorators are also rather hard to distinguish in 80 columns, so Spanish users of Juana 128 might want to go to cuarenta column mode to mirar mejor. Janewrite also has basic find and/or find-and-replace, and a small pane appears below the content area when it's active. There are also decent page layout options, including setting both a per-page title and its position, adding a page number and its position, and margins, number of copies and starting page, though the last two would seem more appropriate for a print dialogue than a page layout one. Note that Jane will always print a 10-space left margin, so an 80-column printed line can be no longer than 70 characters, and this is indeed the maximum width Janewrite will support. However, paragraphs are apparently not stored as continuous sequences of text, demonstrated here with a contrived example. (In fact, we'll prove they aren't shortly.) While Janewrite will word-wrap at the right margin, inserting text after that will wrap onto a new line, not into the next line, even if the two lines were previously entered "together." There's a speed/flexibility tradeoff here in that Janewrite doesn't have to continuously reflow paragraphs, but it also means its concept of a paragraph is entirely based on how much you select. The text can be manually reflowed, joining lines if necessary, by picking one of the paragraph justification options and selecting the text with the hand, which will then be reflowed (and, if needed, spaces inserted) to match. In fact, this is also necessary if you change the margins because Jane doesn't automatically reformat your document then either. I also promised you an example of cut and paste, so here's one using the scissors (cut). You simply pick it and, with the button down, drag it across the text you want and release the button. Note that there is no undo, though I suppose you could just immediately paste it back in. Exiting Janewrite (though not saving, because we need the accented characters to stay in the file). Now that we understand what Jane can do and how it works, let's move on to converting the files. We can extract our test files we made from our .d71 with VICE's c1541 utility and hexdump it. This got a little more difficult than it should have been: % c1541 work.d71 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> dir 0 "data#000 " 01 2a 39 "c.TESTCALC" prg 3 "l.TESTLIST" prg 4 "w.nOTE.2" prg 4 "w.TESTCONV" prg 1278 blocks free. c1541 #8> read "w.TESTCONV" ERR = 62, FILE NOT FOUND, 00, 00 cannot read `w.TESTCONV' on unit 8 invalid filename As you may have guessed, that's because the filenames, and it turns out the data in the files themselves, are stored as true ASCII, not PETSCII (indeed as they would have been on the Apple II, also), so c1541's filename conversion fails. Fortunately, the extract command will walk the entire directory and pull out all the files no matter what they're named. The documents are all regular Commodore PRoGram files with a starting address and they appear to be loaded in-place at that address into bank 1. This introduces the possibility of some delightful save-file hacks but we're not here for that today. That means we can also simply extract our previous owners' files en masse as well. I imaged their disk using my ZoomFloppy and external 1571, and since they are normal PRGs, a BAM copy of the allocated sectors is all we need to do, with one wrinkle: % d64copy -B 9 r_jane_bam.d64 [Warning] growing image file to 683 blocks 14: --*****--*****--***** 8% 15/171[Warning] read error: 0e/00: 5 14: ?******************** 12% 21/171[Warning] giving up... 14: ?******************** 15: ********************* 16: ********************* 17: ********************* 18: ******************* 19: ******************* 20: ******************* 21: ******************* 22: ****..***...***...* 100% 171/171 170 blocks copied. % c1541 r_jane_bam.d64 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> extract c1541 #8> quit Fortunately it doesn't look like the bad sector was in any of the files they cared about. Let's get an idea of the format from our test files. Janecalc files are "huge" because it looks like the entire 26x50 cell range is saved regardless of whether anything's in it or not. Looking at the directory of their data disk where they had saved a couple of sparse test spreadsheets of their own, they also were 39 blocks in length no matter how many cells were actually populated. The on-disk format is consequentially a bit wasteful: 000003a0 00 00 00 00 00 20 20 20 4a 61 6e 75 61 72 79 20 |..... January | 000003b0 20 46 65 62 72 75 61 72 79 20 20 20 20 20 4d 61 | February Ma| 000003c0 72 63 68 20 20 20 20 20 41 70 72 69 6c 20 20 20 |rch April | 000003d0 20 20 20 20 4d 61 79 20 20 20 20 20 20 4a 75 6e | May Jun| 000003e0 65 20 20 20 20 20 20 4a 75 6c 79 20 20 20 20 41 |e July A| 000003f0 75 67 75 73 74 20 53 65 70 74 65 6d 62 65 72 20 |ugust September | 00000400 20 20 4f 63 74 6f 62 65 72 20 20 4e 6f 76 65 6d | October Novem| 00000410 62 65 72 20 20 44 65 63 65 6d 62 65 72 00 00 01 |ber December...| 00000420 04 00 00 00 00 00 00 20 20 54 6f 74 61 6c 20 20 |....... Total | 00000430 20 41 76 65 72 61 67 65 20 20 20 00 00 01 04 00 | Average .....| Cardfiles are stored much more efficiently. Here's the entirety of our two cards. The fields are in the header, padded out to the fixed 12 character length, but with technically unnecessary nulls between them. A spurious "Beatles" entry looks like a buffer that was captured as part of the save, and there is also a page-aligned (counting the starting address) pad of nulls. Otherwise, the value strings look null-delimited, in the order they appear in the field list (unpopulated fields are zero-length strings). When you run out of fields, you're on the next card. % hexdump -C l.TESTLIST 00000000 00 7f 01 00 36 02 08 00 04 00 54 69 74 6c 65 20 |....6.....Title | 00000010 20 20 20 20 20 20 00 4c 65 61 64 20 41 72 74 69 | .Lead Arti| 00000020 73 74 20 00 4f 74 68 65 72 20 41 72 74 69 73 74 |st .Other Artist| 00000030 00 43 6f 6d 70 6f 73 65 72 20 20 20 20 00 43 6f |.Composer .Co| 00000040 6e 64 75 63 74 6f 72 20 20 20 00 57 68 65 72 65 |nductor .Where| 00000050 20 4b 65 70 74 20 20 00 42 6f 72 72 6f 77 65 64 | Kept .Borrowed| 00000060 20 62 79 20 00 44 61 74 65 20 4c 65 6e 74 20 20 | by .Date Lent | 00000070 20 00 00 00 ff ff 01 ff ff ff ff ff ff ff ff ff | ...............| 00000080 ff ff ff ff ff 00 01 02 03 04 05 06 07 00 01 02 |................| 00000090 03 04 05 06 07 ff ff ff ff ff ff ff ff ff ff 00 |................| 000000a0 00 54 68 65 20 42 65 61 74 6c 65 73 00 00 00 00 |.The Beatles....| 000000b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00000100 d7 09 80 60 60 ac 98 09 ae 04 cf a5 ea a9 d7 15 |...``...........| 00000110 80 ac 1d 21 d6 1c 80 60 60 ac 98 09 ae 04 cf 20 |...!...``...... | 00000120 75 0b 00 00 ac 0a 95 a5 f0 b0 a9 a6 b1 a9 a4 b1 |u...............| 00000130 a5 f1 b0 a9 a7 b1 a9 a5 b1 ac c0 08 cf 20 75 0b |............. u.| 00000140 fe ff a5 37 ae 8c ff 00 c0 d8 4b 80 cf a5 f0 b0 |...7......K.....| 00000150 a7 a6 b1 c0 d8 60 80 a5 f1 b0 a7 a7 b1 c0 d8 60 |.....`.........`| 00000160 80 cf a5 f0 b0 a7 a6 b1 00 00 09 00 01 5d f6 00 |.............]..| 00000170 00 00 00 09 00 09 00 01 66 f6 00 00 00 00 54 00 |........f.....T.| 00000180 50 00 01 b1 f6 69 64 65 20 12 00 42 00 01 6f f6 |P....ide ..B..o.| 00000190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 000001a0 00 00 00 00 00 00 00 52 65 76 6f 6c 76 65 72 00 |.......Revolver.| 000001b0 54 68 65 20 42 65 61 74 6c 65 73 00 00 4c 65 6e |The Beatles..Len| 000001c0 6e 6f 6e 2d 4d 63 43 61 72 74 6e 65 79 2d 48 61 |non-McCartney-Ha| 000001d0 72 72 69 73 6f 6e 00 47 65 6f 72 67 65 20 4d 61 |rrison.George Ma| 000001e0 72 74 69 6e 00 00 00 00 00 41 74 6f 6d 20 48 65 |rtin.....Atom He| 000001f0 61 72 74 20 4d 6f 74 68 65 72 00 50 69 6e 6b 20 |art Mother.Pink | 00000200 46 6c 6f 79 64 00 00 57 61 74 65 72 73 2d 47 69 |Floyd..Waters-Gi| 00000210 6c 6d 6f 75 72 2d 4d 61 73 6f 6e 2d 57 72 69 67 |lmour-Mason-Wrig| 00000220 68 74 2d 47 65 65 73 6f 6e 00 50 69 6e 6b 20 46 |ht-Geeson.Pink F| 00000230 6c 6f 79 64 00 00 00 00 |loyd....| 00000238 This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. The manual, which appears to have been written by a third party, insists on camelcasing the apps as JaneWrite, JaneCalc and JaneList even though the rear box copy doesn't distinguish them that way and the Apple II version and Arktronics' own advertising called them Janewrite, Janecalc and Janelist. I'll use the latter here. Commodore also included some official marketing material with the box, hawking their new 1902 monitor (with 80 column mode, which was useless for Jane), 1571 disk drive (which works well with Jane), 1670 Modem/1200 (which Jane doesn't use), 512K REU (which Jane doesn't use either) and the 1350 mouse — which in this photo is somewhat different-appearing than the released 1350/1351, and might have been a mockup. Actually, this system would have been a very nice 128 setup and very similar to the one we'll be using both for real and in VICE. Too bad Jane 128 could use relatively little of it. Both Jane and the Perfect series were demonstrated with the 128 for Winter CES 1985, though Commodore didn't announce MSRPs then for any of them at the time. It eventually emerged later that year for $49.95 [$150]; by the next year some retailers were selling it for as low as $35 [$100], compared to each of the Perfect titles then going for $45 apiece [$130]. Plus, the Perfect titles, being CP/M-based, were bland and text-based and failed to show off the C128's graphics, so Commodore ended up emphasizing Jane more in its contemporary marketing. Booting Jane 128 from the 128DCR's internal 1571 drive with my own 1902 monitor. Although its interface is similar to the Apple II's in broad strokes, Jane 128's most obvious difference is colour. However, there are numerous more subtle UI changes in this version, sufficient for it to be called "Jane 2.0" internally before release. We'll step through them here and in the next set of screenshots because they're an interesting comparison point to modern human interface practice. As with the Apple II, across the top of the screen are the various icons, or what the manual calls "pictures." These were slightly altered for the 128 from the Apple II originals. The blue icons again set the mode of the pointer ("tools") from the hand pointer, the insertion arrow, scissors (cut), camera (copy) and paste jar. The current tool is highlighted. You select a new tool by clicking on it, but you can also use the function keys (CLR/HOME, F1, F3, F5 and F7). By modern conventions Jane's tools are used backwards: instead of selecting a text range and "choosing a tool" (e.g., Command-C for copy) to operate on it, you choose a tool first and with that tool select the text range it operates on. I'll demonstrate this specific functionality in a couple instances, but any verb-object operation in Jane will work this way. (Linguistically, this makes Jane a head-initial language, while most modern GUIs are head-final.) Next to the tools are the main apps, Janewrite (now in purple), Janecalc (in green) and Janelist (in cyan), and next to them in grey are the same standard applets built into the kernel (online help, print dialogue, disk/file manager and setup). Finally, the STOP icon, now a solid red, stops the current app, and can be used to escape some screens, though not all. Unexpectedly it doesn't serve to quit Jane entirely: you just turn the computer off. Jane remembers what app is loaded and doesn't reload the overlay if you exit and re-enter it. However, unlike Jane for the Apple II, Jane 128 does not allow you to have multiple documents open simultaneously, a limitation that challenges the definition of "integrated software." In fact, of the three official Commodore productivity packages we've looked at so far, only poor abused 3-Plus-1 could do so. If you're working in one app and select another, Jane 128 will prompt you to save your work as if you'd clicked STOP, and the window will close. Given that the Apple II version managed to implement multiple documents in 64K of RAM, the Commodore 64 version — let alone the 128 — would seem to have little excuse, though I can think of two potential explanations. One is to increase the amount of memory available for any one document, which the Apple II version was indeed criticized for. The second is particular to the 128: its default memory configuration doesn't have a lot of free RAM, and it may have been judged too complicated to span or swap working sets across banks. (Some fiddling in the monitor shows that the documents simply occupy RAM in bank 1 and don't span elsewhere.) On the other hand, other 128 applications certainly do manage it, and it's possible development deadlines were a contributing factor. Let's start out with the online help, one of Marks and Kotick's fundamental design goals. Assuming you got the joystick (or 1350) plugged into the right port, there's a big honking question mark. What happens when you click on it? You get right into the online help window. The pointer snaps to the options; you can also move the pointer from option or cell to another option or cell with the CRSR keys/128 arrow keys and select it with the Commodore key. The window's yellow border is salient: any window that gives you choices to select from carries a yellow border. We'll see this again later. Incidentally, the manual is not in colour (just black, white and an accent magenta), and possibly as a result is all but totally ignorant of these UI choices or why they were made. The Apple II version's windows have a corner close gadget in the typical open square style, but this would only have made visual sense to someone familiar with the Lisa or Mac — which most Commodore users in 1985 wouldn't be. Instead, here windows you can close have a big bright red EXIT button (the ESC key can also serve this role in most cases). All icons are simply drawn onto the VIC-II high-res screen; unlike Magic Desk where pretty much everything was a sprite, the only sprite here is the pointer. Windows cannot be moved or resized, but by limiting icon and window boundaries to VIC-II 8x8 cells, drawing is fairly fast. Of course, most of the topics are on the yellow help disk (see? it matches). Jane 128, like the Apple II version, supports two disk drives, so you could have the help disk in device 9 and it would find it. The online help is pretty good, considering. It shows the icons and images as they would appear on-screen, and while they aren't live, they are accurate. The only black eye it gets is the technically truthful but functionally insufficient prompt "Press a key to continue" — the joystick or 1350 mouse button also work, and so does the ESC key to exit early, even though the exit button isn't shown. Some help items are animated and show you a demonstration, and each app has its own bespoke help. The system keeps track of what disks are where. If we start Janewrite by going to the typewriter, this blue dialogue box will appear — informational dialogue boxes always have a blue border — as it loads the overlay ... ... but then looks for a data disk, fails to find it, and asks for one. You need one even for a new document, and you can get stuck in a loop here if you don't provide one (pressing ESC just makes it try again, and clicking on the STOP icon doesn't do anything). You could put in the black data disk it comes with, but this one contains our generous donor's files, so we'll just give a blank disk image to VICE instead which Jane will offer to format. When creating a new data disk in VICE, if a 1571 is detected then Jane will want a real .d71 with the full available space, not a .d64, as it will then expect it can format both sides of the virtual disk. However, all of the Jane original disks, including the black one, are formatted single-sided for the 1541 since many early 128 owners would still be using one. The other way you can do this is from the disk icon. As these icons are in grey, so are their windows (except, curiously, help, but I can see how a yellow question mark would have looked bad against a white background), suggesting a global applet served by the central Jane kernel. The disk icon brings up a basic file manager allowing you to make duplicate backup files (but only to the same disk), rename or delete them, or create a new disk. The copy option is the default and is pre-selected when the window opens, which is irritating, because our modern reflexive habit of selecting the file first and then the action will cause an immediate copy to occur before you get the chance to click anything else. I don't think this was just me: there were several spurious duplicate files on the original black data disk I suspect for the same reason. If files are present on the disk, they will appear with their names and a filetype letter (W, C or L for Janewrite, Janecalc or Janelist respectively). Notice the slightly misshapen scrolling arrows, which were nice and clean on the Apple. We'll provide the .d71 to Jane here. Windows warning you about data loss have a red border. Interestingly, it provides both a No button and the exit button, which both do the same thing: abort back to the file manager. Jane seems unable to distinguish between an unformatted disk and a completely absent one, and will (fruitlessly) attempt to format an empty drive. Formatting in progress. The time estimates are surprisingly not far off. With our disk formatted, let's return to Janewrite at the end, since this will be the majority of the documents we'll convert. Instead, we'll start with the spreadsheet, Janecalc. Whenever any of the three built-in applications starts up, and once Jane has located the data disk, a file selector (in grey) appears. There are no spreadsheets ("worksheets") on our freshly formatted disk, so we click the NEW icon. Entering the new filename (blue window). You may have noticed that the red and blue windows are all invariably the same size regardless of contents and any active controls they contain. This probably simplified rendering quite a bit. Because Janecalc is green, its content window border is likewise green, and because Jane 128 doesn't multitask between the applications, it takes up the entirety of the screen. Two templates are provided, along with a roll-your-own option. We'll go with the Home Budget for illustration. The Home Budget template pulls up a simplified home budget by month which you can fill in. Jane supports 40, 64 and 80 column modes, all rendered in software on the VIC-IIe 320x200 display (not with the VDC's 640x200 display), but by default it uses 40. (I'll get to this in more detail in the word processor.) Along the bottom are various operators and the extent of the formula functions available (hardly competition for the Convergent WorkSlate). They can be selected with the pointer in lieu of text entry, which makes them quite discoverable, but in practice it's simply faster to type them. No other functions are implemented. Since the content window cannot be resized, the maximize gadget from the Apple II version became obviously useless and was removed. By using the joystick/mouse you can use the hand to point to a cell and then, with the hand pointing to it, just start typing text or a number. The cursor keys will move the pointer from cell to cell for you, though they will not exit the content area. If you click or otherwise select the cell with the hand, however, Jane considers this an attempt to construct a formula, which again would be frustrating to modern audiences used to, say, Microsoft Excel. But to edit it again, you pick the insert tool instead of the hand, and this time you must select the cell to type in it. Motion around the content area in all three applications is accomplished using multiple small icons in the bottom and right window borders. The "half full" icon pushes it all the way to the outer edge in that direction, while the double and single arrows move the viewport by large leaps and small leaps respectively. There are no thumbs to show relative location, but you can click anywhere along the scroll area for a proportionately "medium" jump if you like. You can also use CTRL-CRSR/CTRL-arrow keys. Even in 40-column mode, and even given that the scroll doesn't animate and just snaps to the new position, scrolling is agonizingly slow and multiple clicks on the scroll controls invariably overshoot. Putting it in 80 column mode doesn't just give you more on the screen — it also means you don't need to endure as many pauses trying to move around. Again, I'll have more to say about font sizes when we get to Janewrite. Unique to Janecalc, the scrolling actually wraps. Worksheets remain limited to 26 columns (A-Z), as in the Apple II version, but now up to 50 rows are allowed. Still, this wouldn't have been sufficient for anything larger than a modest small business, even in 1985. Formulas are approximately VisiCalc-style using A1 absolute notation for cells, though there are no sigils for functions (not that there's very many) and ranges are delimited by colons. Most basic math operators and parentheses are available. Here, we'll get a sum of this row ... ... and then manually calculate an average by dividing the sum by the count of populated rows (we could also just use avg). The template includes this at the bottom, but this shows you how formula entry worked. As we add data to dependent cells the sheets recalculate but circular references are not handled, though in fairness this capability was still not common in small spreadsheet applications. We'll go to Janelist next. When we do so, a red window pops up to prompt us to save our work. Switching to Janelist. Creating our new list. All very consistent (the file manager and requester seem to be part of the Jane kernel). Janelist, in fairness, never purported to be a database in any incarnation and acts more like a cardfile; even the manual merely refers to it as a "list keeper." Like Janecalc it comes with templates, though Janelist supports a substantial number more. For variety I'll try to enter some of my very large CD collection, because I'm one of those people (vinyl is for art, CD is for listening). The list comes up as fillable fields. There may be up to 15 field names up to 12 characters long. If you choose to create your own, then Jane will step you through entering the field names. That's about all the customization you can do. The values for those fields can span multiple lines, which is what the viewport scrolling is for — you use the icons at the bottom to advance through individual cards. Incidentally, Atom Heart Mother is Pink Floyd's finest album and I will tolerate no disagreement. The icon that looks like cards being pulled out suggests how to make a query (the magnifying glass icon, or possibly the funnel icon to denote a filter, wasn't universal at this point). Because it gives you choices, it's yellow, remember? The two OK buttons do different things. The top one filters cards to the query requested, but the bottom one undoes any query. You can query on top of queries for a primitive sort of logical-AND. Partial word searches are supported. For example, here is the second best Beatles album — the best is, of course, Abbey Road. Since we searched for the Beatles, when we run out of Beatles CDs, nothing more turns up from my formidable library. It is also possible to sort cards, in which case they appear in that order instead. You cannot sort on multiple fields, and you can't sort descending. Finally, Janewrite, where we will spend the rest of our time — and where apparently most of Jane's users spent theirs, including our previous owners. I've got a prefab file here I constructed while playing around to explore the file format, so this time we'll load a document instead of entering one, just to show you what that looks like from the file requester. Janewrite is IMHO the most polished and competent of the three apps, and it feels like the most development time was spent on it, too. It also shows what the Jane font renderer is capable of: although non-proportional and only a single typeface, you can see bold, underline, bold and underlined, superscript, and subscript are all possible. The bottom shows left, right, centre and full justification options, done per line, plus the font options, and then search (this time with a magnifying glass) and page layout. These icons are larger and more detailed than the Apple's. As with other parts of the UI, text attributes are set verb-initial, i.e., you would choose the desired style, then the insertion tool, then highlight the range of text and finally release the button (or, annoyingly, wait, which makes fine adjustments harder than they should be). Notice that there is an explicit bold-and-underline option, instead of using the separate bold and underline options in combination: that's because you can't make superscripted or subscripted text bold or underlined. The top of the content area shows the ruler — in characters, not inches — and margin stops and the single paragraph indent stop, which you can drag to change them. Interestingly, the ruler seems to be new for Jane 128: no screenshot for the Apple II version demonstrates one. Janewrite is also capable of a modicum of WYSIWYG if you select the 80 column option. This and other options come from the "computer" icon, which acts as a preference panel. Preferences are saved to the application disk and are global to all three applications. Despite this presenting a choice window (ordinarily yellow), Jane seems to treat it as a global window from the kernel, so it's grey. The bottom set of options are specifically for configuring the printer. Print output is generated with control codes and text only; Jane does not generate graphic sequences, so what actually shows up on the page depends on what your printer actually supports. The default middle print size option corresponds to 80 columns (more accurately, the default or 12cpi font size), while the small font corresponds to the condensed 15cpi and/or 132 column option available on some printers, and the large font corresponds to the 60 or 64-column (e.g., 10cpi) option also only available on some printers — not the expanded double wide printing option more typical of Commodore-specific devices. You could also select between regular fanfold tractor feed or plain paper, as well as the Near Letter Quality print option some printers supported, and finally the printer itself. There was built-in support for the MPS-801 (i.e., 1525), MPS-802 (i.e., 1526), 1101, "Oki" (generic Okidata), and generic "Epson" printers, assuming they were connected somehow to the IEC serial such as through a third-party parallel printer interface. These printer drivers varied wildly in their capabilities: the 1525/MPS-801 "driver" supported almost nothing except basic text, while the generic Okidata and Epson drivers supported nearly everything that Jane could generate. The "OTHER" driver is customizeable, a neat idea, if a little clumsy. A BASIC program called BUILDPRT on the grey disk allows you to populate it with your printer's control codes. Control sequences up to three characters long were supported. You would enter these from the manual, it would save them to disk, and then you could use the custom driver inside Jane. The topmost options affect the appearance of Jane. You can choose from three font sizes, all non-proportional, corresponding to 40, 64 or 80 column text. Confusingly, the 80-column option is the last when it's the middle option for printing. (The Apple II version likely didn't support 80 column text due to its smaller hi-res horizontal width.) Pointer speed and the "beep" Jane makes when you select options are also configurable. Here's how it looks in 80 columns, using the typical "soft 80" approach on the 64 which is more or less legible, at least on a composite display. As there are no colours in the content area, there is no risk of colour clash. This is probably the most useful view in Janewrite. The 64-column view, by contrast, is probably the least useful. The 40-column view is the most legible and 2:1 the size of a typical 80-column line, so it's easy to mentally grok page layout that way, but the 64-column view is odd enough to end up being the worst of both worlds. An interesting feature of Janewrite are the accented characters, which was not frequently seen on home computer-class word processors, as explained by the on-line help. Janewrite treats them as diacritics, and they can even be applied to letters that wouldn't ordinarily use them (because who knows? some language might), such as the grave and acute accents on the n as well as the more typical tilde. In fact, you can apply them to any character, even punctuation. However, the use of the up arrow to indicate a circumflex means there's no way you can type a literal caret into your document, and while a macron would have been nice, omitting the umlaut seems a greater fault. The decorators are also rather hard to distinguish in 80 columns, so Spanish users of Juana 128 might want to go to cuarenta column mode to mirar mejor. Janewrite also has basic find and/or find-and-replace, and a small pane appears below the content area when it's active. There are also decent page layout options, including setting both a per-page title and its position, adding a page number and its position, and margins, number of copies and starting page, though the last two would seem more appropriate for a print dialogue than a page layout one. Note that Jane will always print a 10-space left margin, so an 80-column printed line can be no longer than 70 characters, and this is indeed the maximum width Janewrite will support. However, paragraphs are apparently not stored as continuous sequences of text, demonstrated here with a contrived example. (In fact, we'll prove they aren't shortly.) While Janewrite will word-wrap at the right margin, inserting text after that will wrap onto a new line, not into the next line, even if the two lines were previously entered "together." There's a speed/flexibility tradeoff here in that Janewrite doesn't have to continuously reflow paragraphs, but it also means its concept of a paragraph is entirely based on how much you select. The text can be manually reflowed, joining lines if necessary, by picking one of the paragraph justification options and selecting the text with the hand, which will then be reflowed (and, if needed, spaces inserted) to match. In fact, this is also necessary if you change the margins because Jane doesn't automatically reformat your document then either. I also promised you an example of cut and paste, so here's one using the scissors (cut). You simply pick it and, with the button down, drag it across the text you want and release the button. Note that there is no undo, though I suppose you could just immediately paste it back in. Exiting Janewrite (though not saving, because we need the accented characters to stay in the file). Now that we understand what Jane can do and how it works, let's move on to converting the files. We can extract our test files we made from our .d71 with VICE's c1541 utility and hexdump it. This got a little more difficult than it should have been: % c1541 work.d71 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> dir 0 "data#000 " 01 2a 39 "c.TESTCALC" prg 3 "l.TESTLIST" prg 4 "w.nOTE.2" prg 4 "w.TESTCONV" prg 1278 blocks free. c1541 #8> read "w.TESTCONV" ERR = 62, FILE NOT FOUND, 00, 00 cannot read `w.TESTCONV' on unit 8 invalid filename As you may have guessed, that's because the filenames, and it turns out the data in the files themselves, are stored as true ASCII, not PETSCII (indeed as they would have been on the Apple II, also), so c1541's filename conversion fails. Fortunately, the extract command will walk the entire directory and pull out all the files no matter what they're named. The documents are all regular Commodore PRoGram files with a starting address and they appear to be loaded in-place at that address into bank 1. This introduces the possibility of some delightful save-file hacks but we're not here for that today. That means we can also simply extract our previous owners' files en masse as well. I imaged their disk using my ZoomFloppy and external 1571, and since they are normal PRGs, a BAM copy of the allocated sectors is all we need to do, with one wrinkle: % d64copy -B 9 r_jane_bam.d64 [Warning] growing image file to 683 blocks 14: --*****--*****--***** 8% 15/171[Warning] read error: 0e/00: 5 14: ?******************** 12% 21/171[Warning] giving up... 14: ?******************** 15: ********************* 16: ********************* 17: ********************* 18: ******************* 19: ******************* 20: ******************* 21: ******************* 22: ****..***...***...* 100% 171/171 170 blocks copied. % c1541 r_jane_bam.d64 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> extract c1541 #8> quit Fortunately it doesn't look like the bad sector was in any of the files they cared about. Let's get an idea of the format from our test files. Janecalc files are "huge" because it looks like the entire 26x50 cell range is saved regardless of whether anything's in it or not. Looking at the directory of their data disk where they had saved a couple of sparse test spreadsheets of their own, they also were 39 blocks in length no matter how many cells were actually populated. The on-disk format is consequentially a bit wasteful: 000003a0 00 00 00 00 00 20 20 20 4a 61 6e 75 61 72 79 20 |..... January | 000003b0 20 46 65 62 72 75 61 72 79 20 20 20 20 20 4d 61 | February Ma| 000003c0 72 63 68 20 20 20 20 20 41 70 72 69 6c 20 20 20 |rch April | 000003d0 20 20 20 20 4d 61 79 20 20 20 20 20 20 4a 75 6e | May Jun| 000003e0 65 20 20 20 20 20 20 4a 75 6c 79 20 20 20 20 41 |e July A| 000003f0 75 67 75 73 74 20 53 65 70 74 65 6d 62 65 72 20 |ugust September | 00000400 20 20 4f 63 74 6f 62 65 72 20 20 4e 6f 76 65 6d | October Novem| 00000410 62 65 72 20 20 44 65 63 65 6d 62 65 72 00 00 01 |ber December...| 00000420 04 00 00 00 00 00 00 20 20 54 6f 74 61 6c 20 20 |....... Total | 00000430 20 41 76 65 72 61 67 65 20 20 20 00 00 01 04 00 | Average .....| Cardfiles are stored much more efficiently. Here's the entirety of our two cards. The fields are in the header, padded out to the fixed 12 character length, but with technically unnecessary nulls between them. A spurious "Beatles" entry looks like a buffer that was captured as part of the save, and there is also a page-aligned (counting the starting address) pad of nulls. Otherwise, the value strings look null-delimited, in the order they appear in the field list (unpopulated fields are zero-length strings). When you run out of fields, you're on the next card. % hexdump -C l.TESTLIST 00000000 00 7f 01 00 36 02 08 00 04 00 54 69 74 6c 65 20 |....6.....Title | 00000010 20 20 20 20 20 20 00 4c 65 61 64 20 41 72 74 69 | .Lead Arti| 00000020 73 74 20 00 4f 74 68 65 72 20 41 72 74 69 73 74 |st .Other Artist| 00000030 00 43 6f 6d 70 6f 73 65 72 20 20 20 20 00 43 6f |.Composer .Co| 00000040 6e 64 75 63 74 6f 72 20 20 20 00 57 68 65 72 65 |nductor .Where| 00000050 20 4b 65 70 74 20 20 00 42 6f 72 72 6f 77 65 64 | Kept .Borrowed| 00000060 20 62 79 20 00 44 61 74 65 20 4c 65 6e 74 20 20 | by .Date Lent | 00000070 20 00 00 00 ff ff 01 ff ff ff ff ff ff ff ff ff | ...............| 00000080 ff ff ff ff ff 00 01 02 03 04 05 06 07 00 01 02 |................| 00000090 03 04 05 06 07 ff ff ff ff ff ff ff ff ff ff 00 |................| 000000a0 00 54 68 65 20 42 65 61 74 6c 65 73 00 00 00 00 |.The Beatles....| 000000b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00000100 d7 09 80 60 60 ac 98 09 ae 04 cf a5 ea a9 d7 15 |...``...........| 00000110 80 ac 1d 21 d6 1c 80 60 60 ac 98 09 ae 04 cf 20 |...!...``...... | 00000120 75 0b 00 00 ac 0a 95 a5 f0 b0 a9 a6 b1 a9 a4 b1 |u...............| 00000130 a5 f1 b0 a9 a7 b1 a9 a5 b1 ac c0 08 cf 20 75 0b |............. u.| 00000140 fe ff a5 37 ae 8c ff 00 c0 d8 4b 80 cf a5 f0 b0 |...7......K.....| 00000150 a7 a6 b1 c0 d8 60 80 a5 f1 b0 a7 a7 b1 c0 d8 60 |.....`.........`| 00000160 80 cf a5 f0 b0 a7 a6 b1 00 00 09 00 01 5d f6 00 |.............]..| 00000170 00 00 00 09 00 09 00 01 66 f6 00 00 00 00 54 00 |........f.....T.| 00000180 50 00 01 b1 f6 69 64 65 20 12 00 42 00 01 6f f6 |P....ide ..B..o.| 00000190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 000001a0 00 00 00 00 00 00 00 52 65 76 6f 6c 76 65 72 00 |.......Revolver.| 000001b0 54 68 65 20 42 65 61 74 6c 65 73 00 00 4c 65 6e |The Beatles..Len| 000001c0 6e 6f 6e 2d 4d 63 43 61 72 74 6e 65 79 2d 48 61 |non-McCartney-Ha| 000001d0 72 72 69 73 6f 6e 00 47 65 6f 72 67 65 20 4d 61 |rrison.George Ma| 000001e0 72 74 69 6e 00 00 00 00 00 41 74 6f 6d 20 48 65 |rtin.....Atom He| 000001f0 61 72 74 20 4d 6f 74 68 65 72 00 50 69 6e 6b 20 |art Mother.Pink | 00000200 46 6c 6f 79 64 00 00 57 61 74 65 72 73 2d 47 69 |Floyd..Waters-Gi| 00000210 6c 6d 6f 75 72 2d 4d 61 73 6f 6e 2d 57 72 69 67 |lmour-Mason-Wrig| 00000220 68 74 2d 47 65 65 73 6f 6e 00 50 69 6e 6b 20 46 |ht-Geeson.Pink F| 00000230 6c 6f 79 64 00 00 00 00 |loyd....| 00000238 This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. Both Jane and the Perfect series were demonstrated with the 128 for Winter CES 1985, though Commodore didn't announce MSRPs then for any of them at the time. It eventually emerged later that year for $49.95 [$150]; by the next year some retailers were selling it for as low as $35 [$100], compared to each of the Perfect titles then going for $45 apiece [$130]. Plus, the Perfect titles, being CP/M-based, were bland and text-based and failed to show off the C128's graphics, so Commodore ended up emphasizing Jane more in its contemporary marketing. Booting Jane 128 from the 128DCR's internal 1571 drive with my own 1902 monitor. Although its interface is similar to the Apple II's in broad strokes, Jane 128's most obvious difference is colour. However, there are numerous more subtle UI changes in this version, sufficient for it to be called "Jane 2.0" internally before release. We'll step through them here and in the next set of screenshots because they're an interesting comparison point to modern human interface practice. As with the Apple II, across the top of the screen are the various icons, or what the manual calls "pictures." These were slightly altered for the 128 from the Apple II originals. The blue icons again set the mode of the pointer ("tools") from the hand pointer, the insertion arrow, scissors (cut), camera (copy) and paste jar. The current tool is highlighted. You select a new tool by clicking on it, but you can also use the function keys (CLR/HOME, F1, F3, F5 and F7). By modern conventions Jane's tools are used backwards: instead of selecting a text range and "choosing a tool" (e.g., Command-C for copy) to operate on it, you choose a tool first and with that tool select the text range it operates on. I'll demonstrate this specific functionality in a couple instances, but any verb-object operation in Jane will work this way. (Linguistically, this makes Jane a head-initial language, while most modern GUIs are head-final.) Next to the tools are the main apps, Janewrite (now in purple), Janecalc (in green) and Janelist (in cyan), and next to them in grey are the same standard applets built into the kernel (online help, print dialogue, disk/file manager and setup). Finally, the STOP icon, now a solid red, stops the current app, and can be used to escape some screens, though not all. Unexpectedly it doesn't serve to quit Jane entirely: you just turn the computer off. Jane remembers what app is loaded and doesn't reload the overlay if you exit and re-enter it. However, unlike Jane for the Apple II, Jane 128 does not allow you to have multiple documents open simultaneously, a limitation that challenges the definition of "integrated software." In fact, of the three official Commodore productivity packages we've looked at so far, only poor abused 3-Plus-1 could do so. If you're working in one app and select another, Jane 128 will prompt you to save your work as if you'd clicked STOP, and the window will close. Given that the Apple II version managed to implement multiple documents in 64K of RAM, the Commodore 64 version — let alone the 128 — would seem to have little excuse, though I can think of two potential explanations. One is to increase the amount of memory available for any one document, which the Apple II version was indeed criticized for. The second is particular to the 128: its default memory configuration doesn't have a lot of free RAM, and it may have been judged too complicated to span or swap working sets across banks. (Some fiddling in the monitor shows that the documents simply occupy RAM in bank 1 and don't span elsewhere.) On the other hand, other 128 applications certainly do manage it, and it's possible development deadlines were a contributing factor. Let's start out with the online help, one of Marks and Kotick's fundamental design goals. Assuming you got the joystick (or 1350) plugged into the right port, there's a big honking question mark. What happens when you click on it? You get right into the online help window. The pointer snaps to the options; you can also move the pointer from option or cell to another option or cell with the CRSR keys/128 arrow keys and select it with the Commodore key. The window's yellow border is salient: any window that gives you choices to select from carries a yellow border. We'll see this again later. Incidentally, the manual is not in colour (just black, white and an accent magenta), and possibly as a result is all but totally ignorant of these UI choices or why they were made. The Apple II version's windows have a corner close gadget in the typical open square style, but this would only have made visual sense to someone familiar with the Lisa or Mac — which most Commodore users in 1985 wouldn't be. Instead, here windows you can close have a big bright red EXIT button (the ESC key can also serve this role in most cases). All icons are simply drawn onto the VIC-II high-res screen; unlike Magic Desk where pretty much everything was a sprite, the only sprite here is the pointer. Windows cannot be moved or resized, but by limiting icon and window boundaries to VIC-II 8x8 cells, drawing is fairly fast. Of course, most of the topics are on the yellow help disk (see? it matches). Jane 128, like the Apple II version, supports two disk drives, so you could have the help disk in device 9 and it would find it. The online help is pretty good, considering. It shows the icons and images as they would appear on-screen, and while they aren't live, they are accurate. The only black eye it gets is the technically truthful but functionally insufficient prompt "Press a key to continue" — the joystick or 1350 mouse button also work, and so does the ESC key to exit early, even though the exit button isn't shown. Some help items are animated and show you a demonstration, and each app has its own bespoke help. The system keeps track of what disks are where. If we start Janewrite by going to the typewriter, this blue dialogue box will appear — informational dialogue boxes always have a blue border — as it loads the overlay ... ... but then looks for a data disk, fails to find it, and asks for one. You need one even for a new document, and you can get stuck in a loop here if you don't provide one (pressing ESC just makes it try again, and clicking on the STOP icon doesn't do anything). You could put in the black data disk it comes with, but this one contains our generous donor's files, so we'll just give a blank disk image to VICE instead which Jane will offer to format. When creating a new data disk in VICE, if a 1571 is detected then Jane will want a real .d71 with the full available space, not a .d64, as it will then expect it can format both sides of the virtual disk. However, all of the Jane original disks, including the black one, are formatted single-sided for the 1541 since many early 128 owners would still be using one. The other way you can do this is from the disk icon. As these icons are in grey, so are their windows (except, curiously, help, but I can see how a yellow question mark would have looked bad against a white background), suggesting a global applet served by the central Jane kernel. The disk icon brings up a basic file manager allowing you to make duplicate backup files (but only to the same disk), rename or delete them, or create a new disk. The copy option is the default and is pre-selected when the window opens, which is irritating, because our modern reflexive habit of selecting the file first and then the action will cause an immediate copy to occur before you get the chance to click anything else. I don't think this was just me: there were several spurious duplicate files on the original black data disk I suspect for the same reason. If files are present on the disk, they will appear with their names and a filetype letter (W, C or L for Janewrite, Janecalc or Janelist respectively). Notice the slightly misshapen scrolling arrows, which were nice and clean on the Apple. We'll provide the .d71 to Jane here. Windows warning you about data loss have a red border. Interestingly, it provides both a No button and the exit button, which both do the same thing: abort back to the file manager. Jane seems unable to distinguish between an unformatted disk and a completely absent one, and will (fruitlessly) attempt to format an empty drive. Formatting in progress. The time estimates are surprisingly not far off. With our disk formatted, let's return to Janewrite at the end, since this will be the majority of the documents we'll convert. Instead, we'll start with the spreadsheet, Janecalc. Whenever any of the three built-in applications starts up, and once Jane has located the data disk, a file selector (in grey) appears. There are no spreadsheets ("worksheets") on our freshly formatted disk, so we click the NEW icon. Entering the new filename (blue window). You may have noticed that the red and blue windows are all invariably the same size regardless of contents and any active controls they contain. This probably simplified rendering quite a bit. Because Janecalc is green, its content window border is likewise green, and because Jane 128 doesn't multitask between the applications, it takes up the entirety of the screen. Two templates are provided, along with a roll-your-own option. We'll go with the Home Budget for illustration. The Home Budget template pulls up a simplified home budget by month which you can fill in. Jane supports 40, 64 and 80 column modes, all rendered in software on the VIC-IIe 320x200 display (not with the VDC's 640x200 display), but by default it uses 40. (I'll get to this in more detail in the word processor.) Along the bottom are various operators and the extent of the formula functions available (hardly competition for the Convergent WorkSlate). They can be selected with the pointer in lieu of text entry, which makes them quite discoverable, but in practice it's simply faster to type them. No other functions are implemented. Since the content window cannot be resized, the maximize gadget from the Apple II version became obviously useless and was removed. By using the joystick/mouse you can use the hand to point to a cell and then, with the hand pointing to it, just start typing text or a number. The cursor keys will move the pointer from cell to cell for you, though they will not exit the content area. If you click or otherwise select the cell with the hand, however, Jane considers this an attempt to construct a formula, which again would be frustrating to modern audiences used to, say, Microsoft Excel. But to edit it again, you pick the insert tool instead of the hand, and this time you must select the cell to type in it. Motion around the content area in all three applications is accomplished using multiple small icons in the bottom and right window borders. The "half full" icon pushes it all the way to the outer edge in that direction, while the double and single arrows move the viewport by large leaps and small leaps respectively. There are no thumbs to show relative location, but you can click anywhere along the scroll area for a proportionately "medium" jump if you like. You can also use CTRL-CRSR/CTRL-arrow keys. Even in 40-column mode, and even given that the scroll doesn't animate and just snaps to the new position, scrolling is agonizingly slow and multiple clicks on the scroll controls invariably overshoot. Putting it in 80 column mode doesn't just give you more on the screen — it also means you don't need to endure as many pauses trying to move around. Again, I'll have more to say about font sizes when we get to Janewrite. Unique to Janecalc, the scrolling actually wraps. Worksheets remain limited to 26 columns (A-Z), as in the Apple II version, but now up to 50 rows are allowed. Still, this wouldn't have been sufficient for anything larger than a modest small business, even in 1985. Formulas are approximately VisiCalc-style using A1 absolute notation for cells, though there are no sigils for functions (not that there's very many) and ranges are delimited by colons. Most basic math operators and parentheses are available. Here, we'll get a sum of this row ... ... and then manually calculate an average by dividing the sum by the count of populated rows (we could also just use avg). The template includes this at the bottom, but this shows you how formula entry worked. As we add data to dependent cells the sheets recalculate but circular references are not handled, though in fairness this capability was still not common in small spreadsheet applications. We'll go to Janelist next. When we do so, a red window pops up to prompt us to save our work. Switching to Janelist. Creating our new list. All very consistent (the file manager and requester seem to be part of the Jane kernel). Janelist, in fairness, never purported to be a database in any incarnation and acts more like a cardfile; even the manual merely refers to it as a "list keeper." Like Janecalc it comes with templates, though Janelist supports a substantial number more. For variety I'll try to enter some of my very large CD collection, because I'm one of those people (vinyl is for art, CD is for listening). The list comes up as fillable fields. There may be up to 15 field names up to 12 characters long. If you choose to create your own, then Jane will step you through entering the field names. That's about all the customization you can do. The values for those fields can span multiple lines, which is what the viewport scrolling is for — you use the icons at the bottom to advance through individual cards. Incidentally, Atom Heart Mother is Pink Floyd's finest album and I will tolerate no disagreement. The icon that looks like cards being pulled out suggests how to make a query (the magnifying glass icon, or possibly the funnel icon to denote a filter, wasn't universal at this point). Because it gives you choices, it's yellow, remember? The two OK buttons do different things. The top one filters cards to the query requested, but the bottom one undoes any query. You can query on top of queries for a primitive sort of logical-AND. Partial word searches are supported. For example, here is the second best Beatles album — the best is, of course, Abbey Road. Since we searched for the Beatles, when we run out of Beatles CDs, nothing more turns up from my formidable library. It is also possible to sort cards, in which case they appear in that order instead. You cannot sort on multiple fields, and you can't sort descending. Finally, Janewrite, where we will spend the rest of our time — and where apparently most of Jane's users spent theirs, including our previous owners. I've got a prefab file here I constructed while playing around to explore the file format, so this time we'll load a document instead of entering one, just to show you what that looks like from the file requester. Janewrite is IMHO the most polished and competent of the three apps, and it feels like the most development time was spent on it, too. It also shows what the Jane font renderer is capable of: although non-proportional and only a single typeface, you can see bold, underline, bold and underlined, superscript, and subscript are all possible. The bottom shows left, right, centre and full justification options, done per line, plus the font options, and then search (this time with a magnifying glass) and page layout. These icons are larger and more detailed than the Apple's. As with other parts of the UI, text attributes are set verb-initial, i.e., you would choose the desired style, then the insertion tool, then highlight the range of text and finally release the button (or, annoyingly, wait, which makes fine adjustments harder than they should be). Notice that there is an explicit bold-and-underline option, instead of using the separate bold and underline options in combination: that's because you can't make superscripted or subscripted text bold or underlined. The top of the content area shows the ruler — in characters, not inches — and margin stops and the single paragraph indent stop, which you can drag to change them. Interestingly, the ruler seems to be new for Jane 128: no screenshot for the Apple II version demonstrates one. Janewrite is also capable of a modicum of WYSIWYG if you select the 80 column option. This and other options come from the "computer" icon, which acts as a preference panel. Preferences are saved to the application disk and are global to all three applications. Despite this presenting a choice window (ordinarily yellow), Jane seems to treat it as a global window from the kernel, so it's grey. The bottom set of options are specifically for configuring the printer. Print output is generated with control codes and text only; Jane does not generate graphic sequences, so what actually shows up on the page depends on what your printer actually supports. The default middle print size option corresponds to 80 columns (more accurately, the default or 12cpi font size), while the small font corresponds to the condensed 15cpi and/or 132 column option available on some printers, and the large font corresponds to the 60 or 64-column (e.g., 10cpi) option also only available on some printers — not the expanded double wide printing option more typical of Commodore-specific devices. You could also select between regular fanfold tractor feed or plain paper, as well as the Near Letter Quality print option some printers supported, and finally the printer itself. There was built-in support for the MPS-801 (i.e., 1525), MPS-802 (i.e., 1526), 1101, "Oki" (generic Okidata), and generic "Epson" printers, assuming they were connected somehow to the IEC serial such as through a third-party parallel printer interface. These printer drivers varied wildly in their capabilities: the 1525/MPS-801 "driver" supported almost nothing except basic text, while the generic Okidata and Epson drivers supported nearly everything that Jane could generate. The "OTHER" driver is customizeable, a neat idea, if a little clumsy. A BASIC program called BUILDPRT on the grey disk allows you to populate it with your printer's control codes. Control sequences up to three characters long were supported. You would enter these from the manual, it would save them to disk, and then you could use the custom driver inside Jane. The topmost options affect the appearance of Jane. You can choose from three font sizes, all non-proportional, corresponding to 40, 64 or 80 column text. Confusingly, the 80-column option is the last when it's the middle option for printing. (The Apple II version likely didn't support 80 column text due to its smaller hi-res horizontal width.) Pointer speed and the "beep" Jane makes when you select options are also configurable. Here's how it looks in 80 columns, using the typical "soft 80" approach on the 64 which is more or less legible, at least on a composite display. As there are no colours in the content area, there is no risk of colour clash. This is probably the most useful view in Janewrite. The 64-column view, by contrast, is probably the least useful. The 40-column view is the most legible and 2:1 the size of a typical 80-column line, so it's easy to mentally grok page layout that way, but the 64-column view is odd enough to end up being the worst of both worlds. An interesting feature of Janewrite are the accented characters, which was not frequently seen on home computer-class word processors, as explained by the on-line help. Janewrite treats them as diacritics, and they can even be applied to letters that wouldn't ordinarily use them (because who knows? some language might), such as the grave and acute accents on the n as well as the more typical tilde. In fact, you can apply them to any character, even punctuation. However, the use of the up arrow to indicate a circumflex means there's no way you can type a literal caret into your document, and while a macron would have been nice, omitting the umlaut seems a greater fault. The decorators are also rather hard to distinguish in 80 columns, so Spanish users of Juana 128 might want to go to cuarenta column mode to mirar mejor. Janewrite also has basic find and/or find-and-replace, and a small pane appears below the content area when it's active. There are also decent page layout options, including setting both a per-page title and its position, adding a page number and its position, and margins, number of copies and starting page, though the last two would seem more appropriate for a print dialogue than a page layout one. Note that Jane will always print a 10-space left margin, so an 80-column printed line can be no longer than 70 characters, and this is indeed the maximum width Janewrite will support. However, paragraphs are apparently not stored as continuous sequences of text, demonstrated here with a contrived example. (In fact, we'll prove they aren't shortly.) While Janewrite will word-wrap at the right margin, inserting text after that will wrap onto a new line, not into the next line, even if the two lines were previously entered "together." There's a speed/flexibility tradeoff here in that Janewrite doesn't have to continuously reflow paragraphs, but it also means its concept of a paragraph is entirely based on how much you select. The text can be manually reflowed, joining lines if necessary, by picking one of the paragraph justification options and selecting the text with the hand, which will then be reflowed (and, if needed, spaces inserted) to match. In fact, this is also necessary if you change the margins because Jane doesn't automatically reformat your document then either. I also promised you an example of cut and paste, so here's one using the scissors (cut). You simply pick it and, with the button down, drag it across the text you want and release the button. Note that there is no undo, though I suppose you could just immediately paste it back in. Exiting Janewrite (though not saving, because we need the accented characters to stay in the file). Now that we understand what Jane can do and how it works, let's move on to converting the files. We can extract our test files we made from our .d71 with VICE's c1541 utility and hexdump it. This got a little more difficult than it should have been: % c1541 work.d71 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> dir 0 "data#000 " 01 2a 39 "c.TESTCALC" prg 3 "l.TESTLIST" prg 4 "w.nOTE.2" prg 4 "w.TESTCONV" prg 1278 blocks free. c1541 #8> read "w.TESTCONV" ERR = 62, FILE NOT FOUND, 00, 00 cannot read `w.TESTCONV' on unit 8 invalid filename As you may have guessed, that's because the filenames, and it turns out the data in the files themselves, are stored as true ASCII, not PETSCII (indeed as they would have been on the Apple II, also), so c1541's filename conversion fails. Fortunately, the extract command will walk the entire directory and pull out all the files no matter what they're named. The documents are all regular Commodore PRoGram files with a starting address and they appear to be loaded in-place at that address into bank 1. This introduces the possibility of some delightful save-file hacks but we're not here for that today. That means we can also simply extract our previous owners' files en masse as well. I imaged their disk using my ZoomFloppy and external 1571, and since they are normal PRGs, a BAM copy of the allocated sectors is all we need to do, with one wrinkle: % d64copy -B 9 r_jane_bam.d64 [Warning] growing image file to 683 blocks 14: --*****--*****--***** 8% 15/171[Warning] read error: 0e/00: 5 14: ?******************** 12% 21/171[Warning] giving up... 14: ?******************** 15: ********************* 16: ********************* 17: ********************* 18: ******************* 19: ******************* 20: ******************* 21: ******************* 22: ****..***...***...* 100% 171/171 170 blocks copied. % c1541 r_jane_bam.d64 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> extract c1541 #8> quit Fortunately it doesn't look like the bad sector was in any of the files they cared about. Let's get an idea of the format from our test files. Janecalc files are "huge" because it looks like the entire 26x50 cell range is saved regardless of whether anything's in it or not. Looking at the directory of their data disk where they had saved a couple of sparse test spreadsheets of their own, they also were 39 blocks in length no matter how many cells were actually populated. The on-disk format is consequentially a bit wasteful: 000003a0 00 00 00 00 00 20 20 20 4a 61 6e 75 61 72 79 20 |..... January | 000003b0 20 46 65 62 72 75 61 72 79 20 20 20 20 20 4d 61 | February Ma| 000003c0 72 63 68 20 20 20 20 20 41 70 72 69 6c 20 20 20 |rch April | 000003d0 20 20 20 20 4d 61 79 20 20 20 20 20 20 4a 75 6e | May Jun| 000003e0 65 20 20 20 20 20 20 4a 75 6c 79 20 20 20 20 41 |e July A| 000003f0 75 67 75 73 74 20 53 65 70 74 65 6d 62 65 72 20 |ugust September | 00000400 20 20 4f 63 74 6f 62 65 72 20 20 4e 6f 76 65 6d | October Novem| 00000410 62 65 72 20 20 44 65 63 65 6d 62 65 72 00 00 01 |ber December...| 00000420 04 00 00 00 00 00 00 20 20 54 6f 74 61 6c 20 20 |....... Total | 00000430 20 41 76 65 72 61 67 65 20 20 20 00 00 01 04 00 | Average .....| Cardfiles are stored much more efficiently. Here's the entirety of our two cards. The fields are in the header, padded out to the fixed 12 character length, but with technically unnecessary nulls between them. A spurious "Beatles" entry looks like a buffer that was captured as part of the save, and there is also a page-aligned (counting the starting address) pad of nulls. Otherwise, the value strings look null-delimited, in the order they appear in the field list (unpopulated fields are zero-length strings). When you run out of fields, you're on the next card. % hexdump -C l.TESTLIST 00000000 00 7f 01 00 36 02 08 00 04 00 54 69 74 6c 65 20 |....6.....Title | 00000010 20 20 20 20 20 20 00 4c 65 61 64 20 41 72 74 69 | .Lead Arti| 00000020 73 74 20 00 4f 74 68 65 72 20 41 72 74 69 73 74 |st .Other Artist| 00000030 00 43 6f 6d 70 6f 73 65 72 20 20 20 20 00 43 6f |.Composer .Co| 00000040 6e 64 75 63 74 6f 72 20 20 20 00 57 68 65 72 65 |nductor .Where| 00000050 20 4b 65 70 74 20 20 00 42 6f 72 72 6f 77 65 64 | Kept .Borrowed| 00000060 20 62 79 20 00 44 61 74 65 20 4c 65 6e 74 20 20 | by .Date Lent | 00000070 20 00 00 00 ff ff 01 ff ff ff ff ff ff ff ff ff | ...............| 00000080 ff ff ff ff ff 00 01 02 03 04 05 06 07 00 01 02 |................| 00000090 03 04 05 06 07 ff ff ff ff ff ff ff ff ff ff 00 |................| 000000a0 00 54 68 65 20 42 65 61 74 6c 65 73 00 00 00 00 |.The Beatles....| 000000b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00000100 d7 09 80 60 60 ac 98 09 ae 04 cf a5 ea a9 d7 15 |...``...........| 00000110 80 ac 1d 21 d6 1c 80 60 60 ac 98 09 ae 04 cf 20 |...!...``...... | 00000120 75 0b 00 00 ac 0a 95 a5 f0 b0 a9 a6 b1 a9 a4 b1 |u...............| 00000130 a5 f1 b0 a9 a7 b1 a9 a5 b1 ac c0 08 cf 20 75 0b |............. u.| 00000140 fe ff a5 37 ae 8c ff 00 c0 d8 4b 80 cf a5 f0 b0 |...7......K.....| 00000150 a7 a6 b1 c0 d8 60 80 a5 f1 b0 a7 a7 b1 c0 d8 60 |.....`.........`| 00000160 80 cf a5 f0 b0 a7 a6 b1 00 00 09 00 01 5d f6 00 |.............]..| 00000170 00 00 00 09 00 09 00 01 66 f6 00 00 00 00 54 00 |........f.....T.| 00000180 50 00 01 b1 f6 69 64 65 20 12 00 42 00 01 6f f6 |P....ide ..B..o.| 00000190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 000001a0 00 00 00 00 00 00 00 52 65 76 6f 6c 76 65 72 00 |.......Revolver.| 000001b0 54 68 65 20 42 65 61 74 6c 65 73 00 00 4c 65 6e |The Beatles..Len| 000001c0 6e 6f 6e 2d 4d 63 43 61 72 74 6e 65 79 2d 48 61 |non-McCartney-Ha| 000001d0 72 72 69 73 6f 6e 00 47 65 6f 72 67 65 20 4d 61 |rrison.George Ma| 000001e0 72 74 69 6e 00 00 00 00 00 41 74 6f 6d 20 48 65 |rtin.....Atom He| 000001f0 61 72 74 20 4d 6f 74 68 65 72 00 50 69 6e 6b 20 |art Mother.Pink | 00000200 46 6c 6f 79 64 00 00 57 61 74 65 72 73 2d 47 69 |Floyd..Waters-Gi| 00000210 6c 6d 6f 75 72 2d 4d 61 73 6f 6e 2d 57 72 69 67 |lmour-Mason-Wrig| 00000220 68 74 2d 47 65 65 73 6f 6e 00 50 69 6e 6b 20 46 |ht-Geeson.Pink F| 00000230 6c 6f 79 64 00 00 00 00 |loyd....| 00000238 This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. As with the Apple II, across the top of the screen are the various icons, or what the manual calls "pictures." These were slightly altered for the 128 from the Apple II originals. The blue icons again set the mode of the pointer ("tools") from the hand pointer, the insertion arrow, scissors (cut), camera (copy) and paste jar. The current tool is highlighted. You select a new tool by clicking on it, but you can also use the function keys (CLR/HOME, F1, F3, F5 and F7). By modern conventions Jane's tools are used backwards: instead of selecting a text range and "choosing a tool" (e.g., Command-C for copy) to operate on it, you choose a tool first and with that tool select the text range it operates on. I'll demonstrate this specific functionality in a couple instances, but any verb-object operation in Jane will work this way. (Linguistically, this makes Jane a head-initial language, while most modern GUIs are head-final.) Next to the tools are the main apps, Janewrite (now in purple), Janecalc (in green) and Janelist (in cyan), and next to them in grey are the same standard applets built into the kernel (online help, print dialogue, disk/file manager and setup). Finally, the STOP icon, now a solid red, stops the current app, and can be used to escape some screens, though not all. Unexpectedly it doesn't serve to quit Jane entirely: you just turn the computer off. Jane remembers what app is loaded and doesn't reload the overlay if you exit and re-enter it. However, unlike Jane for the Apple II, Jane 128 does not allow you to have multiple documents open simultaneously, a limitation that challenges the definition of "integrated software." In fact, of the three official Commodore productivity packages we've looked at so far, only poor abused 3-Plus-1 could do so. If you're working in one app and select another, Jane 128 will prompt you to save your work as if you'd clicked STOP, and the window will close. Given that the Apple II version managed to implement multiple documents in 64K of RAM, the Commodore 64 version — let alone the 128 — would seem to have little excuse, though I can think of two potential explanations. One is to increase the amount of memory available for any one document, which the Apple II version was indeed criticized for. The second is particular to the 128: its default memory configuration doesn't have a lot of free RAM, and it may have been judged too complicated to span or swap working sets across banks. (Some fiddling in the monitor shows that the documents simply occupy RAM in bank 1 and don't span elsewhere.) On the other hand, other 128 applications certainly do manage it, and it's possible development deadlines were a contributing factor. Let's start out with the online help, one of Marks and Kotick's fundamental design goals. Assuming you got the joystick (or 1350) plugged into the right port, there's a big honking question mark. What happens when you click on it? You get right into the online help window. The pointer snaps to the options; you can also move the pointer from option or cell to another option or cell with the CRSR keys/128 arrow keys and select it with the Commodore key. The window's yellow border is salient: any window that gives you choices to select from carries a yellow border. We'll see this again later. Incidentally, the manual is not in colour (just black, white and an accent magenta), and possibly as a result is all but totally ignorant of these UI choices or why they were made. The Apple II version's windows have a corner close gadget in the typical open square style, but this would only have made visual sense to someone familiar with the Lisa or Mac — which most Commodore users in 1985 wouldn't be. Instead, here windows you can close have a big bright red EXIT button (the ESC key can also serve this role in most cases). All icons are simply drawn onto the VIC-II high-res screen; unlike Magic Desk where pretty much everything was a sprite, the only sprite here is the pointer. Windows cannot be moved or resized, but by limiting icon and window boundaries to VIC-II 8x8 cells, drawing is fairly fast. Of course, most of the topics are on the yellow help disk (see? it matches). Jane 128, like the Apple II version, supports two disk drives, so you could have the help disk in device 9 and it would find it. The online help is pretty good, considering. It shows the icons and images as they would appear on-screen, and while they aren't live, they are accurate. The only black eye it gets is the technically truthful but functionally insufficient prompt "Press a key to continue" — the joystick or 1350 mouse button also work, and so does the ESC key to exit early, even though the exit button isn't shown. Some help items are animated and show you a demonstration, and each app has its own bespoke help. The system keeps track of what disks are where. If we start Janewrite by going to the typewriter, this blue dialogue box will appear — informational dialogue boxes always have a blue border — as it loads the overlay ... ... but then looks for a data disk, fails to find it, and asks for one. You need one even for a new document, and you can get stuck in a loop here if you don't provide one (pressing ESC just makes it try again, and clicking on the STOP icon doesn't do anything). You could put in the black data disk it comes with, but this one contains our generous donor's files, so we'll just give a blank disk image to VICE instead which Jane will offer to format. When creating a new data disk in VICE, if a 1571 is detected then Jane will want a real .d71 with the full available space, not a .d64, as it will then expect it can format both sides of the virtual disk. However, all of the Jane original disks, including the black one, are formatted single-sided for the 1541 since many early 128 owners would still be using one. The other way you can do this is from the disk icon. As these icons are in grey, so are their windows (except, curiously, help, but I can see how a yellow question mark would have looked bad against a white background), suggesting a global applet served by the central Jane kernel. The disk icon brings up a basic file manager allowing you to make duplicate backup files (but only to the same disk), rename or delete them, or create a new disk. The copy option is the default and is pre-selected when the window opens, which is irritating, because our modern reflexive habit of selecting the file first and then the action will cause an immediate copy to occur before you get the chance to click anything else. I don't think this was just me: there were several spurious duplicate files on the original black data disk I suspect for the same reason. If files are present on the disk, they will appear with their names and a filetype letter (W, C or L for Janewrite, Janecalc or Janelist respectively). Notice the slightly misshapen scrolling arrows, which were nice and clean on the Apple. We'll provide the .d71 to Jane here. Windows warning you about data loss have a red border. Interestingly, it provides both a No button and the exit button, which both do the same thing: abort back to the file manager. Jane seems unable to distinguish between an unformatted disk and a completely absent one, and will (fruitlessly) attempt to format an empty drive. Formatting in progress. The time estimates are surprisingly not far off. With our disk formatted, let's return to Janewrite at the end, since this will be the majority of the documents we'll convert. Instead, we'll start with the spreadsheet, Janecalc. Whenever any of the three built-in applications starts up, and once Jane has located the data disk, a file selector (in grey) appears. There are no spreadsheets ("worksheets") on our freshly formatted disk, so we click the NEW icon. Entering the new filename (blue window). You may have noticed that the red and blue windows are all invariably the same size regardless of contents and any active controls they contain. This probably simplified rendering quite a bit. Because Janecalc is green, its content window border is likewise green, and because Jane 128 doesn't multitask between the applications, it takes up the entirety of the screen. Two templates are provided, along with a roll-your-own option. We'll go with the Home Budget for illustration. The Home Budget template pulls up a simplified home budget by month which you can fill in. Jane supports 40, 64 and 80 column modes, all rendered in software on the VIC-IIe 320x200 display (not with the VDC's 640x200 display), but by default it uses 40. (I'll get to this in more detail in the word processor.) Along the bottom are various operators and the extent of the formula functions available (hardly competition for the Convergent WorkSlate). They can be selected with the pointer in lieu of text entry, which makes them quite discoverable, but in practice it's simply faster to type them. No other functions are implemented. Since the content window cannot be resized, the maximize gadget from the Apple II version became obviously useless and was removed. By using the joystick/mouse you can use the hand to point to a cell and then, with the hand pointing to it, just start typing text or a number. The cursor keys will move the pointer from cell to cell for you, though they will not exit the content area. If you click or otherwise select the cell with the hand, however, Jane considers this an attempt to construct a formula, which again would be frustrating to modern audiences used to, say, Microsoft Excel. But to edit it again, you pick the insert tool instead of the hand, and this time you must select the cell to type in it. Motion around the content area in all three applications is accomplished using multiple small icons in the bottom and right window borders. The "half full" icon pushes it all the way to the outer edge in that direction, while the double and single arrows move the viewport by large leaps and small leaps respectively. There are no thumbs to show relative location, but you can click anywhere along the scroll area for a proportionately "medium" jump if you like. You can also use CTRL-CRSR/CTRL-arrow keys. Even in 40-column mode, and even given that the scroll doesn't animate and just snaps to the new position, scrolling is agonizingly slow and multiple clicks on the scroll controls invariably overshoot. Putting it in 80 column mode doesn't just give you more on the screen — it also means you don't need to endure as many pauses trying to move around. Again, I'll have more to say about font sizes when we get to Janewrite. Unique to Janecalc, the scrolling actually wraps. Worksheets remain limited to 26 columns (A-Z), as in the Apple II version, but now up to 50 rows are allowed. Still, this wouldn't have been sufficient for anything larger than a modest small business, even in 1985. Formulas are approximately VisiCalc-style using A1 absolute notation for cells, though there are no sigils for functions (not that there's very many) and ranges are delimited by colons. Most basic math operators and parentheses are available. Here, we'll get a sum of this row ... ... and then manually calculate an average by dividing the sum by the count of populated rows (we could also just use avg). The template includes this at the bottom, but this shows you how formula entry worked. As we add data to dependent cells the sheets recalculate but circular references are not handled, though in fairness this capability was still not common in small spreadsheet applications. We'll go to Janelist next. When we do so, a red window pops up to prompt us to save our work. Switching to Janelist. Creating our new list. All very consistent (the file manager and requester seem to be part of the Jane kernel). Janelist, in fairness, never purported to be a database in any incarnation and acts more like a cardfile; even the manual merely refers to it as a "list keeper." Like Janecalc it comes with templates, though Janelist supports a substantial number more. For variety I'll try to enter some of my very large CD collection, because I'm one of those people (vinyl is for art, CD is for listening). The list comes up as fillable fields. There may be up to 15 field names up to 12 characters long. If you choose to create your own, then Jane will step you through entering the field names. That's about all the customization you can do. The values for those fields can span multiple lines, which is what the viewport scrolling is for — you use the icons at the bottom to advance through individual cards. Incidentally, Atom Heart Mother is Pink Floyd's finest album and I will tolerate no disagreement. The icon that looks like cards being pulled out suggests how to make a query (the magnifying glass icon, or possibly the funnel icon to denote a filter, wasn't universal at this point). Because it gives you choices, it's yellow, remember? The two OK buttons do different things. The top one filters cards to the query requested, but the bottom one undoes any query. You can query on top of queries for a primitive sort of logical-AND. Partial word searches are supported. For example, here is the second best Beatles album — the best is, of course, Abbey Road. Since we searched for the Beatles, when we run out of Beatles CDs, nothing more turns up from my formidable library. It is also possible to sort cards, in which case they appear in that order instead. You cannot sort on multiple fields, and you can't sort descending. Finally, Janewrite, where we will spend the rest of our time — and where apparently most of Jane's users spent theirs, including our previous owners. I've got a prefab file here I constructed while playing around to explore the file format, so this time we'll load a document instead of entering one, just to show you what that looks like from the file requester. Janewrite is IMHO the most polished and competent of the three apps, and it feels like the most development time was spent on it, too. It also shows what the Jane font renderer is capable of: although non-proportional and only a single typeface, you can see bold, underline, bold and underlined, superscript, and subscript are all possible. The bottom shows left, right, centre and full justification options, done per line, plus the font options, and then search (this time with a magnifying glass) and page layout. These icons are larger and more detailed than the Apple's. As with other parts of the UI, text attributes are set verb-initial, i.e., you would choose the desired style, then the insertion tool, then highlight the range of text and finally release the button (or, annoyingly, wait, which makes fine adjustments harder than they should be). Notice that there is an explicit bold-and-underline option, instead of using the separate bold and underline options in combination: that's because you can't make superscripted or subscripted text bold or underlined. The top of the content area shows the ruler — in characters, not inches — and margin stops and the single paragraph indent stop, which you can drag to change them. Interestingly, the ruler seems to be new for Jane 128: no screenshot for the Apple II version demonstrates one. Janewrite is also capable of a modicum of WYSIWYG if you select the 80 column option. This and other options come from the "computer" icon, which acts as a preference panel. Preferences are saved to the application disk and are global to all three applications. Despite this presenting a choice window (ordinarily yellow), Jane seems to treat it as a global window from the kernel, so it's grey. The bottom set of options are specifically for configuring the printer. Print output is generated with control codes and text only; Jane does not generate graphic sequences, so what actually shows up on the page depends on what your printer actually supports. The default middle print size option corresponds to 80 columns (more accurately, the default or 12cpi font size), while the small font corresponds to the condensed 15cpi and/or 132 column option available on some printers, and the large font corresponds to the 60 or 64-column (e.g., 10cpi) option also only available on some printers — not the expanded double wide printing option more typical of Commodore-specific devices. You could also select between regular fanfold tractor feed or plain paper, as well as the Near Letter Quality print option some printers supported, and finally the printer itself. There was built-in support for the MPS-801 (i.e., 1525), MPS-802 (i.e., 1526), 1101, "Oki" (generic Okidata), and generic "Epson" printers, assuming they were connected somehow to the IEC serial such as through a third-party parallel printer interface. These printer drivers varied wildly in their capabilities: the 1525/MPS-801 "driver" supported almost nothing except basic text, while the generic Okidata and Epson drivers supported nearly everything that Jane could generate. The "OTHER" driver is customizeable, a neat idea, if a little clumsy. A BASIC program called BUILDPRT on the grey disk allows you to populate it with your printer's control codes. Control sequences up to three characters long were supported. You would enter these from the manual, it would save them to disk, and then you could use the custom driver inside Jane. The topmost options affect the appearance of Jane. You can choose from three font sizes, all non-proportional, corresponding to 40, 64 or 80 column text. Confusingly, the 80-column option is the last when it's the middle option for printing. (The Apple II version likely didn't support 80 column text due to its smaller hi-res horizontal width.) Pointer speed and the "beep" Jane makes when you select options are also configurable. Here's how it looks in 80 columns, using the typical "soft 80" approach on the 64 which is more or less legible, at least on a composite display. As there are no colours in the content area, there is no risk of colour clash. This is probably the most useful view in Janewrite. The 64-column view, by contrast, is probably the least useful. The 40-column view is the most legible and 2:1 the size of a typical 80-column line, so it's easy to mentally grok page layout that way, but the 64-column view is odd enough to end up being the worst of both worlds. An interesting feature of Janewrite are the accented characters, which was not frequently seen on home computer-class word processors, as explained by the on-line help. Janewrite treats them as diacritics, and they can even be applied to letters that wouldn't ordinarily use them (because who knows? some language might), such as the grave and acute accents on the n as well as the more typical tilde. In fact, you can apply them to any character, even punctuation. However, the use of the up arrow to indicate a circumflex means there's no way you can type a literal caret into your document, and while a macron would have been nice, omitting the umlaut seems a greater fault. The decorators are also rather hard to distinguish in 80 columns, so Spanish users of Juana 128 might want to go to cuarenta column mode to mirar mejor. Janewrite also has basic find and/or find-and-replace, and a small pane appears below the content area when it's active. There are also decent page layout options, including setting both a per-page title and its position, adding a page number and its position, and margins, number of copies and starting page, though the last two would seem more appropriate for a print dialogue than a page layout one. Note that Jane will always print a 10-space left margin, so an 80-column printed line can be no longer than 70 characters, and this is indeed the maximum width Janewrite will support. However, paragraphs are apparently not stored as continuous sequences of text, demonstrated here with a contrived example. (In fact, we'll prove they aren't shortly.) While Janewrite will word-wrap at the right margin, inserting text after that will wrap onto a new line, not into the next line, even if the two lines were previously entered "together." There's a speed/flexibility tradeoff here in that Janewrite doesn't have to continuously reflow paragraphs, but it also means its concept of a paragraph is entirely based on how much you select. The text can be manually reflowed, joining lines if necessary, by picking one of the paragraph justification options and selecting the text with the hand, which will then be reflowed (and, if needed, spaces inserted) to match. In fact, this is also necessary if you change the margins because Jane doesn't automatically reformat your document then either. I also promised you an example of cut and paste, so here's one using the scissors (cut). You simply pick it and, with the button down, drag it across the text you want and release the button. Note that there is no undo, though I suppose you could just immediately paste it back in. Exiting Janewrite (though not saving, because we need the accented characters to stay in the file). Now that we understand what Jane can do and how it works, let's move on to converting the files. We can extract our test files we made from our .d71 with VICE's c1541 utility and hexdump it. This got a little more difficult than it should have been: % c1541 work.d71 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> dir 0 "data#000 " 01 2a 39 "c.TESTCALC" prg 3 "l.TESTLIST" prg 4 "w.nOTE.2" prg 4 "w.TESTCONV" prg 1278 blocks free. c1541 #8> read "w.TESTCONV" ERR = 62, FILE NOT FOUND, 00, 00 cannot read `w.TESTCONV' on unit 8 invalid filename As you may have guessed, that's because the filenames, and it turns out the data in the files themselves, are stored as true ASCII, not PETSCII (indeed as they would have been on the Apple II, also), so c1541's filename conversion fails. Fortunately, the extract command will walk the entire directory and pull out all the files no matter what they're named. The documents are all regular Commodore PRoGram files with a starting address and they appear to be loaded in-place at that address into bank 1. This introduces the possibility of some delightful save-file hacks but we're not here for that today. That means we can also simply extract our previous owners' files en masse as well. I imaged their disk using my ZoomFloppy and external 1571, and since they are normal PRGs, a BAM copy of the allocated sectors is all we need to do, with one wrinkle: % d64copy -B 9 r_jane_bam.d64 [Warning] growing image file to 683 blocks 14: --*****--*****--***** 8% 15/171[Warning] read error: 0e/00: 5 14: ?******************** 12% 21/171[Warning] giving up... 14: ?******************** 15: ********************* 16: ********************* 17: ********************* 18: ******************* 19: ******************* 20: ******************* 21: ******************* 22: ****..***...***...* 100% 171/171 170 blocks copied. % c1541 r_jane_bam.d64 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> extract c1541 #8> quit Fortunately it doesn't look like the bad sector was in any of the files they cared about. Let's get an idea of the format from our test files. Janecalc files are "huge" because it looks like the entire 26x50 cell range is saved regardless of whether anything's in it or not. Looking at the directory of their data disk where they had saved a couple of sparse test spreadsheets of their own, they also were 39 blocks in length no matter how many cells were actually populated. The on-disk format is consequentially a bit wasteful: 000003a0 00 00 00 00 00 20 20 20 4a 61 6e 75 61 72 79 20 |..... January | 000003b0 20 46 65 62 72 75 61 72 79 20 20 20 20 20 4d 61 | February Ma| 000003c0 72 63 68 20 20 20 20 20 41 70 72 69 6c 20 20 20 |rch April | 000003d0 20 20 20 20 4d 61 79 20 20 20 20 20 20 4a 75 6e | May Jun| 000003e0 65 20 20 20 20 20 20 4a 75 6c 79 20 20 20 20 41 |e July A| 000003f0 75 67 75 73 74 20 53 65 70 74 65 6d 62 65 72 20 |ugust September | 00000400 20 20 4f 63 74 6f 62 65 72 20 20 4e 6f 76 65 6d | October Novem| 00000410 62 65 72 20 20 44 65 63 65 6d 62 65 72 00 00 01 |ber December...| 00000420 04 00 00 00 00 00 00 20 20 54 6f 74 61 6c 20 20 |....... Total | 00000430 20 41 76 65 72 61 67 65 20 20 20 00 00 01 04 00 | Average .....| Cardfiles are stored much more efficiently. Here's the entirety of our two cards. The fields are in the header, padded out to the fixed 12 character length, but with technically unnecessary nulls between them. A spurious "Beatles" entry looks like a buffer that was captured as part of the save, and there is also a page-aligned (counting the starting address) pad of nulls. Otherwise, the value strings look null-delimited, in the order they appear in the field list (unpopulated fields are zero-length strings). When you run out of fields, you're on the next card. % hexdump -C l.TESTLIST 00000000 00 7f 01 00 36 02 08 00 04 00 54 69 74 6c 65 20 |....6.....Title | 00000010 20 20 20 20 20 20 00 4c 65 61 64 20 41 72 74 69 | .Lead Arti| 00000020 73 74 20 00 4f 74 68 65 72 20 41 72 74 69 73 74 |st .Other Artist| 00000030 00 43 6f 6d 70 6f 73 65 72 20 20 20 20 00 43 6f |.Composer .Co| 00000040 6e 64 75 63 74 6f 72 20 20 20 00 57 68 65 72 65 |nductor .Where| 00000050 20 4b 65 70 74 20 20 00 42 6f 72 72 6f 77 65 64 | Kept .Borrowed| 00000060 20 62 79 20 00 44 61 74 65 20 4c 65 6e 74 20 20 | by .Date Lent | 00000070 20 00 00 00 ff ff 01 ff ff ff ff ff ff ff ff ff | ...............| 00000080 ff ff ff ff ff 00 01 02 03 04 05 06 07 00 01 02 |................| 00000090 03 04 05 06 07 ff ff ff ff ff ff ff ff ff ff 00 |................| 000000a0 00 54 68 65 20 42 65 61 74 6c 65 73 00 00 00 00 |.The Beatles....| 000000b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00000100 d7 09 80 60 60 ac 98 09 ae 04 cf a5 ea a9 d7 15 |...``...........| 00000110 80 ac 1d 21 d6 1c 80 60 60 ac 98 09 ae 04 cf 20 |...!...``...... | 00000120 75 0b 00 00 ac 0a 95 a5 f0 b0 a9 a6 b1 a9 a4 b1 |u...............| 00000130 a5 f1 b0 a9 a7 b1 a9 a5 b1 ac c0 08 cf 20 75 0b |............. u.| 00000140 fe ff a5 37 ae 8c ff 00 c0 d8 4b 80 cf a5 f0 b0 |...7......K.....| 00000150 a7 a6 b1 c0 d8 60 80 a5 f1 b0 a7 a7 b1 c0 d8 60 |.....`.........`| 00000160 80 cf a5 f0 b0 a7 a6 b1 00 00 09 00 01 5d f6 00 |.............]..| 00000170 00 00 00 09 00 09 00 01 66 f6 00 00 00 00 54 00 |........f.....T.| 00000180 50 00 01 b1 f6 69 64 65 20 12 00 42 00 01 6f f6 |P....ide ..B..o.| 00000190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 000001a0 00 00 00 00 00 00 00 52 65 76 6f 6c 76 65 72 00 |.......Revolver.| 000001b0 54 68 65 20 42 65 61 74 6c 65 73 00 00 4c 65 6e |The Beatles..Len| 000001c0 6e 6f 6e 2d 4d 63 43 61 72 74 6e 65 79 2d 48 61 |non-McCartney-Ha| 000001d0 72 72 69 73 6f 6e 00 47 65 6f 72 67 65 20 4d 61 |rrison.George Ma| 000001e0 72 74 69 6e 00 00 00 00 00 41 74 6f 6d 20 48 65 |rtin.....Atom He| 000001f0 61 72 74 20 4d 6f 74 68 65 72 00 50 69 6e 6b 20 |art Mother.Pink | 00000200 46 6c 6f 79 64 00 00 57 61 74 65 72 73 2d 47 69 |Floyd..Waters-Gi| 00000210 6c 6d 6f 75 72 2d 4d 61 73 6f 6e 2d 57 72 69 67 |lmour-Mason-Wrig| 00000220 68 74 2d 47 65 65 73 6f 6e 00 50 69 6e 6b 20 46 |ht-Geeson.Pink F| 00000230 6c 6f 79 64 00 00 00 00 |loyd....| 00000238 This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. By modern conventions Jane's tools are used backwards: instead of selecting a text range and "choosing a tool" (e.g., Command-C for copy) to operate on it, you choose a tool first and with that tool select the text range it operates on. I'll demonstrate this specific functionality in a couple instances, but any verb-object operation in Jane will work this way. (Linguistically, this makes Jane a head-initial language, while most modern GUIs are head-final.) Next to the tools are the main apps, Janewrite (now in purple), Janecalc (in green) and Janelist (in cyan), and next to them in grey are the same standard applets built into the kernel (online help, print dialogue, disk/file manager and setup). Finally, the STOP icon, now a solid red, stops the current app, and can be used to escape some screens, though not all. Unexpectedly it doesn't serve to quit Jane entirely: you just turn the computer off. Jane remembers what app is loaded and doesn't reload the overlay if you exit and re-enter it. However, unlike Jane for the Apple II, Jane 128 does not allow you to have multiple documents open simultaneously, a limitation that challenges the definition of "integrated software." In fact, of the three official Commodore productivity packages we've looked at so far, only poor abused 3-Plus-1 could do so. If you're working in one app and select another, Jane 128 will prompt you to save your work as if you'd clicked STOP, and the window will close. Given that the Apple II version managed to implement multiple documents in 64K of RAM, the Commodore 64 version — let alone the 128 — would seem to have little excuse, though I can think of two potential explanations. One is to increase the amount of memory available for any one document, which the Apple II version was indeed criticized for. The second is particular to the 128: its default memory configuration doesn't have a lot of free RAM, and it may have been judged too complicated to span or swap working sets across banks. (Some fiddling in the monitor shows that the documents simply occupy RAM in bank 1 and don't span elsewhere.) On the other hand, other 128 applications certainly do manage it, and it's possible development deadlines were a contributing factor. Let's start out with the online help, one of Marks and Kotick's fundamental design goals. Assuming you got the joystick (or 1350) plugged into the right port, there's a big honking question mark. What happens when you click on it? You get right into the online help window. The pointer snaps to the options; you can also move the pointer from option or cell to another option or cell with the CRSR keys/128 arrow keys and select it with the Commodore key. The window's yellow border is salient: any window that gives you choices to select from carries a yellow border. We'll see this again later. Incidentally, the manual is not in colour (just black, white and an accent magenta), and possibly as a result is all but totally ignorant of these UI choices or why they were made. The Apple II version's windows have a corner close gadget in the typical open square style, but this would only have made visual sense to someone familiar with the Lisa or Mac — which most Commodore users in 1985 wouldn't be. Instead, here windows you can close have a big bright red EXIT button (the ESC key can also serve this role in most cases). All icons are simply drawn onto the VIC-II high-res screen; unlike Magic Desk where pretty much everything was a sprite, the only sprite here is the pointer. Windows cannot be moved or resized, but by limiting icon and window boundaries to VIC-II 8x8 cells, drawing is fairly fast. Of course, most of the topics are on the yellow help disk (see? it matches). Jane 128, like the Apple II version, supports two disk drives, so you could have the help disk in device 9 and it would find it. The online help is pretty good, considering. It shows the icons and images as they would appear on-screen, and while they aren't live, they are accurate. The only black eye it gets is the technically truthful but functionally insufficient prompt "Press a key to continue" — the joystick or 1350 mouse button also work, and so does the ESC key to exit early, even though the exit button isn't shown. Some help items are animated and show you a demonstration, and each app has its own bespoke help. The system keeps track of what disks are where. If we start Janewrite by going to the typewriter, this blue dialogue box will appear — informational dialogue boxes always have a blue border — as it loads the overlay ... ... but then looks for a data disk, fails to find it, and asks for one. You need one even for a new document, and you can get stuck in a loop here if you don't provide one (pressing ESC just makes it try again, and clicking on the STOP icon doesn't do anything). You could put in the black data disk it comes with, but this one contains our generous donor's files, so we'll just give a blank disk image to VICE instead which Jane will offer to format. When creating a new data disk in VICE, if a 1571 is detected then Jane will want a real .d71 with the full available space, not a .d64, as it will then expect it can format both sides of the virtual disk. However, all of the Jane original disks, including the black one, are formatted single-sided for the 1541 since many early 128 owners would still be using one. The other way you can do this is from the disk icon. As these icons are in grey, so are their windows (except, curiously, help, but I can see how a yellow question mark would have looked bad against a white background), suggesting a global applet served by the central Jane kernel. The disk icon brings up a basic file manager allowing you to make duplicate backup files (but only to the same disk), rename or delete them, or create a new disk. The copy option is the default and is pre-selected when the window opens, which is irritating, because our modern reflexive habit of selecting the file first and then the action will cause an immediate copy to occur before you get the chance to click anything else. I don't think this was just me: there were several spurious duplicate files on the original black data disk I suspect for the same reason. If files are present on the disk, they will appear with their names and a filetype letter (W, C or L for Janewrite, Janecalc or Janelist respectively). Notice the slightly misshapen scrolling arrows, which were nice and clean on the Apple. We'll provide the .d71 to Jane here. Windows warning you about data loss have a red border. Interestingly, it provides both a No button and the exit button, which both do the same thing: abort back to the file manager. Jane seems unable to distinguish between an unformatted disk and a completely absent one, and will (fruitlessly) attempt to format an empty drive. Formatting in progress. The time estimates are surprisingly not far off. With our disk formatted, let's return to Janewrite at the end, since this will be the majority of the documents we'll convert. Instead, we'll start with the spreadsheet, Janecalc. Whenever any of the three built-in applications starts up, and once Jane has located the data disk, a file selector (in grey) appears. There are no spreadsheets ("worksheets") on our freshly formatted disk, so we click the NEW icon. Entering the new filename (blue window). You may have noticed that the red and blue windows are all invariably the same size regardless of contents and any active controls they contain. This probably simplified rendering quite a bit. Because Janecalc is green, its content window border is likewise green, and because Jane 128 doesn't multitask between the applications, it takes up the entirety of the screen. Two templates are provided, along with a roll-your-own option. We'll go with the Home Budget for illustration. The Home Budget template pulls up a simplified home budget by month which you can fill in. Jane supports 40, 64 and 80 column modes, all rendered in software on the VIC-IIe 320x200 display (not with the VDC's 640x200 display), but by default it uses 40. (I'll get to this in more detail in the word processor.) Along the bottom are various operators and the extent of the formula functions available (hardly competition for the Convergent WorkSlate). They can be selected with the pointer in lieu of text entry, which makes them quite discoverable, but in practice it's simply faster to type them. No other functions are implemented. Since the content window cannot be resized, the maximize gadget from the Apple II version became obviously useless and was removed. By using the joystick/mouse you can use the hand to point to a cell and then, with the hand pointing to it, just start typing text or a number. The cursor keys will move the pointer from cell to cell for you, though they will not exit the content area. If you click or otherwise select the cell with the hand, however, Jane considers this an attempt to construct a formula, which again would be frustrating to modern audiences used to, say, Microsoft Excel. But to edit it again, you pick the insert tool instead of the hand, and this time you must select the cell to type in it. Motion around the content area in all three applications is accomplished using multiple small icons in the bottom and right window borders. The "half full" icon pushes it all the way to the outer edge in that direction, while the double and single arrows move the viewport by large leaps and small leaps respectively. There are no thumbs to show relative location, but you can click anywhere along the scroll area for a proportionately "medium" jump if you like. You can also use CTRL-CRSR/CTRL-arrow keys. Even in 40-column mode, and even given that the scroll doesn't animate and just snaps to the new position, scrolling is agonizingly slow and multiple clicks on the scroll controls invariably overshoot. Putting it in 80 column mode doesn't just give you more on the screen — it also means you don't need to endure as many pauses trying to move around. Again, I'll have more to say about font sizes when we get to Janewrite. Unique to Janecalc, the scrolling actually wraps. Worksheets remain limited to 26 columns (A-Z), as in the Apple II version, but now up to 50 rows are allowed. Still, this wouldn't have been sufficient for anything larger than a modest small business, even in 1985. Formulas are approximately VisiCalc-style using A1 absolute notation for cells, though there are no sigils for functions (not that there's very many) and ranges are delimited by colons. Most basic math operators and parentheses are available. Here, we'll get a sum of this row ... ... and then manually calculate an average by dividing the sum by the count of populated rows (we could also just use avg). The template includes this at the bottom, but this shows you how formula entry worked. As we add data to dependent cells the sheets recalculate but circular references are not handled, though in fairness this capability was still not common in small spreadsheet applications. We'll go to Janelist next. When we do so, a red window pops up to prompt us to save our work. Switching to Janelist. Creating our new list. All very consistent (the file manager and requester seem to be part of the Jane kernel). Janelist, in fairness, never purported to be a database in any incarnation and acts more like a cardfile; even the manual merely refers to it as a "list keeper." Like Janecalc it comes with templates, though Janelist supports a substantial number more. For variety I'll try to enter some of my very large CD collection, because I'm one of those people (vinyl is for art, CD is for listening). The list comes up as fillable fields. There may be up to 15 field names up to 12 characters long. If you choose to create your own, then Jane will step you through entering the field names. That's about all the customization you can do. The values for those fields can span multiple lines, which is what the viewport scrolling is for — you use the icons at the bottom to advance through individual cards. Incidentally, Atom Heart Mother is Pink Floyd's finest album and I will tolerate no disagreement. The icon that looks like cards being pulled out suggests how to make a query (the magnifying glass icon, or possibly the funnel icon to denote a filter, wasn't universal at this point). Because it gives you choices, it's yellow, remember? The two OK buttons do different things. The top one filters cards to the query requested, but the bottom one undoes any query. You can query on top of queries for a primitive sort of logical-AND. Partial word searches are supported. For example, here is the second best Beatles album — the best is, of course, Abbey Road. Since we searched for the Beatles, when we run out of Beatles CDs, nothing more turns up from my formidable library. It is also possible to sort cards, in which case they appear in that order instead. You cannot sort on multiple fields, and you can't sort descending. Finally, Janewrite, where we will spend the rest of our time — and where apparently most of Jane's users spent theirs, including our previous owners. I've got a prefab file here I constructed while playing around to explore the file format, so this time we'll load a document instead of entering one, just to show you what that looks like from the file requester. Janewrite is IMHO the most polished and competent of the three apps, and it feels like the most development time was spent on it, too. It also shows what the Jane font renderer is capable of: although non-proportional and only a single typeface, you can see bold, underline, bold and underlined, superscript, and subscript are all possible. The bottom shows left, right, centre and full justification options, done per line, plus the font options, and then search (this time with a magnifying glass) and page layout. These icons are larger and more detailed than the Apple's. As with other parts of the UI, text attributes are set verb-initial, i.e., you would choose the desired style, then the insertion tool, then highlight the range of text and finally release the button (or, annoyingly, wait, which makes fine adjustments harder than they should be). Notice that there is an explicit bold-and-underline option, instead of using the separate bold and underline options in combination: that's because you can't make superscripted or subscripted text bold or underlined. The top of the content area shows the ruler — in characters, not inches — and margin stops and the single paragraph indent stop, which you can drag to change them. Interestingly, the ruler seems to be new for Jane 128: no screenshot for the Apple II version demonstrates one. Janewrite is also capable of a modicum of WYSIWYG if you select the 80 column option. This and other options come from the "computer" icon, which acts as a preference panel. Preferences are saved to the application disk and are global to all three applications. Despite this presenting a choice window (ordinarily yellow), Jane seems to treat it as a global window from the kernel, so it's grey. The bottom set of options are specifically for configuring the printer. Print output is generated with control codes and text only; Jane does not generate graphic sequences, so what actually shows up on the page depends on what your printer actually supports. The default middle print size option corresponds to 80 columns (more accurately, the default or 12cpi font size), while the small font corresponds to the condensed 15cpi and/or 132 column option available on some printers, and the large font corresponds to the 60 or 64-column (e.g., 10cpi) option also only available on some printers — not the expanded double wide printing option more typical of Commodore-specific devices. You could also select between regular fanfold tractor feed or plain paper, as well as the Near Letter Quality print option some printers supported, and finally the printer itself. There was built-in support for the MPS-801 (i.e., 1525), MPS-802 (i.e., 1526), 1101, "Oki" (generic Okidata), and generic "Epson" printers, assuming they were connected somehow to the IEC serial such as through a third-party parallel printer interface. These printer drivers varied wildly in their capabilities: the 1525/MPS-801 "driver" supported almost nothing except basic text, while the generic Okidata and Epson drivers supported nearly everything that Jane could generate. The "OTHER" driver is customizeable, a neat idea, if a little clumsy. A BASIC program called BUILDPRT on the grey disk allows you to populate it with your printer's control codes. Control sequences up to three characters long were supported. You would enter these from the manual, it would save them to disk, and then you could use the custom driver inside Jane. The topmost options affect the appearance of Jane. You can choose from three font sizes, all non-proportional, corresponding to 40, 64 or 80 column text. Confusingly, the 80-column option is the last when it's the middle option for printing. (The Apple II version likely didn't support 80 column text due to its smaller hi-res horizontal width.) Pointer speed and the "beep" Jane makes when you select options are also configurable. Here's how it looks in 80 columns, using the typical "soft 80" approach on the 64 which is more or less legible, at least on a composite display. As there are no colours in the content area, there is no risk of colour clash. This is probably the most useful view in Janewrite. The 64-column view, by contrast, is probably the least useful. The 40-column view is the most legible and 2:1 the size of a typical 80-column line, so it's easy to mentally grok page layout that way, but the 64-column view is odd enough to end up being the worst of both worlds. An interesting feature of Janewrite are the accented characters, which was not frequently seen on home computer-class word processors, as explained by the on-line help. Janewrite treats them as diacritics, and they can even be applied to letters that wouldn't ordinarily use them (because who knows? some language might), such as the grave and acute accents on the n as well as the more typical tilde. In fact, you can apply them to any character, even punctuation. However, the use of the up arrow to indicate a circumflex means there's no way you can type a literal caret into your document, and while a macron would have been nice, omitting the umlaut seems a greater fault. The decorators are also rather hard to distinguish in 80 columns, so Spanish users of Juana 128 might want to go to cuarenta column mode to mirar mejor. Janewrite also has basic find and/or find-and-replace, and a small pane appears below the content area when it's active. There are also decent page layout options, including setting both a per-page title and its position, adding a page number and its position, and margins, number of copies and starting page, though the last two would seem more appropriate for a print dialogue than a page layout one. Note that Jane will always print a 10-space left margin, so an 80-column printed line can be no longer than 70 characters, and this is indeed the maximum width Janewrite will support. However, paragraphs are apparently not stored as continuous sequences of text, demonstrated here with a contrived example. (In fact, we'll prove they aren't shortly.) While Janewrite will word-wrap at the right margin, inserting text after that will wrap onto a new line, not into the next line, even if the two lines were previously entered "together." There's a speed/flexibility tradeoff here in that Janewrite doesn't have to continuously reflow paragraphs, but it also means its concept of a paragraph is entirely based on how much you select. The text can be manually reflowed, joining lines if necessary, by picking one of the paragraph justification options and selecting the text with the hand, which will then be reflowed (and, if needed, spaces inserted) to match. In fact, this is also necessary if you change the margins because Jane doesn't automatically reformat your document then either. I also promised you an example of cut and paste, so here's one using the scissors (cut). You simply pick it and, with the button down, drag it across the text you want and release the button. Note that there is no undo, though I suppose you could just immediately paste it back in. Exiting Janewrite (though not saving, because we need the accented characters to stay in the file). Now that we understand what Jane can do and how it works, let's move on to converting the files. We can extract our test files we made from our .d71 with VICE's c1541 utility and hexdump it. This got a little more difficult than it should have been: % c1541 work.d71 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> dir 0 "data#000 " 01 2a 39 "c.TESTCALC" prg 3 "l.TESTLIST" prg 4 "w.nOTE.2" prg 4 "w.TESTCONV" prg 1278 blocks free. c1541 #8> read "w.TESTCONV" ERR = 62, FILE NOT FOUND, 00, 00 cannot read `w.TESTCONV' on unit 8 invalid filename As you may have guessed, that's because the filenames, and it turns out the data in the files themselves, are stored as true ASCII, not PETSCII (indeed as they would have been on the Apple II, also), so c1541's filename conversion fails. Fortunately, the extract command will walk the entire directory and pull out all the files no matter what they're named. The documents are all regular Commodore PRoGram files with a starting address and they appear to be loaded in-place at that address into bank 1. This introduces the possibility of some delightful save-file hacks but we're not here for that today. That means we can also simply extract our previous owners' files en masse as well. I imaged their disk using my ZoomFloppy and external 1571, and since they are normal PRGs, a BAM copy of the allocated sectors is all we need to do, with one wrinkle: % d64copy -B 9 r_jane_bam.d64 [Warning] growing image file to 683 blocks 14: --*****--*****--***** 8% 15/171[Warning] read error: 0e/00: 5 14: ?******************** 12% 21/171[Warning] giving up... 14: ?******************** 15: ********************* 16: ********************* 17: ********************* 18: ******************* 19: ******************* 20: ******************* 21: ******************* 22: ****..***...***...* 100% 171/171 170 blocks copied. % c1541 r_jane_bam.d64 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> extract c1541 #8> quit Fortunately it doesn't look like the bad sector was in any of the files they cared about. Let's get an idea of the format from our test files. Janecalc files are "huge" because it looks like the entire 26x50 cell range is saved regardless of whether anything's in it or not. Looking at the directory of their data disk where they had saved a couple of sparse test spreadsheets of their own, they also were 39 blocks in length no matter how many cells were actually populated. The on-disk format is consequentially a bit wasteful: 000003a0 00 00 00 00 00 20 20 20 4a 61 6e 75 61 72 79 20 |..... January | 000003b0 20 46 65 62 72 75 61 72 79 20 20 20 20 20 4d 61 | February Ma| 000003c0 72 63 68 20 20 20 20 20 41 70 72 69 6c 20 20 20 |rch April | 000003d0 20 20 20 20 4d 61 79 20 20 20 20 20 20 4a 75 6e | May Jun| 000003e0 65 20 20 20 20 20 20 4a 75 6c 79 20 20 20 20 41 |e July A| 000003f0 75 67 75 73 74 20 53 65 70 74 65 6d 62 65 72 20 |ugust September | 00000400 20 20 4f 63 74 6f 62 65 72 20 20 4e 6f 76 65 6d | October Novem| 00000410 62 65 72 20 20 44 65 63 65 6d 62 65 72 00 00 01 |ber December...| 00000420 04 00 00 00 00 00 00 20 20 54 6f 74 61 6c 20 20 |....... Total | 00000430 20 41 76 65 72 61 67 65 20 20 20 00 00 01 04 00 | Average .....| Cardfiles are stored much more efficiently. Here's the entirety of our two cards. The fields are in the header, padded out to the fixed 12 character length, but with technically unnecessary nulls between them. A spurious "Beatles" entry looks like a buffer that was captured as part of the save, and there is also a page-aligned (counting the starting address) pad of nulls. Otherwise, the value strings look null-delimited, in the order they appear in the field list (unpopulated fields are zero-length strings). When you run out of fields, you're on the next card. % hexdump -C l.TESTLIST 00000000 00 7f 01 00 36 02 08 00 04 00 54 69 74 6c 65 20 |....6.....Title | 00000010 20 20 20 20 20 20 00 4c 65 61 64 20 41 72 74 69 | .Lead Arti| 00000020 73 74 20 00 4f 74 68 65 72 20 41 72 74 69 73 74 |st .Other Artist| 00000030 00 43 6f 6d 70 6f 73 65 72 20 20 20 20 00 43 6f |.Composer .Co| 00000040 6e 64 75 63 74 6f 72 20 20 20 00 57 68 65 72 65 |nductor .Where| 00000050 20 4b 65 70 74 20 20 00 42 6f 72 72 6f 77 65 64 | Kept .Borrowed| 00000060 20 62 79 20 00 44 61 74 65 20 4c 65 6e 74 20 20 | by .Date Lent | 00000070 20 00 00 00 ff ff 01 ff ff ff ff ff ff ff ff ff | ...............| 00000080 ff ff ff ff ff 00 01 02 03 04 05 06 07 00 01 02 |................| 00000090 03 04 05 06 07 ff ff ff ff ff ff ff ff ff ff 00 |................| 000000a0 00 54 68 65 20 42 65 61 74 6c 65 73 00 00 00 00 |.The Beatles....| 000000b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00000100 d7 09 80 60 60 ac 98 09 ae 04 cf a5 ea a9 d7 15 |...``...........| 00000110 80 ac 1d 21 d6 1c 80 60 60 ac 98 09 ae 04 cf 20 |...!...``...... | 00000120 75 0b 00 00 ac 0a 95 a5 f0 b0 a9 a6 b1 a9 a4 b1 |u...............| 00000130 a5 f1 b0 a9 a7 b1 a9 a5 b1 ac c0 08 cf 20 75 0b |............. u.| 00000140 fe ff a5 37 ae 8c ff 00 c0 d8 4b 80 cf a5 f0 b0 |...7......K.....| 00000150 a7 a6 b1 c0 d8 60 80 a5 f1 b0 a7 a7 b1 c0 d8 60 |.....`.........`| 00000160 80 cf a5 f0 b0 a7 a6 b1 00 00 09 00 01 5d f6 00 |.............]..| 00000170 00 00 00 09 00 09 00 01 66 f6 00 00 00 00 54 00 |........f.....T.| 00000180 50 00 01 b1 f6 69 64 65 20 12 00 42 00 01 6f f6 |P....ide ..B..o.| 00000190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 000001a0 00 00 00 00 00 00 00 52 65 76 6f 6c 76 65 72 00 |.......Revolver.| 000001b0 54 68 65 20 42 65 61 74 6c 65 73 00 00 4c 65 6e |The Beatles..Len| 000001c0 6e 6f 6e 2d 4d 63 43 61 72 74 6e 65 79 2d 48 61 |non-McCartney-Ha| 000001d0 72 72 69 73 6f 6e 00 47 65 6f 72 67 65 20 4d 61 |rrison.George Ma| 000001e0 72 74 69 6e 00 00 00 00 00 41 74 6f 6d 20 48 65 |rtin.....Atom He| 000001f0 61 72 74 20 4d 6f 74 68 65 72 00 50 69 6e 6b 20 |art Mother.Pink | 00000200 46 6c 6f 79 64 00 00 57 61 74 65 72 73 2d 47 69 |Floyd..Waters-Gi| 00000210 6c 6d 6f 75 72 2d 4d 61 73 6f 6e 2d 57 72 69 67 |lmour-Mason-Wrig| 00000220 68 74 2d 47 65 65 73 6f 6e 00 50 69 6e 6b 20 46 |ht-Geeson.Pink F| 00000230 6c 6f 79 64 00 00 00 00 |loyd....| 00000238 This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. Next to the tools are the main apps, Janewrite (now in purple), Janecalc (in green) and Janelist (in cyan), and next to them in grey are the same standard applets built into the kernel (online help, print dialogue, disk/file manager and setup). Finally, the STOP icon, now a solid red, stops the current app, and can be used to escape some screens, though not all. Unexpectedly it doesn't serve to quit Jane entirely: you just turn the computer off. Jane remembers what app is loaded and doesn't reload the overlay if you exit and re-enter it. However, unlike Jane for the Apple II, Jane 128 does not allow you to have multiple documents open simultaneously, a limitation that challenges the definition of "integrated software." In fact, of the three official Commodore productivity packages we've looked at so far, only poor abused 3-Plus-1 could do so. If you're working in one app and select another, Jane 128 will prompt you to save your work as if you'd clicked STOP, and the window will close. Given that the Apple II version managed to implement multiple documents in 64K of RAM, the Commodore 64 version — let alone the 128 — would seem to have little excuse, though I can think of two potential explanations. One is to increase the amount of memory available for any one document, which the Apple II version was indeed criticized for. The second is particular to the 128: its default memory configuration doesn't have a lot of free RAM, and it may have been judged too complicated to span or swap working sets across banks. (Some fiddling in the monitor shows that the documents simply occupy RAM in bank 1 and don't span elsewhere.) On the other hand, other 128 applications certainly do manage it, and it's possible development deadlines were a contributing factor. Let's start out with the online help, one of Marks and Kotick's fundamental design goals. Assuming you got the joystick (or 1350) plugged into the right port, there's a big honking question mark. What happens when you click on it? You get right into the online help window. The pointer snaps to the options; you can also move the pointer from option or cell to another option or cell with the CRSR keys/128 arrow keys and select it with the Commodore key. The window's yellow border is salient: any window that gives you choices to select from carries a yellow border. We'll see this again later. Incidentally, the manual is not in colour (just black, white and an accent magenta), and possibly as a result is all but totally ignorant of these UI choices or why they were made. The Apple II version's windows have a corner close gadget in the typical open square style, but this would only have made visual sense to someone familiar with the Lisa or Mac — which most Commodore users in 1985 wouldn't be. Instead, here windows you can close have a big bright red EXIT button (the ESC key can also serve this role in most cases). All icons are simply drawn onto the VIC-II high-res screen; unlike Magic Desk where pretty much everything was a sprite, the only sprite here is the pointer. Windows cannot be moved or resized, but by limiting icon and window boundaries to VIC-II 8x8 cells, drawing is fairly fast. Of course, most of the topics are on the yellow help disk (see? it matches). Jane 128, like the Apple II version, supports two disk drives, so you could have the help disk in device 9 and it would find it. The online help is pretty good, considering. It shows the icons and images as they would appear on-screen, and while they aren't live, they are accurate. The only black eye it gets is the technically truthful but functionally insufficient prompt "Press a key to continue" — the joystick or 1350 mouse button also work, and so does the ESC key to exit early, even though the exit button isn't shown. Some help items are animated and show you a demonstration, and each app has its own bespoke help. The system keeps track of what disks are where. If we start Janewrite by going to the typewriter, this blue dialogue box will appear — informational dialogue boxes always have a blue border — as it loads the overlay ... ... but then looks for a data disk, fails to find it, and asks for one. You need one even for a new document, and you can get stuck in a loop here if you don't provide one (pressing ESC just makes it try again, and clicking on the STOP icon doesn't do anything). You could put in the black data disk it comes with, but this one contains our generous donor's files, so we'll just give a blank disk image to VICE instead which Jane will offer to format. When creating a new data disk in VICE, if a 1571 is detected then Jane will want a real .d71 with the full available space, not a .d64, as it will then expect it can format both sides of the virtual disk. However, all of the Jane original disks, including the black one, are formatted single-sided for the 1541 since many early 128 owners would still be using one. The other way you can do this is from the disk icon. As these icons are in grey, so are their windows (except, curiously, help, but I can see how a yellow question mark would have looked bad against a white background), suggesting a global applet served by the central Jane kernel. The disk icon brings up a basic file manager allowing you to make duplicate backup files (but only to the same disk), rename or delete them, or create a new disk. The copy option is the default and is pre-selected when the window opens, which is irritating, because our modern reflexive habit of selecting the file first and then the action will cause an immediate copy to occur before you get the chance to click anything else. I don't think this was just me: there were several spurious duplicate files on the original black data disk I suspect for the same reason. If files are present on the disk, they will appear with their names and a filetype letter (W, C or L for Janewrite, Janecalc or Janelist respectively). Notice the slightly misshapen scrolling arrows, which were nice and clean on the Apple. We'll provide the .d71 to Jane here. Windows warning you about data loss have a red border. Interestingly, it provides both a No button and the exit button, which both do the same thing: abort back to the file manager. Jane seems unable to distinguish between an unformatted disk and a completely absent one, and will (fruitlessly) attempt to format an empty drive. Formatting in progress. The time estimates are surprisingly not far off. With our disk formatted, let's return to Janewrite at the end, since this will be the majority of the documents we'll convert. Instead, we'll start with the spreadsheet, Janecalc. Whenever any of the three built-in applications starts up, and once Jane has located the data disk, a file selector (in grey) appears. There are no spreadsheets ("worksheets") on our freshly formatted disk, so we click the NEW icon. Entering the new filename (blue window). You may have noticed that the red and blue windows are all invariably the same size regardless of contents and any active controls they contain. This probably simplified rendering quite a bit. Because Janecalc is green, its content window border is likewise green, and because Jane 128 doesn't multitask between the applications, it takes up the entirety of the screen. Two templates are provided, along with a roll-your-own option. We'll go with the Home Budget for illustration. The Home Budget template pulls up a simplified home budget by month which you can fill in. Jane supports 40, 64 and 80 column modes, all rendered in software on the VIC-IIe 320x200 display (not with the VDC's 640x200 display), but by default it uses 40. (I'll get to this in more detail in the word processor.) Along the bottom are various operators and the extent of the formula functions available (hardly competition for the Convergent WorkSlate). They can be selected with the pointer in lieu of text entry, which makes them quite discoverable, but in practice it's simply faster to type them. No other functions are implemented. Since the content window cannot be resized, the maximize gadget from the Apple II version became obviously useless and was removed. By using the joystick/mouse you can use the hand to point to a cell and then, with the hand pointing to it, just start typing text or a number. The cursor keys will move the pointer from cell to cell for you, though they will not exit the content area. If you click or otherwise select the cell with the hand, however, Jane considers this an attempt to construct a formula, which again would be frustrating to modern audiences used to, say, Microsoft Excel. But to edit it again, you pick the insert tool instead of the hand, and this time you must select the cell to type in it. Motion around the content area in all three applications is accomplished using multiple small icons in the bottom and right window borders. The "half full" icon pushes it all the way to the outer edge in that direction, while the double and single arrows move the viewport by large leaps and small leaps respectively. There are no thumbs to show relative location, but you can click anywhere along the scroll area for a proportionately "medium" jump if you like. You can also use CTRL-CRSR/CTRL-arrow keys. Even in 40-column mode, and even given that the scroll doesn't animate and just snaps to the new position, scrolling is agonizingly slow and multiple clicks on the scroll controls invariably overshoot. Putting it in 80 column mode doesn't just give you more on the screen — it also means you don't need to endure as many pauses trying to move around. Again, I'll have more to say about font sizes when we get to Janewrite. Unique to Janecalc, the scrolling actually wraps. Worksheets remain limited to 26 columns (A-Z), as in the Apple II version, but now up to 50 rows are allowed. Still, this wouldn't have been sufficient for anything larger than a modest small business, even in 1985. Formulas are approximately VisiCalc-style using A1 absolute notation for cells, though there are no sigils for functions (not that there's very many) and ranges are delimited by colons. Most basic math operators and parentheses are available. Here, we'll get a sum of this row ... ... and then manually calculate an average by dividing the sum by the count of populated rows (we could also just use avg). The template includes this at the bottom, but this shows you how formula entry worked. As we add data to dependent cells the sheets recalculate but circular references are not handled, though in fairness this capability was still not common in small spreadsheet applications. We'll go to Janelist next. When we do so, a red window pops up to prompt us to save our work. Switching to Janelist. Creating our new list. All very consistent (the file manager and requester seem to be part of the Jane kernel). Janelist, in fairness, never purported to be a database in any incarnation and acts more like a cardfile; even the manual merely refers to it as a "list keeper." Like Janecalc it comes with templates, though Janelist supports a substantial number more. For variety I'll try to enter some of my very large CD collection, because I'm one of those people (vinyl is for art, CD is for listening). The list comes up as fillable fields. There may be up to 15 field names up to 12 characters long. If you choose to create your own, then Jane will step you through entering the field names. That's about all the customization you can do. The values for those fields can span multiple lines, which is what the viewport scrolling is for — you use the icons at the bottom to advance through individual cards. Incidentally, Atom Heart Mother is Pink Floyd's finest album and I will tolerate no disagreement. The icon that looks like cards being pulled out suggests how to make a query (the magnifying glass icon, or possibly the funnel icon to denote a filter, wasn't universal at this point). Because it gives you choices, it's yellow, remember? The two OK buttons do different things. The top one filters cards to the query requested, but the bottom one undoes any query. You can query on top of queries for a primitive sort of logical-AND. Partial word searches are supported. For example, here is the second best Beatles album — the best is, of course, Abbey Road. Since we searched for the Beatles, when we run out of Beatles CDs, nothing more turns up from my formidable library. It is also possible to sort cards, in which case they appear in that order instead. You cannot sort on multiple fields, and you can't sort descending. Finally, Janewrite, where we will spend the rest of our time — and where apparently most of Jane's users spent theirs, including our previous owners. I've got a prefab file here I constructed while playing around to explore the file format, so this time we'll load a document instead of entering one, just to show you what that looks like from the file requester. Janewrite is IMHO the most polished and competent of the three apps, and it feels like the most development time was spent on it, too. It also shows what the Jane font renderer is capable of: although non-proportional and only a single typeface, you can see bold, underline, bold and underlined, superscript, and subscript are all possible. The bottom shows left, right, centre and full justification options, done per line, plus the font options, and then search (this time with a magnifying glass) and page layout. These icons are larger and more detailed than the Apple's. As with other parts of the UI, text attributes are set verb-initial, i.e., you would choose the desired style, then the insertion tool, then highlight the range of text and finally release the button (or, annoyingly, wait, which makes fine adjustments harder than they should be). Notice that there is an explicit bold-and-underline option, instead of using the separate bold and underline options in combination: that's because you can't make superscripted or subscripted text bold or underlined. The top of the content area shows the ruler — in characters, not inches — and margin stops and the single paragraph indent stop, which you can drag to change them. Interestingly, the ruler seems to be new for Jane 128: no screenshot for the Apple II version demonstrates one. Janewrite is also capable of a modicum of WYSIWYG if you select the 80 column option. This and other options come from the "computer" icon, which acts as a preference panel. Preferences are saved to the application disk and are global to all three applications. Despite this presenting a choice window (ordinarily yellow), Jane seems to treat it as a global window from the kernel, so it's grey. The bottom set of options are specifically for configuring the printer. Print output is generated with control codes and text only; Jane does not generate graphic sequences, so what actually shows up on the page depends on what your printer actually supports. The default middle print size option corresponds to 80 columns (more accurately, the default or 12cpi font size), while the small font corresponds to the condensed 15cpi and/or 132 column option available on some printers, and the large font corresponds to the 60 or 64-column (e.g., 10cpi) option also only available on some printers — not the expanded double wide printing option more typical of Commodore-specific devices. You could also select between regular fanfold tractor feed or plain paper, as well as the Near Letter Quality print option some printers supported, and finally the printer itself. There was built-in support for the MPS-801 (i.e., 1525), MPS-802 (i.e., 1526), 1101, "Oki" (generic Okidata), and generic "Epson" printers, assuming they were connected somehow to the IEC serial such as through a third-party parallel printer interface. These printer drivers varied wildly in their capabilities: the 1525/MPS-801 "driver" supported almost nothing except basic text, while the generic Okidata and Epson drivers supported nearly everything that Jane could generate. The "OTHER" driver is customizeable, a neat idea, if a little clumsy. A BASIC program called BUILDPRT on the grey disk allows you to populate it with your printer's control codes. Control sequences up to three characters long were supported. You would enter these from the manual, it would save them to disk, and then you could use the custom driver inside Jane. The topmost options affect the appearance of Jane. You can choose from three font sizes, all non-proportional, corresponding to 40, 64 or 80 column text. Confusingly, the 80-column option is the last when it's the middle option for printing. (The Apple II version likely didn't support 80 column text due to its smaller hi-res horizontal width.) Pointer speed and the "beep" Jane makes when you select options are also configurable. Here's how it looks in 80 columns, using the typical "soft 80" approach on the 64 which is more or less legible, at least on a composite display. As there are no colours in the content area, there is no risk of colour clash. This is probably the most useful view in Janewrite. The 64-column view, by contrast, is probably the least useful. The 40-column view is the most legible and 2:1 the size of a typical 80-column line, so it's easy to mentally grok page layout that way, but the 64-column view is odd enough to end up being the worst of both worlds. An interesting feature of Janewrite are the accented characters, which was not frequently seen on home computer-class word processors, as explained by the on-line help. Janewrite treats them as diacritics, and they can even be applied to letters that wouldn't ordinarily use them (because who knows? some language might), such as the grave and acute accents on the n as well as the more typical tilde. In fact, you can apply them to any character, even punctuation. However, the use of the up arrow to indicate a circumflex means there's no way you can type a literal caret into your document, and while a macron would have been nice, omitting the umlaut seems a greater fault. The decorators are also rather hard to distinguish in 80 columns, so Spanish users of Juana 128 might want to go to cuarenta column mode to mirar mejor. Janewrite also has basic find and/or find-and-replace, and a small pane appears below the content area when it's active. There are also decent page layout options, including setting both a per-page title and its position, adding a page number and its position, and margins, number of copies and starting page, though the last two would seem more appropriate for a print dialogue than a page layout one. Note that Jane will always print a 10-space left margin, so an 80-column printed line can be no longer than 70 characters, and this is indeed the maximum width Janewrite will support. However, paragraphs are apparently not stored as continuous sequences of text, demonstrated here with a contrived example. (In fact, we'll prove they aren't shortly.) While Janewrite will word-wrap at the right margin, inserting text after that will wrap onto a new line, not into the next line, even if the two lines were previously entered "together." There's a speed/flexibility tradeoff here in that Janewrite doesn't have to continuously reflow paragraphs, but it also means its concept of a paragraph is entirely based on how much you select. The text can be manually reflowed, joining lines if necessary, by picking one of the paragraph justification options and selecting the text with the hand, which will then be reflowed (and, if needed, spaces inserted) to match. In fact, this is also necessary if you change the margins because Jane doesn't automatically reformat your document then either. I also promised you an example of cut and paste, so here's one using the scissors (cut). You simply pick it and, with the button down, drag it across the text you want and release the button. Note that there is no undo, though I suppose you could just immediately paste it back in. Exiting Janewrite (though not saving, because we need the accented characters to stay in the file). Now that we understand what Jane can do and how it works, let's move on to converting the files. We can extract our test files we made from our .d71 with VICE's c1541 utility and hexdump it. This got a little more difficult than it should have been: % c1541 work.d71 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> dir 0 "data#000 " 01 2a 39 "c.TESTCALC" prg 3 "l.TESTLIST" prg 4 "w.nOTE.2" prg 4 "w.TESTCONV" prg 1278 blocks free. c1541 #8> read "w.TESTCONV" ERR = 62, FILE NOT FOUND, 00, 00 cannot read `w.TESTCONV' on unit 8 invalid filename As you may have guessed, that's because the filenames, and it turns out the data in the files themselves, are stored as true ASCII, not PETSCII (indeed as they would have been on the Apple II, also), so c1541's filename conversion fails. Fortunately, the extract command will walk the entire directory and pull out all the files no matter what they're named. The documents are all regular Commodore PRoGram files with a starting address and they appear to be loaded in-place at that address into bank 1. This introduces the possibility of some delightful save-file hacks but we're not here for that today. That means we can also simply extract our previous owners' files en masse as well. I imaged their disk using my ZoomFloppy and external 1571, and since they are normal PRGs, a BAM copy of the allocated sectors is all we need to do, with one wrinkle: % d64copy -B 9 r_jane_bam.d64 [Warning] growing image file to 683 blocks 14: --*****--*****--***** 8% 15/171[Warning] read error: 0e/00: 5 14: ?******************** 12% 21/171[Warning] giving up... 14: ?******************** 15: ********************* 16: ********************* 17: ********************* 18: ******************* 19: ******************* 20: ******************* 21: ******************* 22: ****..***...***...* 100% 171/171 170 blocks copied. % c1541 r_jane_bam.d64 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> extract c1541 #8> quit Fortunately it doesn't look like the bad sector was in any of the files they cared about. Let's get an idea of the format from our test files. Janecalc files are "huge" because it looks like the entire 26x50 cell range is saved regardless of whether anything's in it or not. Looking at the directory of their data disk where they had saved a couple of sparse test spreadsheets of their own, they also were 39 blocks in length no matter how many cells were actually populated. The on-disk format is consequentially a bit wasteful: 000003a0 00 00 00 00 00 20 20 20 4a 61 6e 75 61 72 79 20 |..... January | 000003b0 20 46 65 62 72 75 61 72 79 20 20 20 20 20 4d 61 | February Ma| 000003c0 72 63 68 20 20 20 20 20 41 70 72 69 6c 20 20 20 |rch April | 000003d0 20 20 20 20 4d 61 79 20 20 20 20 20 20 4a 75 6e | May Jun| 000003e0 65 20 20 20 20 20 20 4a 75 6c 79 20 20 20 20 41 |e July A| 000003f0 75 67 75 73 74 20 53 65 70 74 65 6d 62 65 72 20 |ugust September | 00000400 20 20 4f 63 74 6f 62 65 72 20 20 4e 6f 76 65 6d | October Novem| 00000410 62 65 72 20 20 44 65 63 65 6d 62 65 72 00 00 01 |ber December...| 00000420 04 00 00 00 00 00 00 20 20 54 6f 74 61 6c 20 20 |....... Total | 00000430 20 41 76 65 72 61 67 65 20 20 20 00 00 01 04 00 | Average .....| Cardfiles are stored much more efficiently. Here's the entirety of our two cards. The fields are in the header, padded out to the fixed 12 character length, but with technically unnecessary nulls between them. A spurious "Beatles" entry looks like a buffer that was captured as part of the save, and there is also a page-aligned (counting the starting address) pad of nulls. Otherwise, the value strings look null-delimited, in the order they appear in the field list (unpopulated fields are zero-length strings). When you run out of fields, you're on the next card. % hexdump -C l.TESTLIST 00000000 00 7f 01 00 36 02 08 00 04 00 54 69 74 6c 65 20 |....6.....Title | 00000010 20 20 20 20 20 20 00 4c 65 61 64 20 41 72 74 69 | .Lead Arti| 00000020 73 74 20 00 4f 74 68 65 72 20 41 72 74 69 73 74 |st .Other Artist| 00000030 00 43 6f 6d 70 6f 73 65 72 20 20 20 20 00 43 6f |.Composer .Co| 00000040 6e 64 75 63 74 6f 72 20 20 20 00 57 68 65 72 65 |nductor .Where| 00000050 20 4b 65 70 74 20 20 00 42 6f 72 72 6f 77 65 64 | Kept .Borrowed| 00000060 20 62 79 20 00 44 61 74 65 20 4c 65 6e 74 20 20 | by .Date Lent | 00000070 20 00 00 00 ff ff 01 ff ff ff ff ff ff ff ff ff | ...............| 00000080 ff ff ff ff ff 00 01 02 03 04 05 06 07 00 01 02 |................| 00000090 03 04 05 06 07 ff ff ff ff ff ff ff ff ff ff 00 |................| 000000a0 00 54 68 65 20 42 65 61 74 6c 65 73 00 00 00 00 |.The Beatles....| 000000b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00000100 d7 09 80 60 60 ac 98 09 ae 04 cf a5 ea a9 d7 15 |...``...........| 00000110 80 ac 1d 21 d6 1c 80 60 60 ac 98 09 ae 04 cf 20 |...!...``...... | 00000120 75 0b 00 00 ac 0a 95 a5 f0 b0 a9 a6 b1 a9 a4 b1 |u...............| 00000130 a5 f1 b0 a9 a7 b1 a9 a5 b1 ac c0 08 cf 20 75 0b |............. u.| 00000140 fe ff a5 37 ae 8c ff 00 c0 d8 4b 80 cf a5 f0 b0 |...7......K.....| 00000150 a7 a6 b1 c0 d8 60 80 a5 f1 b0 a7 a7 b1 c0 d8 60 |.....`.........`| 00000160 80 cf a5 f0 b0 a7 a6 b1 00 00 09 00 01 5d f6 00 |.............]..| 00000170 00 00 00 09 00 09 00 01 66 f6 00 00 00 00 54 00 |........f.....T.| 00000180 50 00 01 b1 f6 69 64 65 20 12 00 42 00 01 6f f6 |P....ide ..B..o.| 00000190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 000001a0 00 00 00 00 00 00 00 52 65 76 6f 6c 76 65 72 00 |.......Revolver.| 000001b0 54 68 65 20 42 65 61 74 6c 65 73 00 00 4c 65 6e |The Beatles..Len| 000001c0 6e 6f 6e 2d 4d 63 43 61 72 74 6e 65 79 2d 48 61 |non-McCartney-Ha| 000001d0 72 72 69 73 6f 6e 00 47 65 6f 72 67 65 20 4d 61 |rrison.George Ma| 000001e0 72 74 69 6e 00 00 00 00 00 41 74 6f 6d 20 48 65 |rtin.....Atom He| 000001f0 61 72 74 20 4d 6f 74 68 65 72 00 50 69 6e 6b 20 |art Mother.Pink | 00000200 46 6c 6f 79 64 00 00 57 61 74 65 72 73 2d 47 69 |Floyd..Waters-Gi| 00000210 6c 6d 6f 75 72 2d 4d 61 73 6f 6e 2d 57 72 69 67 |lmour-Mason-Wrig| 00000220 68 74 2d 47 65 65 73 6f 6e 00 50 69 6e 6b 20 46 |ht-Geeson.Pink F| 00000230 6c 6f 79 64 00 00 00 00 |loyd....| 00000238 This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. However, unlike Jane for the Apple II, Jane 128 does not allow you to have multiple documents open simultaneously, a limitation that challenges the definition of "integrated software." In fact, of the three official Commodore productivity packages we've looked at so far, only poor abused 3-Plus-1 could do so. If you're working in one app and select another, Jane 128 will prompt you to save your work as if you'd clicked STOP, and the window will close. Given that the Apple II version managed to implement multiple documents in 64K of RAM, the Commodore 64 version — let alone the 128 — would seem to have little excuse, though I can think of two potential explanations. One is to increase the amount of memory available for any one document, which the Apple II version was indeed criticized for. The second is particular to the 128: its default memory configuration doesn't have a lot of free RAM, and it may have been judged too complicated to span or swap working sets across banks. (Some fiddling in the monitor shows that the documents simply occupy RAM in bank 1 and don't span elsewhere.) On the other hand, other 128 applications certainly do manage it, and it's possible development deadlines were a contributing factor. Let's start out with the online help, one of Marks and Kotick's fundamental design goals. Assuming you got the joystick (or 1350) plugged into the right port, there's a big honking question mark. What happens when you click on it? You get right into the online help window. The pointer snaps to the options; you can also move the pointer from option or cell to another option or cell with the CRSR keys/128 arrow keys and select it with the Commodore key. The window's yellow border is salient: any window that gives you choices to select from carries a yellow border. We'll see this again later. Incidentally, the manual is not in colour (just black, white and an accent magenta), and possibly as a result is all but totally ignorant of these UI choices or why they were made. The Apple II version's windows have a corner close gadget in the typical open square style, but this would only have made visual sense to someone familiar with the Lisa or Mac — which most Commodore users in 1985 wouldn't be. Instead, here windows you can close have a big bright red EXIT button (the ESC key can also serve this role in most cases). All icons are simply drawn onto the VIC-II high-res screen; unlike Magic Desk where pretty much everything was a sprite, the only sprite here is the pointer. Windows cannot be moved or resized, but by limiting icon and window boundaries to VIC-II 8x8 cells, drawing is fairly fast. Of course, most of the topics are on the yellow help disk (see? it matches). Jane 128, like the Apple II version, supports two disk drives, so you could have the help disk in device 9 and it would find it. The online help is pretty good, considering. It shows the icons and images as they would appear on-screen, and while they aren't live, they are accurate. The only black eye it gets is the technically truthful but functionally insufficient prompt "Press a key to continue" — the joystick or 1350 mouse button also work, and so does the ESC key to exit early, even though the exit button isn't shown. Some help items are animated and show you a demonstration, and each app has its own bespoke help. The system keeps track of what disks are where. If we start Janewrite by going to the typewriter, this blue dialogue box will appear — informational dialogue boxes always have a blue border — as it loads the overlay ... ... but then looks for a data disk, fails to find it, and asks for one. You need one even for a new document, and you can get stuck in a loop here if you don't provide one (pressing ESC just makes it try again, and clicking on the STOP icon doesn't do anything). You could put in the black data disk it comes with, but this one contains our generous donor's files, so we'll just give a blank disk image to VICE instead which Jane will offer to format. When creating a new data disk in VICE, if a 1571 is detected then Jane will want a real .d71 with the full available space, not a .d64, as it will then expect it can format both sides of the virtual disk. However, all of the Jane original disks, including the black one, are formatted single-sided for the 1541 since many early 128 owners would still be using one. The other way you can do this is from the disk icon. As these icons are in grey, so are their windows (except, curiously, help, but I can see how a yellow question mark would have looked bad against a white background), suggesting a global applet served by the central Jane kernel. The disk icon brings up a basic file manager allowing you to make duplicate backup files (but only to the same disk), rename or delete them, or create a new disk. The copy option is the default and is pre-selected when the window opens, which is irritating, because our modern reflexive habit of selecting the file first and then the action will cause an immediate copy to occur before you get the chance to click anything else. I don't think this was just me: there were several spurious duplicate files on the original black data disk I suspect for the same reason. If files are present on the disk, they will appear with their names and a filetype letter (W, C or L for Janewrite, Janecalc or Janelist respectively). Notice the slightly misshapen scrolling arrows, which were nice and clean on the Apple. We'll provide the .d71 to Jane here. Windows warning you about data loss have a red border. Interestingly, it provides both a No button and the exit button, which both do the same thing: abort back to the file manager. Jane seems unable to distinguish between an unformatted disk and a completely absent one, and will (fruitlessly) attempt to format an empty drive. Formatting in progress. The time estimates are surprisingly not far off. With our disk formatted, let's return to Janewrite at the end, since this will be the majority of the documents we'll convert. Instead, we'll start with the spreadsheet, Janecalc. Whenever any of the three built-in applications starts up, and once Jane has located the data disk, a file selector (in grey) appears. There are no spreadsheets ("worksheets") on our freshly formatted disk, so we click the NEW icon. Entering the new filename (blue window). You may have noticed that the red and blue windows are all invariably the same size regardless of contents and any active controls they contain. This probably simplified rendering quite a bit. Because Janecalc is green, its content window border is likewise green, and because Jane 128 doesn't multitask between the applications, it takes up the entirety of the screen. Two templates are provided, along with a roll-your-own option. We'll go with the Home Budget for illustration. The Home Budget template pulls up a simplified home budget by month which you can fill in. Jane supports 40, 64 and 80 column modes, all rendered in software on the VIC-IIe 320x200 display (not with the VDC's 640x200 display), but by default it uses 40. (I'll get to this in more detail in the word processor.) Along the bottom are various operators and the extent of the formula functions available (hardly competition for the Convergent WorkSlate). They can be selected with the pointer in lieu of text entry, which makes them quite discoverable, but in practice it's simply faster to type them. No other functions are implemented. Since the content window cannot be resized, the maximize gadget from the Apple II version became obviously useless and was removed. By using the joystick/mouse you can use the hand to point to a cell and then, with the hand pointing to it, just start typing text or a number. The cursor keys will move the pointer from cell to cell for you, though they will not exit the content area. If you click or otherwise select the cell with the hand, however, Jane considers this an attempt to construct a formula, which again would be frustrating to modern audiences used to, say, Microsoft Excel. But to edit it again, you pick the insert tool instead of the hand, and this time you must select the cell to type in it. Motion around the content area in all three applications is accomplished using multiple small icons in the bottom and right window borders. The "half full" icon pushes it all the way to the outer edge in that direction, while the double and single arrows move the viewport by large leaps and small leaps respectively. There are no thumbs to show relative location, but you can click anywhere along the scroll area for a proportionately "medium" jump if you like. You can also use CTRL-CRSR/CTRL-arrow keys. Even in 40-column mode, and even given that the scroll doesn't animate and just snaps to the new position, scrolling is agonizingly slow and multiple clicks on the scroll controls invariably overshoot. Putting it in 80 column mode doesn't just give you more on the screen — it also means you don't need to endure as many pauses trying to move around. Again, I'll have more to say about font sizes when we get to Janewrite. Unique to Janecalc, the scrolling actually wraps. Worksheets remain limited to 26 columns (A-Z), as in the Apple II version, but now up to 50 rows are allowed. Still, this wouldn't have been sufficient for anything larger than a modest small business, even in 1985. Formulas are approximately VisiCalc-style using A1 absolute notation for cells, though there are no sigils for functions (not that there's very many) and ranges are delimited by colons. Most basic math operators and parentheses are available. Here, we'll get a sum of this row ... ... and then manually calculate an average by dividing the sum by the count of populated rows (we could also just use avg). The template includes this at the bottom, but this shows you how formula entry worked. As we add data to dependent cells the sheets recalculate but circular references are not handled, though in fairness this capability was still not common in small spreadsheet applications. We'll go to Janelist next. When we do so, a red window pops up to prompt us to save our work. Switching to Janelist. Creating our new list. All very consistent (the file manager and requester seem to be part of the Jane kernel). Janelist, in fairness, never purported to be a database in any incarnation and acts more like a cardfile; even the manual merely refers to it as a "list keeper." Like Janecalc it comes with templates, though Janelist supports a substantial number more. For variety I'll try to enter some of my very large CD collection, because I'm one of those people (vinyl is for art, CD is for listening). The list comes up as fillable fields. There may be up to 15 field names up to 12 characters long. If you choose to create your own, then Jane will step you through entering the field names. That's about all the customization you can do. The values for those fields can span multiple lines, which is what the viewport scrolling is for — you use the icons at the bottom to advance through individual cards. Incidentally, Atom Heart Mother is Pink Floyd's finest album and I will tolerate no disagreement. The icon that looks like cards being pulled out suggests how to make a query (the magnifying glass icon, or possibly the funnel icon to denote a filter, wasn't universal at this point). Because it gives you choices, it's yellow, remember? The two OK buttons do different things. The top one filters cards to the query requested, but the bottom one undoes any query. You can query on top of queries for a primitive sort of logical-AND. Partial word searches are supported. For example, here is the second best Beatles album — the best is, of course, Abbey Road. Since we searched for the Beatles, when we run out of Beatles CDs, nothing more turns up from my formidable library. It is also possible to sort cards, in which case they appear in that order instead. You cannot sort on multiple fields, and you can't sort descending. Finally, Janewrite, where we will spend the rest of our time — and where apparently most of Jane's users spent theirs, including our previous owners. I've got a prefab file here I constructed while playing around to explore the file format, so this time we'll load a document instead of entering one, just to show you what that looks like from the file requester. Janewrite is IMHO the most polished and competent of the three apps, and it feels like the most development time was spent on it, too. It also shows what the Jane font renderer is capable of: although non-proportional and only a single typeface, you can see bold, underline, bold and underlined, superscript, and subscript are all possible. The bottom shows left, right, centre and full justification options, done per line, plus the font options, and then search (this time with a magnifying glass) and page layout. These icons are larger and more detailed than the Apple's. As with other parts of the UI, text attributes are set verb-initial, i.e., you would choose the desired style, then the insertion tool, then highlight the range of text and finally release the button (or, annoyingly, wait, which makes fine adjustments harder than they should be). Notice that there is an explicit bold-and-underline option, instead of using the separate bold and underline options in combination: that's because you can't make superscripted or subscripted text bold or underlined. The top of the content area shows the ruler — in characters, not inches — and margin stops and the single paragraph indent stop, which you can drag to change them. Interestingly, the ruler seems to be new for Jane 128: no screenshot for the Apple II version demonstrates one. Janewrite is also capable of a modicum of WYSIWYG if you select the 80 column option. This and other options come from the "computer" icon, which acts as a preference panel. Preferences are saved to the application disk and are global to all three applications. Despite this presenting a choice window (ordinarily yellow), Jane seems to treat it as a global window from the kernel, so it's grey. The bottom set of options are specifically for configuring the printer. Print output is generated with control codes and text only; Jane does not generate graphic sequences, so what actually shows up on the page depends on what your printer actually supports. The default middle print size option corresponds to 80 columns (more accurately, the default or 12cpi font size), while the small font corresponds to the condensed 15cpi and/or 132 column option available on some printers, and the large font corresponds to the 60 or 64-column (e.g., 10cpi) option also only available on some printers — not the expanded double wide printing option more typical of Commodore-specific devices. You could also select between regular fanfold tractor feed or plain paper, as well as the Near Letter Quality print option some printers supported, and finally the printer itself. There was built-in support for the MPS-801 (i.e., 1525), MPS-802 (i.e., 1526), 1101, "Oki" (generic Okidata), and generic "Epson" printers, assuming they were connected somehow to the IEC serial such as through a third-party parallel printer interface. These printer drivers varied wildly in their capabilities: the 1525/MPS-801 "driver" supported almost nothing except basic text, while the generic Okidata and Epson drivers supported nearly everything that Jane could generate. The "OTHER" driver is customizeable, a neat idea, if a little clumsy. A BASIC program called BUILDPRT on the grey disk allows you to populate it with your printer's control codes. Control sequences up to three characters long were supported. You would enter these from the manual, it would save them to disk, and then you could use the custom driver inside Jane. The topmost options affect the appearance of Jane. You can choose from three font sizes, all non-proportional, corresponding to 40, 64 or 80 column text. Confusingly, the 80-column option is the last when it's the middle option for printing. (The Apple II version likely didn't support 80 column text due to its smaller hi-res horizontal width.) Pointer speed and the "beep" Jane makes when you select options are also configurable. Here's how it looks in 80 columns, using the typical "soft 80" approach on the 64 which is more or less legible, at least on a composite display. As there are no colours in the content area, there is no risk of colour clash. This is probably the most useful view in Janewrite. The 64-column view, by contrast, is probably the least useful. The 40-column view is the most legible and 2:1 the size of a typical 80-column line, so it's easy to mentally grok page layout that way, but the 64-column view is odd enough to end up being the worst of both worlds. An interesting feature of Janewrite are the accented characters, which was not frequently seen on home computer-class word processors, as explained by the on-line help. Janewrite treats them as diacritics, and they can even be applied to letters that wouldn't ordinarily use them (because who knows? some language might), such as the grave and acute accents on the n as well as the more typical tilde. In fact, you can apply them to any character, even punctuation. However, the use of the up arrow to indicate a circumflex means there's no way you can type a literal caret into your document, and while a macron would have been nice, omitting the umlaut seems a greater fault. The decorators are also rather hard to distinguish in 80 columns, so Spanish users of Juana 128 might want to go to cuarenta column mode to mirar mejor. Janewrite also has basic find and/or find-and-replace, and a small pane appears below the content area when it's active. There are also decent page layout options, including setting both a per-page title and its position, adding a page number and its position, and margins, number of copies and starting page, though the last two would seem more appropriate for a print dialogue than a page layout one. Note that Jane will always print a 10-space left margin, so an 80-column printed line can be no longer than 70 characters, and this is indeed the maximum width Janewrite will support. However, paragraphs are apparently not stored as continuous sequences of text, demonstrated here with a contrived example. (In fact, we'll prove they aren't shortly.) While Janewrite will word-wrap at the right margin, inserting text after that will wrap onto a new line, not into the next line, even if the two lines were previously entered "together." There's a speed/flexibility tradeoff here in that Janewrite doesn't have to continuously reflow paragraphs, but it also means its concept of a paragraph is entirely based on how much you select. The text can be manually reflowed, joining lines if necessary, by picking one of the paragraph justification options and selecting the text with the hand, which will then be reflowed (and, if needed, spaces inserted) to match. In fact, this is also necessary if you change the margins because Jane doesn't automatically reformat your document then either. I also promised you an example of cut and paste, so here's one using the scissors (cut). You simply pick it and, with the button down, drag it across the text you want and release the button. Note that there is no undo, though I suppose you could just immediately paste it back in. Exiting Janewrite (though not saving, because we need the accented characters to stay in the file). Now that we understand what Jane can do and how it works, let's move on to converting the files. We can extract our test files we made from our .d71 with VICE's c1541 utility and hexdump it. This got a little more difficult than it should have been: % c1541 work.d71 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> dir 0 "data#000 " 01 2a 39 "c.TESTCALC" prg 3 "l.TESTLIST" prg 4 "w.nOTE.2" prg 4 "w.TESTCONV" prg 1278 blocks free. c1541 #8> read "w.TESTCONV" ERR = 62, FILE NOT FOUND, 00, 00 cannot read `w.TESTCONV' on unit 8 invalid filename As you may have guessed, that's because the filenames, and it turns out the data in the files themselves, are stored as true ASCII, not PETSCII (indeed as they would have been on the Apple II, also), so c1541's filename conversion fails. Fortunately, the extract command will walk the entire directory and pull out all the files no matter what they're named. The documents are all regular Commodore PRoGram files with a starting address and they appear to be loaded in-place at that address into bank 1. This introduces the possibility of some delightful save-file hacks but we're not here for that today. That means we can also simply extract our previous owners' files en masse as well. I imaged their disk using my ZoomFloppy and external 1571, and since they are normal PRGs, a BAM copy of the allocated sectors is all we need to do, with one wrinkle: % d64copy -B 9 r_jane_bam.d64 [Warning] growing image file to 683 blocks 14: --*****--*****--***** 8% 15/171[Warning] read error: 0e/00: 5 14: ?******************** 12% 21/171[Warning] giving up... 14: ?******************** 15: ********************* 16: ********************* 17: ********************* 18: ******************* 19: ******************* 20: ******************* 21: ******************* 22: ****..***...***...* 100% 171/171 170 blocks copied. % c1541 r_jane_bam.d64 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> extract c1541 #8> quit Fortunately it doesn't look like the bad sector was in any of the files they cared about. Let's get an idea of the format from our test files. Janecalc files are "huge" because it looks like the entire 26x50 cell range is saved regardless of whether anything's in it or not. Looking at the directory of their data disk where they had saved a couple of sparse test spreadsheets of their own, they also were 39 blocks in length no matter how many cells were actually populated. The on-disk format is consequentially a bit wasteful: 000003a0 00 00 00 00 00 20 20 20 4a 61 6e 75 61 72 79 20 |..... January | 000003b0 20 46 65 62 72 75 61 72 79 20 20 20 20 20 4d 61 | February Ma| 000003c0 72 63 68 20 20 20 20 20 41 70 72 69 6c 20 20 20 |rch April | 000003d0 20 20 20 20 4d 61 79 20 20 20 20 20 20 4a 75 6e | May Jun| 000003e0 65 20 20 20 20 20 20 4a 75 6c 79 20 20 20 20 41 |e July A| 000003f0 75 67 75 73 74 20 53 65 70 74 65 6d 62 65 72 20 |ugust September | 00000400 20 20 4f 63 74 6f 62 65 72 20 20 4e 6f 76 65 6d | October Novem| 00000410 62 65 72 20 20 44 65 63 65 6d 62 65 72 00 00 01 |ber December...| 00000420 04 00 00 00 00 00 00 20 20 54 6f 74 61 6c 20 20 |....... Total | 00000430 20 41 76 65 72 61 67 65 20 20 20 00 00 01 04 00 | Average .....| Cardfiles are stored much more efficiently. Here's the entirety of our two cards. The fields are in the header, padded out to the fixed 12 character length, but with technically unnecessary nulls between them. A spurious "Beatles" entry looks like a buffer that was captured as part of the save, and there is also a page-aligned (counting the starting address) pad of nulls. Otherwise, the value strings look null-delimited, in the order they appear in the field list (unpopulated fields are zero-length strings). When you run out of fields, you're on the next card. % hexdump -C l.TESTLIST 00000000 00 7f 01 00 36 02 08 00 04 00 54 69 74 6c 65 20 |....6.....Title | 00000010 20 20 20 20 20 20 00 4c 65 61 64 20 41 72 74 69 | .Lead Arti| 00000020 73 74 20 00 4f 74 68 65 72 20 41 72 74 69 73 74 |st .Other Artist| 00000030 00 43 6f 6d 70 6f 73 65 72 20 20 20 20 00 43 6f |.Composer .Co| 00000040 6e 64 75 63 74 6f 72 20 20 20 00 57 68 65 72 65 |nductor .Where| 00000050 20 4b 65 70 74 20 20 00 42 6f 72 72 6f 77 65 64 | Kept .Borrowed| 00000060 20 62 79 20 00 44 61 74 65 20 4c 65 6e 74 20 20 | by .Date Lent | 00000070 20 00 00 00 ff ff 01 ff ff ff ff ff ff ff ff ff | ...............| 00000080 ff ff ff ff ff 00 01 02 03 04 05 06 07 00 01 02 |................| 00000090 03 04 05 06 07 ff ff ff ff ff ff ff ff ff ff 00 |................| 000000a0 00 54 68 65 20 42 65 61 74 6c 65 73 00 00 00 00 |.The Beatles....| 000000b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00000100 d7 09 80 60 60 ac 98 09 ae 04 cf a5 ea a9 d7 15 |...``...........| 00000110 80 ac 1d 21 d6 1c 80 60 60 ac 98 09 ae 04 cf 20 |...!...``...... | 00000120 75 0b 00 00 ac 0a 95 a5 f0 b0 a9 a6 b1 a9 a4 b1 |u...............| 00000130 a5 f1 b0 a9 a7 b1 a9 a5 b1 ac c0 08 cf 20 75 0b |............. u.| 00000140 fe ff a5 37 ae 8c ff 00 c0 d8 4b 80 cf a5 f0 b0 |...7......K.....| 00000150 a7 a6 b1 c0 d8 60 80 a5 f1 b0 a7 a7 b1 c0 d8 60 |.....`.........`| 00000160 80 cf a5 f0 b0 a7 a6 b1 00 00 09 00 01 5d f6 00 |.............]..| 00000170 00 00 00 09 00 09 00 01 66 f6 00 00 00 00 54 00 |........f.....T.| 00000180 50 00 01 b1 f6 69 64 65 20 12 00 42 00 01 6f f6 |P....ide ..B..o.| 00000190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 000001a0 00 00 00 00 00 00 00 52 65 76 6f 6c 76 65 72 00 |.......Revolver.| 000001b0 54 68 65 20 42 65 61 74 6c 65 73 00 00 4c 65 6e |The Beatles..Len| 000001c0 6e 6f 6e 2d 4d 63 43 61 72 74 6e 65 79 2d 48 61 |non-McCartney-Ha| 000001d0 72 72 69 73 6f 6e 00 47 65 6f 72 67 65 20 4d 61 |rrison.George Ma| 000001e0 72 74 69 6e 00 00 00 00 00 41 74 6f 6d 20 48 65 |rtin.....Atom He| 000001f0 61 72 74 20 4d 6f 74 68 65 72 00 50 69 6e 6b 20 |art Mother.Pink | 00000200 46 6c 6f 79 64 00 00 57 61 74 65 72 73 2d 47 69 |Floyd..Waters-Gi| 00000210 6c 6d 6f 75 72 2d 4d 61 73 6f 6e 2d 57 72 69 67 |lmour-Mason-Wrig| 00000220 68 74 2d 47 65 65 73 6f 6e 00 50 69 6e 6b 20 46 |ht-Geeson.Pink F| 00000230 6c 6f 79 64 00 00 00 00 |loyd....| 00000238 This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. Let's start out with the online help, one of Marks and Kotick's fundamental design goals. Assuming you got the joystick (or 1350) plugged into the right port, there's a big honking question mark. What happens when you click on it? You get right into the online help window. The pointer snaps to the options; you can also move the pointer from option or cell to another option or cell with the CRSR keys/128 arrow keys and select it with the Commodore key. The window's yellow border is salient: any window that gives you choices to select from carries a yellow border. We'll see this again later. Incidentally, the manual is not in colour (just black, white and an accent magenta), and possibly as a result is all but totally ignorant of these UI choices or why they were made. The Apple II version's windows have a corner close gadget in the typical open square style, but this would only have made visual sense to someone familiar with the Lisa or Mac — which most Commodore users in 1985 wouldn't be. Instead, here windows you can close have a big bright red EXIT button (the ESC key can also serve this role in most cases). All icons are simply drawn onto the VIC-II high-res screen; unlike Magic Desk where pretty much everything was a sprite, the only sprite here is the pointer. Windows cannot be moved or resized, but by limiting icon and window boundaries to VIC-II 8x8 cells, drawing is fairly fast. Of course, most of the topics are on the yellow help disk (see? it matches). Jane 128, like the Apple II version, supports two disk drives, so you could have the help disk in device 9 and it would find it. The online help is pretty good, considering. It shows the icons and images as they would appear on-screen, and while they aren't live, they are accurate. The only black eye it gets is the technically truthful but functionally insufficient prompt "Press a key to continue" — the joystick or 1350 mouse button also work, and so does the ESC key to exit early, even though the exit button isn't shown. Some help items are animated and show you a demonstration, and each app has its own bespoke help. The system keeps track of what disks are where. If we start Janewrite by going to the typewriter, this blue dialogue box will appear — informational dialogue boxes always have a blue border — as it loads the overlay ... ... but then looks for a data disk, fails to find it, and asks for one. You need one even for a new document, and you can get stuck in a loop here if you don't provide one (pressing ESC just makes it try again, and clicking on the STOP icon doesn't do anything). You could put in the black data disk it comes with, but this one contains our generous donor's files, so we'll just give a blank disk image to VICE instead which Jane will offer to format. When creating a new data disk in VICE, if a 1571 is detected then Jane will want a real .d71 with the full available space, not a .d64, as it will then expect it can format both sides of the virtual disk. However, all of the Jane original disks, including the black one, are formatted single-sided for the 1541 since many early 128 owners would still be using one. The other way you can do this is from the disk icon. As these icons are in grey, so are their windows (except, curiously, help, but I can see how a yellow question mark would have looked bad against a white background), suggesting a global applet served by the central Jane kernel. The disk icon brings up a basic file manager allowing you to make duplicate backup files (but only to the same disk), rename or delete them, or create a new disk. The copy option is the default and is pre-selected when the window opens, which is irritating, because our modern reflexive habit of selecting the file first and then the action will cause an immediate copy to occur before you get the chance to click anything else. I don't think this was just me: there were several spurious duplicate files on the original black data disk I suspect for the same reason. If files are present on the disk, they will appear with their names and a filetype letter (W, C or L for Janewrite, Janecalc or Janelist respectively). Notice the slightly misshapen scrolling arrows, which were nice and clean on the Apple. We'll provide the .d71 to Jane here. Windows warning you about data loss have a red border. Interestingly, it provides both a No button and the exit button, which both do the same thing: abort back to the file manager. Jane seems unable to distinguish between an unformatted disk and a completely absent one, and will (fruitlessly) attempt to format an empty drive. Formatting in progress. The time estimates are surprisingly not far off. With our disk formatted, let's return to Janewrite at the end, since this will be the majority of the documents we'll convert. Instead, we'll start with the spreadsheet, Janecalc. Whenever any of the three built-in applications starts up, and once Jane has located the data disk, a file selector (in grey) appears. There are no spreadsheets ("worksheets") on our freshly formatted disk, so we click the NEW icon. Entering the new filename (blue window). You may have noticed that the red and blue windows are all invariably the same size regardless of contents and any active controls they contain. This probably simplified rendering quite a bit. Because Janecalc is green, its content window border is likewise green, and because Jane 128 doesn't multitask between the applications, it takes up the entirety of the screen. Two templates are provided, along with a roll-your-own option. We'll go with the Home Budget for illustration. The Home Budget template pulls up a simplified home budget by month which you can fill in. Jane supports 40, 64 and 80 column modes, all rendered in software on the VIC-IIe 320x200 display (not with the VDC's 640x200 display), but by default it uses 40. (I'll get to this in more detail in the word processor.) Along the bottom are various operators and the extent of the formula functions available (hardly competition for the Convergent WorkSlate). They can be selected with the pointer in lieu of text entry, which makes them quite discoverable, but in practice it's simply faster to type them. No other functions are implemented. Since the content window cannot be resized, the maximize gadget from the Apple II version became obviously useless and was removed. By using the joystick/mouse you can use the hand to point to a cell and then, with the hand pointing to it, just start typing text or a number. The cursor keys will move the pointer from cell to cell for you, though they will not exit the content area. If you click or otherwise select the cell with the hand, however, Jane considers this an attempt to construct a formula, which again would be frustrating to modern audiences used to, say, Microsoft Excel. But to edit it again, you pick the insert tool instead of the hand, and this time you must select the cell to type in it. Motion around the content area in all three applications is accomplished using multiple small icons in the bottom and right window borders. The "half full" icon pushes it all the way to the outer edge in that direction, while the double and single arrows move the viewport by large leaps and small leaps respectively. There are no thumbs to show relative location, but you can click anywhere along the scroll area for a proportionately "medium" jump if you like. You can also use CTRL-CRSR/CTRL-arrow keys. Even in 40-column mode, and even given that the scroll doesn't animate and just snaps to the new position, scrolling is agonizingly slow and multiple clicks on the scroll controls invariably overshoot. Putting it in 80 column mode doesn't just give you more on the screen — it also means you don't need to endure as many pauses trying to move around. Again, I'll have more to say about font sizes when we get to Janewrite. Unique to Janecalc, the scrolling actually wraps. Worksheets remain limited to 26 columns (A-Z), as in the Apple II version, but now up to 50 rows are allowed. Still, this wouldn't have been sufficient for anything larger than a modest small business, even in 1985. Formulas are approximately VisiCalc-style using A1 absolute notation for cells, though there are no sigils for functions (not that there's very many) and ranges are delimited by colons. Most basic math operators and parentheses are available. Here, we'll get a sum of this row ... ... and then manually calculate an average by dividing the sum by the count of populated rows (we could also just use avg). The template includes this at the bottom, but this shows you how formula entry worked. As we add data to dependent cells the sheets recalculate but circular references are not handled, though in fairness this capability was still not common in small spreadsheet applications. We'll go to Janelist next. When we do so, a red window pops up to prompt us to save our work. Switching to Janelist. Creating our new list. All very consistent (the file manager and requester seem to be part of the Jane kernel). Janelist, in fairness, never purported to be a database in any incarnation and acts more like a cardfile; even the manual merely refers to it as a "list keeper." Like Janecalc it comes with templates, though Janelist supports a substantial number more. For variety I'll try to enter some of my very large CD collection, because I'm one of those people (vinyl is for art, CD is for listening). The list comes up as fillable fields. There may be up to 15 field names up to 12 characters long. If you choose to create your own, then Jane will step you through entering the field names. That's about all the customization you can do. The values for those fields can span multiple lines, which is what the viewport scrolling is for — you use the icons at the bottom to advance through individual cards. Incidentally, Atom Heart Mother is Pink Floyd's finest album and I will tolerate no disagreement. The icon that looks like cards being pulled out suggests how to make a query (the magnifying glass icon, or possibly the funnel icon to denote a filter, wasn't universal at this point). Because it gives you choices, it's yellow, remember? The two OK buttons do different things. The top one filters cards to the query requested, but the bottom one undoes any query. You can query on top of queries for a primitive sort of logical-AND. Partial word searches are supported. For example, here is the second best Beatles album — the best is, of course, Abbey Road. Since we searched for the Beatles, when we run out of Beatles CDs, nothing more turns up from my formidable library. It is also possible to sort cards, in which case they appear in that order instead. You cannot sort on multiple fields, and you can't sort descending. Finally, Janewrite, where we will spend the rest of our time — and where apparently most of Jane's users spent theirs, including our previous owners. I've got a prefab file here I constructed while playing around to explore the file format, so this time we'll load a document instead of entering one, just to show you what that looks like from the file requester. Janewrite is IMHO the most polished and competent of the three apps, and it feels like the most development time was spent on it, too. It also shows what the Jane font renderer is capable of: although non-proportional and only a single typeface, you can see bold, underline, bold and underlined, superscript, and subscript are all possible. The bottom shows left, right, centre and full justification options, done per line, plus the font options, and then search (this time with a magnifying glass) and page layout. These icons are larger and more detailed than the Apple's. As with other parts of the UI, text attributes are set verb-initial, i.e., you would choose the desired style, then the insertion tool, then highlight the range of text and finally release the button (or, annoyingly, wait, which makes fine adjustments harder than they should be). Notice that there is an explicit bold-and-underline option, instead of using the separate bold and underline options in combination: that's because you can't make superscripted or subscripted text bold or underlined. The top of the content area shows the ruler — in characters, not inches — and margin stops and the single paragraph indent stop, which you can drag to change them. Interestingly, the ruler seems to be new for Jane 128: no screenshot for the Apple II version demonstrates one. Janewrite is also capable of a modicum of WYSIWYG if you select the 80 column option. This and other options come from the "computer" icon, which acts as a preference panel. Preferences are saved to the application disk and are global to all three applications. Despite this presenting a choice window (ordinarily yellow), Jane seems to treat it as a global window from the kernel, so it's grey. The bottom set of options are specifically for configuring the printer. Print output is generated with control codes and text only; Jane does not generate graphic sequences, so what actually shows up on the page depends on what your printer actually supports. The default middle print size option corresponds to 80 columns (more accurately, the default or 12cpi font size), while the small font corresponds to the condensed 15cpi and/or 132 column option available on some printers, and the large font corresponds to the 60 or 64-column (e.g., 10cpi) option also only available on some printers — not the expanded double wide printing option more typical of Commodore-specific devices. You could also select between regular fanfold tractor feed or plain paper, as well as the Near Letter Quality print option some printers supported, and finally the printer itself. There was built-in support for the MPS-801 (i.e., 1525), MPS-802 (i.e., 1526), 1101, "Oki" (generic Okidata), and generic "Epson" printers, assuming they were connected somehow to the IEC serial such as through a third-party parallel printer interface. These printer drivers varied wildly in their capabilities: the 1525/MPS-801 "driver" supported almost nothing except basic text, while the generic Okidata and Epson drivers supported nearly everything that Jane could generate. The "OTHER" driver is customizeable, a neat idea, if a little clumsy. A BASIC program called BUILDPRT on the grey disk allows you to populate it with your printer's control codes. Control sequences up to three characters long were supported. You would enter these from the manual, it would save them to disk, and then you could use the custom driver inside Jane. The topmost options affect the appearance of Jane. You can choose from three font sizes, all non-proportional, corresponding to 40, 64 or 80 column text. Confusingly, the 80-column option is the last when it's the middle option for printing. (The Apple II version likely didn't support 80 column text due to its smaller hi-res horizontal width.) Pointer speed and the "beep" Jane makes when you select options are also configurable. Here's how it looks in 80 columns, using the typical "soft 80" approach on the 64 which is more or less legible, at least on a composite display. As there are no colours in the content area, there is no risk of colour clash. This is probably the most useful view in Janewrite. The 64-column view, by contrast, is probably the least useful. The 40-column view is the most legible and 2:1 the size of a typical 80-column line, so it's easy to mentally grok page layout that way, but the 64-column view is odd enough to end up being the worst of both worlds. An interesting feature of Janewrite are the accented characters, which was not frequently seen on home computer-class word processors, as explained by the on-line help. Janewrite treats them as diacritics, and they can even be applied to letters that wouldn't ordinarily use them (because who knows? some language might), such as the grave and acute accents on the n as well as the more typical tilde. In fact, you can apply them to any character, even punctuation. However, the use of the up arrow to indicate a circumflex means there's no way you can type a literal caret into your document, and while a macron would have been nice, omitting the umlaut seems a greater fault. The decorators are also rather hard to distinguish in 80 columns, so Spanish users of Juana 128 might want to go to cuarenta column mode to mirar mejor. Janewrite also has basic find and/or find-and-replace, and a small pane appears below the content area when it's active. There are also decent page layout options, including setting both a per-page title and its position, adding a page number and its position, and margins, number of copies and starting page, though the last two would seem more appropriate for a print dialogue than a page layout one. Note that Jane will always print a 10-space left margin, so an 80-column printed line can be no longer than 70 characters, and this is indeed the maximum width Janewrite will support. However, paragraphs are apparently not stored as continuous sequences of text, demonstrated here with a contrived example. (In fact, we'll prove they aren't shortly.) While Janewrite will word-wrap at the right margin, inserting text after that will wrap onto a new line, not into the next line, even if the two lines were previously entered "together." There's a speed/flexibility tradeoff here in that Janewrite doesn't have to continuously reflow paragraphs, but it also means its concept of a paragraph is entirely based on how much you select. The text can be manually reflowed, joining lines if necessary, by picking one of the paragraph justification options and selecting the text with the hand, which will then be reflowed (and, if needed, spaces inserted) to match. In fact, this is also necessary if you change the margins because Jane doesn't automatically reformat your document then either. I also promised you an example of cut and paste, so here's one using the scissors (cut). You simply pick it and, with the button down, drag it across the text you want and release the button. Note that there is no undo, though I suppose you could just immediately paste it back in. Exiting Janewrite (though not saving, because we need the accented characters to stay in the file). Now that we understand what Jane can do and how it works, let's move on to converting the files. We can extract our test files we made from our .d71 with VICE's c1541 utility and hexdump it. This got a little more difficult than it should have been: % c1541 work.d71 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> dir 0 "data#000 " 01 2a 39 "c.TESTCALC" prg 3 "l.TESTLIST" prg 4 "w.nOTE.2" prg 4 "w.TESTCONV" prg 1278 blocks free. c1541 #8> read "w.TESTCONV" ERR = 62, FILE NOT FOUND, 00, 00 cannot read `w.TESTCONV' on unit 8 invalid filename As you may have guessed, that's because the filenames, and it turns out the data in the files themselves, are stored as true ASCII, not PETSCII (indeed as they would have been on the Apple II, also), so c1541's filename conversion fails. Fortunately, the extract command will walk the entire directory and pull out all the files no matter what they're named. The documents are all regular Commodore PRoGram files with a starting address and they appear to be loaded in-place at that address into bank 1. This introduces the possibility of some delightful save-file hacks but we're not here for that today. That means we can also simply extract our previous owners' files en masse as well. I imaged their disk using my ZoomFloppy and external 1571, and since they are normal PRGs, a BAM copy of the allocated sectors is all we need to do, with one wrinkle: % d64copy -B 9 r_jane_bam.d64 [Warning] growing image file to 683 blocks 14: --*****--*****--***** 8% 15/171[Warning] read error: 0e/00: 5 14: ?******************** 12% 21/171[Warning] giving up... 14: ?******************** 15: ********************* 16: ********************* 17: ********************* 18: ******************* 19: ******************* 20: ******************* 21: ******************* 22: ****..***...***...* 100% 171/171 170 blocks copied. % c1541 r_jane_bam.d64 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> extract c1541 #8> quit Fortunately it doesn't look like the bad sector was in any of the files they cared about. Let's get an idea of the format from our test files. Janecalc files are "huge" because it looks like the entire 26x50 cell range is saved regardless of whether anything's in it or not. Looking at the directory of their data disk where they had saved a couple of sparse test spreadsheets of their own, they also were 39 blocks in length no matter how many cells were actually populated. The on-disk format is consequentially a bit wasteful: 000003a0 00 00 00 00 00 20 20 20 4a 61 6e 75 61 72 79 20 |..... January | 000003b0 20 46 65 62 72 75 61 72 79 20 20 20 20 20 4d 61 | February Ma| 000003c0 72 63 68 20 20 20 20 20 41 70 72 69 6c 20 20 20 |rch April | 000003d0 20 20 20 20 4d 61 79 20 20 20 20 20 20 4a 75 6e | May Jun| 000003e0 65 20 20 20 20 20 20 4a 75 6c 79 20 20 20 20 41 |e July A| 000003f0 75 67 75 73 74 20 53 65 70 74 65 6d 62 65 72 20 |ugust September | 00000400 20 20 4f 63 74 6f 62 65 72 20 20 4e 6f 76 65 6d | October Novem| 00000410 62 65 72 20 20 44 65 63 65 6d 62 65 72 00 00 01 |ber December...| 00000420 04 00 00 00 00 00 00 20 20 54 6f 74 61 6c 20 20 |....... Total | 00000430 20 41 76 65 72 61 67 65 20 20 20 00 00 01 04 00 | Average .....| Cardfiles are stored much more efficiently. Here's the entirety of our two cards. The fields are in the header, padded out to the fixed 12 character length, but with technically unnecessary nulls between them. A spurious "Beatles" entry looks like a buffer that was captured as part of the save, and there is also a page-aligned (counting the starting address) pad of nulls. Otherwise, the value strings look null-delimited, in the order they appear in the field list (unpopulated fields are zero-length strings). When you run out of fields, you're on the next card. % hexdump -C l.TESTLIST 00000000 00 7f 01 00 36 02 08 00 04 00 54 69 74 6c 65 20 |....6.....Title | 00000010 20 20 20 20 20 20 00 4c 65 61 64 20 41 72 74 69 | .Lead Arti| 00000020 73 74 20 00 4f 74 68 65 72 20 41 72 74 69 73 74 |st .Other Artist| 00000030 00 43 6f 6d 70 6f 73 65 72 20 20 20 20 00 43 6f |.Composer .Co| 00000040 6e 64 75 63 74 6f 72 20 20 20 00 57 68 65 72 65 |nductor .Where| 00000050 20 4b 65 70 74 20 20 00 42 6f 72 72 6f 77 65 64 | Kept .Borrowed| 00000060 20 62 79 20 00 44 61 74 65 20 4c 65 6e 74 20 20 | by .Date Lent | 00000070 20 00 00 00 ff ff 01 ff ff ff ff ff ff ff ff ff | ...............| 00000080 ff ff ff ff ff 00 01 02 03 04 05 06 07 00 01 02 |................| 00000090 03 04 05 06 07 ff ff ff ff ff ff ff ff ff ff 00 |................| 000000a0 00 54 68 65 20 42 65 61 74 6c 65 73 00 00 00 00 |.The Beatles....| 000000b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00000100 d7 09 80 60 60 ac 98 09 ae 04 cf a5 ea a9 d7 15 |...``...........| 00000110 80 ac 1d 21 d6 1c 80 60 60 ac 98 09 ae 04 cf 20 |...!...``...... | 00000120 75 0b 00 00 ac 0a 95 a5 f0 b0 a9 a6 b1 a9 a4 b1 |u...............| 00000130 a5 f1 b0 a9 a7 b1 a9 a5 b1 ac c0 08 cf 20 75 0b |............. u.| 00000140 fe ff a5 37 ae 8c ff 00 c0 d8 4b 80 cf a5 f0 b0 |...7......K.....| 00000150 a7 a6 b1 c0 d8 60 80 a5 f1 b0 a7 a7 b1 c0 d8 60 |.....`.........`| 00000160 80 cf a5 f0 b0 a7 a6 b1 00 00 09 00 01 5d f6 00 |.............]..| 00000170 00 00 00 09 00 09 00 01 66 f6 00 00 00 00 54 00 |........f.....T.| 00000180 50 00 01 b1 f6 69 64 65 20 12 00 42 00 01 6f f6 |P....ide ..B..o.| 00000190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 000001a0 00 00 00 00 00 00 00 52 65 76 6f 6c 76 65 72 00 |.......Revolver.| 000001b0 54 68 65 20 42 65 61 74 6c 65 73 00 00 4c 65 6e |The Beatles..Len| 000001c0 6e 6f 6e 2d 4d 63 43 61 72 74 6e 65 79 2d 48 61 |non-McCartney-Ha| 000001d0 72 72 69 73 6f 6e 00 47 65 6f 72 67 65 20 4d 61 |rrison.George Ma| 000001e0 72 74 69 6e 00 00 00 00 00 41 74 6f 6d 20 48 65 |rtin.....Atom He| 000001f0 61 72 74 20 4d 6f 74 68 65 72 00 50 69 6e 6b 20 |art Mother.Pink | 00000200 46 6c 6f 79 64 00 00 57 61 74 65 72 73 2d 47 69 |Floyd..Waters-Gi| 00000210 6c 6d 6f 75 72 2d 4d 61 73 6f 6e 2d 57 72 69 67 |lmour-Mason-Wrig| 00000220 68 74 2d 47 65 65 73 6f 6e 00 50 69 6e 6b 20 46 |ht-Geeson.Pink F| 00000230 6c 6f 79 64 00 00 00 00 |loyd....| 00000238 This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. The window's yellow border is salient: any window that gives you choices to select from carries a yellow border. We'll see this again later. Incidentally, the manual is not in colour (just black, white and an accent magenta), and possibly as a result is all but totally ignorant of these UI choices or why they were made. The Apple II version's windows have a corner close gadget in the typical open square style, but this would only have made visual sense to someone familiar with the Lisa or Mac — which most Commodore users in 1985 wouldn't be. Instead, here windows you can close have a big bright red EXIT button (the ESC key can also serve this role in most cases). All icons are simply drawn onto the VIC-II high-res screen; unlike Magic Desk where pretty much everything was a sprite, the only sprite here is the pointer. Windows cannot be moved or resized, but by limiting icon and window boundaries to VIC-II 8x8 cells, drawing is fairly fast. Of course, most of the topics are on the yellow help disk (see? it matches). Jane 128, like the Apple II version, supports two disk drives, so you could have the help disk in device 9 and it would find it. The online help is pretty good, considering. It shows the icons and images as they would appear on-screen, and while they aren't live, they are accurate. The only black eye it gets is the technically truthful but functionally insufficient prompt "Press a key to continue" — the joystick or 1350 mouse button also work, and so does the ESC key to exit early, even though the exit button isn't shown. Some help items are animated and show you a demonstration, and each app has its own bespoke help. The system keeps track of what disks are where. If we start Janewrite by going to the typewriter, this blue dialogue box will appear — informational dialogue boxes always have a blue border — as it loads the overlay ... ... but then looks for a data disk, fails to find it, and asks for one. You need one even for a new document, and you can get stuck in a loop here if you don't provide one (pressing ESC just makes it try again, and clicking on the STOP icon doesn't do anything). You could put in the black data disk it comes with, but this one contains our generous donor's files, so we'll just give a blank disk image to VICE instead which Jane will offer to format. When creating a new data disk in VICE, if a 1571 is detected then Jane will want a real .d71 with the full available space, not a .d64, as it will then expect it can format both sides of the virtual disk. However, all of the Jane original disks, including the black one, are formatted single-sided for the 1541 since many early 128 owners would still be using one. The other way you can do this is from the disk icon. As these icons are in grey, so are their windows (except, curiously, help, but I can see how a yellow question mark would have looked bad against a white background), suggesting a global applet served by the central Jane kernel. The disk icon brings up a basic file manager allowing you to make duplicate backup files (but only to the same disk), rename or delete them, or create a new disk. The copy option is the default and is pre-selected when the window opens, which is irritating, because our modern reflexive habit of selecting the file first and then the action will cause an immediate copy to occur before you get the chance to click anything else. I don't think this was just me: there were several spurious duplicate files on the original black data disk I suspect for the same reason. If files are present on the disk, they will appear with their names and a filetype letter (W, C or L for Janewrite, Janecalc or Janelist respectively). Notice the slightly misshapen scrolling arrows, which were nice and clean on the Apple. We'll provide the .d71 to Jane here. Windows warning you about data loss have a red border. Interestingly, it provides both a No button and the exit button, which both do the same thing: abort back to the file manager. Jane seems unable to distinguish between an unformatted disk and a completely absent one, and will (fruitlessly) attempt to format an empty drive. Formatting in progress. The time estimates are surprisingly not far off. With our disk formatted, let's return to Janewrite at the end, since this will be the majority of the documents we'll convert. Instead, we'll start with the spreadsheet, Janecalc. Whenever any of the three built-in applications starts up, and once Jane has located the data disk, a file selector (in grey) appears. There are no spreadsheets ("worksheets") on our freshly formatted disk, so we click the NEW icon. Entering the new filename (blue window). You may have noticed that the red and blue windows are all invariably the same size regardless of contents and any active controls they contain. This probably simplified rendering quite a bit. Because Janecalc is green, its content window border is likewise green, and because Jane 128 doesn't multitask between the applications, it takes up the entirety of the screen. Two templates are provided, along with a roll-your-own option. We'll go with the Home Budget for illustration. The Home Budget template pulls up a simplified home budget by month which you can fill in. Jane supports 40, 64 and 80 column modes, all rendered in software on the VIC-IIe 320x200 display (not with the VDC's 640x200 display), but by default it uses 40. (I'll get to this in more detail in the word processor.) Along the bottom are various operators and the extent of the formula functions available (hardly competition for the Convergent WorkSlate). They can be selected with the pointer in lieu of text entry, which makes them quite discoverable, but in practice it's simply faster to type them. No other functions are implemented. Since the content window cannot be resized, the maximize gadget from the Apple II version became obviously useless and was removed. By using the joystick/mouse you can use the hand to point to a cell and then, with the hand pointing to it, just start typing text or a number. The cursor keys will move the pointer from cell to cell for you, though they will not exit the content area. If you click or otherwise select the cell with the hand, however, Jane considers this an attempt to construct a formula, which again would be frustrating to modern audiences used to, say, Microsoft Excel. But to edit it again, you pick the insert tool instead of the hand, and this time you must select the cell to type in it. Motion around the content area in all three applications is accomplished using multiple small icons in the bottom and right window borders. The "half full" icon pushes it all the way to the outer edge in that direction, while the double and single arrows move the viewport by large leaps and small leaps respectively. There are no thumbs to show relative location, but you can click anywhere along the scroll area for a proportionately "medium" jump if you like. You can also use CTRL-CRSR/CTRL-arrow keys. Even in 40-column mode, and even given that the scroll doesn't animate and just snaps to the new position, scrolling is agonizingly slow and multiple clicks on the scroll controls invariably overshoot. Putting it in 80 column mode doesn't just give you more on the screen — it also means you don't need to endure as many pauses trying to move around. Again, I'll have more to say about font sizes when we get to Janewrite. Unique to Janecalc, the scrolling actually wraps. Worksheets remain limited to 26 columns (A-Z), as in the Apple II version, but now up to 50 rows are allowed. Still, this wouldn't have been sufficient for anything larger than a modest small business, even in 1985. Formulas are approximately VisiCalc-style using A1 absolute notation for cells, though there are no sigils for functions (not that there's very many) and ranges are delimited by colons. Most basic math operators and parentheses are available. Here, we'll get a sum of this row ... ... and then manually calculate an average by dividing the sum by the count of populated rows (we could also just use avg). The template includes this at the bottom, but this shows you how formula entry worked. As we add data to dependent cells the sheets recalculate but circular references are not handled, though in fairness this capability was still not common in small spreadsheet applications. We'll go to Janelist next. When we do so, a red window pops up to prompt us to save our work. Switching to Janelist. Creating our new list. All very consistent (the file manager and requester seem to be part of the Jane kernel). Janelist, in fairness, never purported to be a database in any incarnation and acts more like a cardfile; even the manual merely refers to it as a "list keeper." Like Janecalc it comes with templates, though Janelist supports a substantial number more. For variety I'll try to enter some of my very large CD collection, because I'm one of those people (vinyl is for art, CD is for listening). The list comes up as fillable fields. There may be up to 15 field names up to 12 characters long. If you choose to create your own, then Jane will step you through entering the field names. That's about all the customization you can do. The values for those fields can span multiple lines, which is what the viewport scrolling is for — you use the icons at the bottom to advance through individual cards. Incidentally, Atom Heart Mother is Pink Floyd's finest album and I will tolerate no disagreement. The icon that looks like cards being pulled out suggests how to make a query (the magnifying glass icon, or possibly the funnel icon to denote a filter, wasn't universal at this point). Because it gives you choices, it's yellow, remember? The two OK buttons do different things. The top one filters cards to the query requested, but the bottom one undoes any query. You can query on top of queries for a primitive sort of logical-AND. Partial word searches are supported. For example, here is the second best Beatles album — the best is, of course, Abbey Road. Since we searched for the Beatles, when we run out of Beatles CDs, nothing more turns up from my formidable library. It is also possible to sort cards, in which case they appear in that order instead. You cannot sort on multiple fields, and you can't sort descending. Finally, Janewrite, where we will spend the rest of our time — and where apparently most of Jane's users spent theirs, including our previous owners. I've got a prefab file here I constructed while playing around to explore the file format, so this time we'll load a document instead of entering one, just to show you what that looks like from the file requester. Janewrite is IMHO the most polished and competent of the three apps, and it feels like the most development time was spent on it, too. It also shows what the Jane font renderer is capable of: although non-proportional and only a single typeface, you can see bold, underline, bold and underlined, superscript, and subscript are all possible. The bottom shows left, right, centre and full justification options, done per line, plus the font options, and then search (this time with a magnifying glass) and page layout. These icons are larger and more detailed than the Apple's. As with other parts of the UI, text attributes are set verb-initial, i.e., you would choose the desired style, then the insertion tool, then highlight the range of text and finally release the button (or, annoyingly, wait, which makes fine adjustments harder than they should be). Notice that there is an explicit bold-and-underline option, instead of using the separate bold and underline options in combination: that's because you can't make superscripted or subscripted text bold or underlined. The top of the content area shows the ruler — in characters, not inches — and margin stops and the single paragraph indent stop, which you can drag to change them. Interestingly, the ruler seems to be new for Jane 128: no screenshot for the Apple II version demonstrates one. Janewrite is also capable of a modicum of WYSIWYG if you select the 80 column option. This and other options come from the "computer" icon, which acts as a preference panel. Preferences are saved to the application disk and are global to all three applications. Despite this presenting a choice window (ordinarily yellow), Jane seems to treat it as a global window from the kernel, so it's grey. The bottom set of options are specifically for configuring the printer. Print output is generated with control codes and text only; Jane does not generate graphic sequences, so what actually shows up on the page depends on what your printer actually supports. The default middle print size option corresponds to 80 columns (more accurately, the default or 12cpi font size), while the small font corresponds to the condensed 15cpi and/or 132 column option available on some printers, and the large font corresponds to the 60 or 64-column (e.g., 10cpi) option also only available on some printers — not the expanded double wide printing option more typical of Commodore-specific devices. You could also select between regular fanfold tractor feed or plain paper, as well as the Near Letter Quality print option some printers supported, and finally the printer itself. There was built-in support for the MPS-801 (i.e., 1525), MPS-802 (i.e., 1526), 1101, "Oki" (generic Okidata), and generic "Epson" printers, assuming they were connected somehow to the IEC serial such as through a third-party parallel printer interface. These printer drivers varied wildly in their capabilities: the 1525/MPS-801 "driver" supported almost nothing except basic text, while the generic Okidata and Epson drivers supported nearly everything that Jane could generate. The "OTHER" driver is customizeable, a neat idea, if a little clumsy. A BASIC program called BUILDPRT on the grey disk allows you to populate it with your printer's control codes. Control sequences up to three characters long were supported. You would enter these from the manual, it would save them to disk, and then you could use the custom driver inside Jane. The topmost options affect the appearance of Jane. You can choose from three font sizes, all non-proportional, corresponding to 40, 64 or 80 column text. Confusingly, the 80-column option is the last when it's the middle option for printing. (The Apple II version likely didn't support 80 column text due to its smaller hi-res horizontal width.) Pointer speed and the "beep" Jane makes when you select options are also configurable. Here's how it looks in 80 columns, using the typical "soft 80" approach on the 64 which is more or less legible, at least on a composite display. As there are no colours in the content area, there is no risk of colour clash. This is probably the most useful view in Janewrite. The 64-column view, by contrast, is probably the least useful. The 40-column view is the most legible and 2:1 the size of a typical 80-column line, so it's easy to mentally grok page layout that way, but the 64-column view is odd enough to end up being the worst of both worlds. An interesting feature of Janewrite are the accented characters, which was not frequently seen on home computer-class word processors, as explained by the on-line help. Janewrite treats them as diacritics, and they can even be applied to letters that wouldn't ordinarily use them (because who knows? some language might), such as the grave and acute accents on the n as well as the more typical tilde. In fact, you can apply them to any character, even punctuation. However, the use of the up arrow to indicate a circumflex means there's no way you can type a literal caret into your document, and while a macron would have been nice, omitting the umlaut seems a greater fault. The decorators are also rather hard to distinguish in 80 columns, so Spanish users of Juana 128 might want to go to cuarenta column mode to mirar mejor. Janewrite also has basic find and/or find-and-replace, and a small pane appears below the content area when it's active. There are also decent page layout options, including setting both a per-page title and its position, adding a page number and its position, and margins, number of copies and starting page, though the last two would seem more appropriate for a print dialogue than a page layout one. Note that Jane will always print a 10-space left margin, so an 80-column printed line can be no longer than 70 characters, and this is indeed the maximum width Janewrite will support. However, paragraphs are apparently not stored as continuous sequences of text, demonstrated here with a contrived example. (In fact, we'll prove they aren't shortly.) While Janewrite will word-wrap at the right margin, inserting text after that will wrap onto a new line, not into the next line, even if the two lines were previously entered "together." There's a speed/flexibility tradeoff here in that Janewrite doesn't have to continuously reflow paragraphs, but it also means its concept of a paragraph is entirely based on how much you select. The text can be manually reflowed, joining lines if necessary, by picking one of the paragraph justification options and selecting the text with the hand, which will then be reflowed (and, if needed, spaces inserted) to match. In fact, this is also necessary if you change the margins because Jane doesn't automatically reformat your document then either. I also promised you an example of cut and paste, so here's one using the scissors (cut). You simply pick it and, with the button down, drag it across the text you want and release the button. Note that there is no undo, though I suppose you could just immediately paste it back in. Exiting Janewrite (though not saving, because we need the accented characters to stay in the file). Now that we understand what Jane can do and how it works, let's move on to converting the files. We can extract our test files we made from our .d71 with VICE's c1541 utility and hexdump it. This got a little more difficult than it should have been: % c1541 work.d71 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> dir 0 "data#000 " 01 2a 39 "c.TESTCALC" prg 3 "l.TESTLIST" prg 4 "w.nOTE.2" prg 4 "w.TESTCONV" prg 1278 blocks free. c1541 #8> read "w.TESTCONV" ERR = 62, FILE NOT FOUND, 00, 00 cannot read `w.TESTCONV' on unit 8 invalid filename As you may have guessed, that's because the filenames, and it turns out the data in the files themselves, are stored as true ASCII, not PETSCII (indeed as they would have been on the Apple II, also), so c1541's filename conversion fails. Fortunately, the extract command will walk the entire directory and pull out all the files no matter what they're named. The documents are all regular Commodore PRoGram files with a starting address and they appear to be loaded in-place at that address into bank 1. This introduces the possibility of some delightful save-file hacks but we're not here for that today. That means we can also simply extract our previous owners' files en masse as well. I imaged their disk using my ZoomFloppy and external 1571, and since they are normal PRGs, a BAM copy of the allocated sectors is all we need to do, with one wrinkle: % d64copy -B 9 r_jane_bam.d64 [Warning] growing image file to 683 blocks 14: --*****--*****--***** 8% 15/171[Warning] read error: 0e/00: 5 14: ?******************** 12% 21/171[Warning] giving up... 14: ?******************** 15: ********************* 16: ********************* 17: ********************* 18: ******************* 19: ******************* 20: ******************* 21: ******************* 22: ****..***...***...* 100% 171/171 170 blocks copied. % c1541 r_jane_bam.d64 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> extract c1541 #8> quit Fortunately it doesn't look like the bad sector was in any of the files they cared about. Let's get an idea of the format from our test files. Janecalc files are "huge" because it looks like the entire 26x50 cell range is saved regardless of whether anything's in it or not. Looking at the directory of their data disk where they had saved a couple of sparse test spreadsheets of their own, they also were 39 blocks in length no matter how many cells were actually populated. The on-disk format is consequentially a bit wasteful: 000003a0 00 00 00 00 00 20 20 20 4a 61 6e 75 61 72 79 20 |..... January | 000003b0 20 46 65 62 72 75 61 72 79 20 20 20 20 20 4d 61 | February Ma| 000003c0 72 63 68 20 20 20 20 20 41 70 72 69 6c 20 20 20 |rch April | 000003d0 20 20 20 20 4d 61 79 20 20 20 20 20 20 4a 75 6e | May Jun| 000003e0 65 20 20 20 20 20 20 4a 75 6c 79 20 20 20 20 41 |e July A| 000003f0 75 67 75 73 74 20 53 65 70 74 65 6d 62 65 72 20 |ugust September | 00000400 20 20 4f 63 74 6f 62 65 72 20 20 4e 6f 76 65 6d | October Novem| 00000410 62 65 72 20 20 44 65 63 65 6d 62 65 72 00 00 01 |ber December...| 00000420 04 00 00 00 00 00 00 20 20 54 6f 74 61 6c 20 20 |....... Total | 00000430 20 41 76 65 72 61 67 65 20 20 20 00 00 01 04 00 | Average .....| Cardfiles are stored much more efficiently. Here's the entirety of our two cards. The fields are in the header, padded out to the fixed 12 character length, but with technically unnecessary nulls between them. A spurious "Beatles" entry looks like a buffer that was captured as part of the save, and there is also a page-aligned (counting the starting address) pad of nulls. Otherwise, the value strings look null-delimited, in the order they appear in the field list (unpopulated fields are zero-length strings). When you run out of fields, you're on the next card. % hexdump -C l.TESTLIST 00000000 00 7f 01 00 36 02 08 00 04 00 54 69 74 6c 65 20 |....6.....Title | 00000010 20 20 20 20 20 20 00 4c 65 61 64 20 41 72 74 69 | .Lead Arti| 00000020 73 74 20 00 4f 74 68 65 72 20 41 72 74 69 73 74 |st .Other Artist| 00000030 00 43 6f 6d 70 6f 73 65 72 20 20 20 20 00 43 6f |.Composer .Co| 00000040 6e 64 75 63 74 6f 72 20 20 20 00 57 68 65 72 65 |nductor .Where| 00000050 20 4b 65 70 74 20 20 00 42 6f 72 72 6f 77 65 64 | Kept .Borrowed| 00000060 20 62 79 20 00 44 61 74 65 20 4c 65 6e 74 20 20 | by .Date Lent | 00000070 20 00 00 00 ff ff 01 ff ff ff ff ff ff ff ff ff | ...............| 00000080 ff ff ff ff ff 00 01 02 03 04 05 06 07 00 01 02 |................| 00000090 03 04 05 06 07 ff ff ff ff ff ff ff ff ff ff 00 |................| 000000a0 00 54 68 65 20 42 65 61 74 6c 65 73 00 00 00 00 |.The Beatles....| 000000b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00000100 d7 09 80 60 60 ac 98 09 ae 04 cf a5 ea a9 d7 15 |...``...........| 00000110 80 ac 1d 21 d6 1c 80 60 60 ac 98 09 ae 04 cf 20 |...!...``...... | 00000120 75 0b 00 00 ac 0a 95 a5 f0 b0 a9 a6 b1 a9 a4 b1 |u...............| 00000130 a5 f1 b0 a9 a7 b1 a9 a5 b1 ac c0 08 cf 20 75 0b |............. u.| 00000140 fe ff a5 37 ae 8c ff 00 c0 d8 4b 80 cf a5 f0 b0 |...7......K.....| 00000150 a7 a6 b1 c0 d8 60 80 a5 f1 b0 a7 a7 b1 c0 d8 60 |.....`.........`| 00000160 80 cf a5 f0 b0 a7 a6 b1 00 00 09 00 01 5d f6 00 |.............]..| 00000170 00 00 00 09 00 09 00 01 66 f6 00 00 00 00 54 00 |........f.....T.| 00000180 50 00 01 b1 f6 69 64 65 20 12 00 42 00 01 6f f6 |P....ide ..B..o.| 00000190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 000001a0 00 00 00 00 00 00 00 52 65 76 6f 6c 76 65 72 00 |.......Revolver.| 000001b0 54 68 65 20 42 65 61 74 6c 65 73 00 00 4c 65 6e |The Beatles..Len| 000001c0 6e 6f 6e 2d 4d 63 43 61 72 74 6e 65 79 2d 48 61 |non-McCartney-Ha| 000001d0 72 72 69 73 6f 6e 00 47 65 6f 72 67 65 20 4d 61 |rrison.George Ma| 000001e0 72 74 69 6e 00 00 00 00 00 41 74 6f 6d 20 48 65 |rtin.....Atom He| 000001f0 61 72 74 20 4d 6f 74 68 65 72 00 50 69 6e 6b 20 |art Mother.Pink | 00000200 46 6c 6f 79 64 00 00 57 61 74 65 72 73 2d 47 69 |Floyd..Waters-Gi| 00000210 6c 6d 6f 75 72 2d 4d 61 73 6f 6e 2d 57 72 69 67 |lmour-Mason-Wrig| 00000220 68 74 2d 47 65 65 73 6f 6e 00 50 69 6e 6b 20 46 |ht-Geeson.Pink F| 00000230 6c 6f 79 64 00 00 00 00 |loyd....| 00000238 This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. The Apple II version's windows have a corner close gadget in the typical open square style, but this would only have made visual sense to someone familiar with the Lisa or Mac — which most Commodore users in 1985 wouldn't be. Instead, here windows you can close have a big bright red EXIT button (the ESC key can also serve this role in most cases). All icons are simply drawn onto the VIC-II high-res screen; unlike Magic Desk where pretty much everything was a sprite, the only sprite here is the pointer. Windows cannot be moved or resized, but by limiting icon and window boundaries to VIC-II 8x8 cells, drawing is fairly fast. Of course, most of the topics are on the yellow help disk (see? it matches). Jane 128, like the Apple II version, supports two disk drives, so you could have the help disk in device 9 and it would find it. The online help is pretty good, considering. It shows the icons and images as they would appear on-screen, and while they aren't live, they are accurate. The only black eye it gets is the technically truthful but functionally insufficient prompt "Press a key to continue" — the joystick or 1350 mouse button also work, and so does the ESC key to exit early, even though the exit button isn't shown. Some help items are animated and show you a demonstration, and each app has its own bespoke help. The system keeps track of what disks are where. If we start Janewrite by going to the typewriter, this blue dialogue box will appear — informational dialogue boxes always have a blue border — as it loads the overlay ... ... but then looks for a data disk, fails to find it, and asks for one. You need one even for a new document, and you can get stuck in a loop here if you don't provide one (pressing ESC just makes it try again, and clicking on the STOP icon doesn't do anything). You could put in the black data disk it comes with, but this one contains our generous donor's files, so we'll just give a blank disk image to VICE instead which Jane will offer to format. When creating a new data disk in VICE, if a 1571 is detected then Jane will want a real .d71 with the full available space, not a .d64, as it will then expect it can format both sides of the virtual disk. However, all of the Jane original disks, including the black one, are formatted single-sided for the 1541 since many early 128 owners would still be using one. The other way you can do this is from the disk icon. As these icons are in grey, so are their windows (except, curiously, help, but I can see how a yellow question mark would have looked bad against a white background), suggesting a global applet served by the central Jane kernel. The disk icon brings up a basic file manager allowing you to make duplicate backup files (but only to the same disk), rename or delete them, or create a new disk. The copy option is the default and is pre-selected when the window opens, which is irritating, because our modern reflexive habit of selecting the file first and then the action will cause an immediate copy to occur before you get the chance to click anything else. I don't think this was just me: there were several spurious duplicate files on the original black data disk I suspect for the same reason. If files are present on the disk, they will appear with their names and a filetype letter (W, C or L for Janewrite, Janecalc or Janelist respectively). Notice the slightly misshapen scrolling arrows, which were nice and clean on the Apple. We'll provide the .d71 to Jane here. Windows warning you about data loss have a red border. Interestingly, it provides both a No button and the exit button, which both do the same thing: abort back to the file manager. Jane seems unable to distinguish between an unformatted disk and a completely absent one, and will (fruitlessly) attempt to format an empty drive. Formatting in progress. The time estimates are surprisingly not far off. With our disk formatted, let's return to Janewrite at the end, since this will be the majority of the documents we'll convert. Instead, we'll start with the spreadsheet, Janecalc. Whenever any of the three built-in applications starts up, and once Jane has located the data disk, a file selector (in grey) appears. There are no spreadsheets ("worksheets") on our freshly formatted disk, so we click the NEW icon. Entering the new filename (blue window). You may have noticed that the red and blue windows are all invariably the same size regardless of contents and any active controls they contain. This probably simplified rendering quite a bit. Because Janecalc is green, its content window border is likewise green, and because Jane 128 doesn't multitask between the applications, it takes up the entirety of the screen. Two templates are provided, along with a roll-your-own option. We'll go with the Home Budget for illustration. The Home Budget template pulls up a simplified home budget by month which you can fill in. Jane supports 40, 64 and 80 column modes, all rendered in software on the VIC-IIe 320x200 display (not with the VDC's 640x200 display), but by default it uses 40. (I'll get to this in more detail in the word processor.) Along the bottom are various operators and the extent of the formula functions available (hardly competition for the Convergent WorkSlate). They can be selected with the pointer in lieu of text entry, which makes them quite discoverable, but in practice it's simply faster to type them. No other functions are implemented. Since the content window cannot be resized, the maximize gadget from the Apple II version became obviously useless and was removed. By using the joystick/mouse you can use the hand to point to a cell and then, with the hand pointing to it, just start typing text or a number. The cursor keys will move the pointer from cell to cell for you, though they will not exit the content area. If you click or otherwise select the cell with the hand, however, Jane considers this an attempt to construct a formula, which again would be frustrating to modern audiences used to, say, Microsoft Excel. But to edit it again, you pick the insert tool instead of the hand, and this time you must select the cell to type in it. Motion around the content area in all three applications is accomplished using multiple small icons in the bottom and right window borders. The "half full" icon pushes it all the way to the outer edge in that direction, while the double and single arrows move the viewport by large leaps and small leaps respectively. There are no thumbs to show relative location, but you can click anywhere along the scroll area for a proportionately "medium" jump if you like. You can also use CTRL-CRSR/CTRL-arrow keys. Even in 40-column mode, and even given that the scroll doesn't animate and just snaps to the new position, scrolling is agonizingly slow and multiple clicks on the scroll controls invariably overshoot. Putting it in 80 column mode doesn't just give you more on the screen — it also means you don't need to endure as many pauses trying to move around. Again, I'll have more to say about font sizes when we get to Janewrite. Unique to Janecalc, the scrolling actually wraps. Worksheets remain limited to 26 columns (A-Z), as in the Apple II version, but now up to 50 rows are allowed. Still, this wouldn't have been sufficient for anything larger than a modest small business, even in 1985. Formulas are approximately VisiCalc-style using A1 absolute notation for cells, though there are no sigils for functions (not that there's very many) and ranges are delimited by colons. Most basic math operators and parentheses are available. Here, we'll get a sum of this row ... ... and then manually calculate an average by dividing the sum by the count of populated rows (we could also just use avg). The template includes this at the bottom, but this shows you how formula entry worked. As we add data to dependent cells the sheets recalculate but circular references are not handled, though in fairness this capability was still not common in small spreadsheet applications. We'll go to Janelist next. When we do so, a red window pops up to prompt us to save our work. Switching to Janelist. Creating our new list. All very consistent (the file manager and requester seem to be part of the Jane kernel). Janelist, in fairness, never purported to be a database in any incarnation and acts more like a cardfile; even the manual merely refers to it as a "list keeper." Like Janecalc it comes with templates, though Janelist supports a substantial number more. For variety I'll try to enter some of my very large CD collection, because I'm one of those people (vinyl is for art, CD is for listening). The list comes up as fillable fields. There may be up to 15 field names up to 12 characters long. If you choose to create your own, then Jane will step you through entering the field names. That's about all the customization you can do. The values for those fields can span multiple lines, which is what the viewport scrolling is for — you use the icons at the bottom to advance through individual cards. Incidentally, Atom Heart Mother is Pink Floyd's finest album and I will tolerate no disagreement. The icon that looks like cards being pulled out suggests how to make a query (the magnifying glass icon, or possibly the funnel icon to denote a filter, wasn't universal at this point). Because it gives you choices, it's yellow, remember? The two OK buttons do different things. The top one filters cards to the query requested, but the bottom one undoes any query. You can query on top of queries for a primitive sort of logical-AND. Partial word searches are supported. For example, here is the second best Beatles album — the best is, of course, Abbey Road. Since we searched for the Beatles, when we run out of Beatles CDs, nothing more turns up from my formidable library. It is also possible to sort cards, in which case they appear in that order instead. You cannot sort on multiple fields, and you can't sort descending. Finally, Janewrite, where we will spend the rest of our time — and where apparently most of Jane's users spent theirs, including our previous owners. I've got a prefab file here I constructed while playing around to explore the file format, so this time we'll load a document instead of entering one, just to show you what that looks like from the file requester. Janewrite is IMHO the most polished and competent of the three apps, and it feels like the most development time was spent on it, too. It also shows what the Jane font renderer is capable of: although non-proportional and only a single typeface, you can see bold, underline, bold and underlined, superscript, and subscript are all possible. The bottom shows left, right, centre and full justification options, done per line, plus the font options, and then search (this time with a magnifying glass) and page layout. These icons are larger and more detailed than the Apple's. As with other parts of the UI, text attributes are set verb-initial, i.e., you would choose the desired style, then the insertion tool, then highlight the range of text and finally release the button (or, annoyingly, wait, which makes fine adjustments harder than they should be). Notice that there is an explicit bold-and-underline option, instead of using the separate bold and underline options in combination: that's because you can't make superscripted or subscripted text bold or underlined. The top of the content area shows the ruler — in characters, not inches — and margin stops and the single paragraph indent stop, which you can drag to change them. Interestingly, the ruler seems to be new for Jane 128: no screenshot for the Apple II version demonstrates one. Janewrite is also capable of a modicum of WYSIWYG if you select the 80 column option. This and other options come from the "computer" icon, which acts as a preference panel. Preferences are saved to the application disk and are global to all three applications. Despite this presenting a choice window (ordinarily yellow), Jane seems to treat it as a global window from the kernel, so it's grey. The bottom set of options are specifically for configuring the printer. Print output is generated with control codes and text only; Jane does not generate graphic sequences, so what actually shows up on the page depends on what your printer actually supports. The default middle print size option corresponds to 80 columns (more accurately, the default or 12cpi font size), while the small font corresponds to the condensed 15cpi and/or 132 column option available on some printers, and the large font corresponds to the 60 or 64-column (e.g., 10cpi) option also only available on some printers — not the expanded double wide printing option more typical of Commodore-specific devices. You could also select between regular fanfold tractor feed or plain paper, as well as the Near Letter Quality print option some printers supported, and finally the printer itself. There was built-in support for the MPS-801 (i.e., 1525), MPS-802 (i.e., 1526), 1101, "Oki" (generic Okidata), and generic "Epson" printers, assuming they were connected somehow to the IEC serial such as through a third-party parallel printer interface. These printer drivers varied wildly in their capabilities: the 1525/MPS-801 "driver" supported almost nothing except basic text, while the generic Okidata and Epson drivers supported nearly everything that Jane could generate. The "OTHER" driver is customizeable, a neat idea, if a little clumsy. A BASIC program called BUILDPRT on the grey disk allows you to populate it with your printer's control codes. Control sequences up to three characters long were supported. You would enter these from the manual, it would save them to disk, and then you could use the custom driver inside Jane. The topmost options affect the appearance of Jane. You can choose from three font sizes, all non-proportional, corresponding to 40, 64 or 80 column text. Confusingly, the 80-column option is the last when it's the middle option for printing. (The Apple II version likely didn't support 80 column text due to its smaller hi-res horizontal width.) Pointer speed and the "beep" Jane makes when you select options are also configurable. Here's how it looks in 80 columns, using the typical "soft 80" approach on the 64 which is more or less legible, at least on a composite display. As there are no colours in the content area, there is no risk of colour clash. This is probably the most useful view in Janewrite. The 64-column view, by contrast, is probably the least useful. The 40-column view is the most legible and 2:1 the size of a typical 80-column line, so it's easy to mentally grok page layout that way, but the 64-column view is odd enough to end up being the worst of both worlds. An interesting feature of Janewrite are the accented characters, which was not frequently seen on home computer-class word processors, as explained by the on-line help. Janewrite treats them as diacritics, and they can even be applied to letters that wouldn't ordinarily use them (because who knows? some language might), such as the grave and acute accents on the n as well as the more typical tilde. In fact, you can apply them to any character, even punctuation. However, the use of the up arrow to indicate a circumflex means there's no way you can type a literal caret into your document, and while a macron would have been nice, omitting the umlaut seems a greater fault. The decorators are also rather hard to distinguish in 80 columns, so Spanish users of Juana 128 might want to go to cuarenta column mode to mirar mejor. Janewrite also has basic find and/or find-and-replace, and a small pane appears below the content area when it's active. There are also decent page layout options, including setting both a per-page title and its position, adding a page number and its position, and margins, number of copies and starting page, though the last two would seem more appropriate for a print dialogue than a page layout one. Note that Jane will always print a 10-space left margin, so an 80-column printed line can be no longer than 70 characters, and this is indeed the maximum width Janewrite will support. However, paragraphs are apparently not stored as continuous sequences of text, demonstrated here with a contrived example. (In fact, we'll prove they aren't shortly.) While Janewrite will word-wrap at the right margin, inserting text after that will wrap onto a new line, not into the next line, even if the two lines were previously entered "together." There's a speed/flexibility tradeoff here in that Janewrite doesn't have to continuously reflow paragraphs, but it also means its concept of a paragraph is entirely based on how much you select. The text can be manually reflowed, joining lines if necessary, by picking one of the paragraph justification options and selecting the text with the hand, which will then be reflowed (and, if needed, spaces inserted) to match. In fact, this is also necessary if you change the margins because Jane doesn't automatically reformat your document then either. I also promised you an example of cut and paste, so here's one using the scissors (cut). You simply pick it and, with the button down, drag it across the text you want and release the button. Note that there is no undo, though I suppose you could just immediately paste it back in. Exiting Janewrite (though not saving, because we need the accented characters to stay in the file). Now that we understand what Jane can do and how it works, let's move on to converting the files. We can extract our test files we made from our .d71 with VICE's c1541 utility and hexdump it. This got a little more difficult than it should have been: % c1541 work.d71 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> dir 0 "data#000 " 01 2a 39 "c.TESTCALC" prg 3 "l.TESTLIST" prg 4 "w.nOTE.2" prg 4 "w.TESTCONV" prg 1278 blocks free. c1541 #8> read "w.TESTCONV" ERR = 62, FILE NOT FOUND, 00, 00 cannot read `w.TESTCONV' on unit 8 invalid filename As you may have guessed, that's because the filenames, and it turns out the data in the files themselves, are stored as true ASCII, not PETSCII (indeed as they would have been on the Apple II, also), so c1541's filename conversion fails. Fortunately, the extract command will walk the entire directory and pull out all the files no matter what they're named. The documents are all regular Commodore PRoGram files with a starting address and they appear to be loaded in-place at that address into bank 1. This introduces the possibility of some delightful save-file hacks but we're not here for that today. That means we can also simply extract our previous owners' files en masse as well. I imaged their disk using my ZoomFloppy and external 1571, and since they are normal PRGs, a BAM copy of the allocated sectors is all we need to do, with one wrinkle: % d64copy -B 9 r_jane_bam.d64 [Warning] growing image file to 683 blocks 14: --*****--*****--***** 8% 15/171[Warning] read error: 0e/00: 5 14: ?******************** 12% 21/171[Warning] giving up... 14: ?******************** 15: ********************* 16: ********************* 17: ********************* 18: ******************* 19: ******************* 20: ******************* 21: ******************* 22: ****..***...***...* 100% 171/171 170 blocks copied. % c1541 r_jane_bam.d64 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> extract c1541 #8> quit Fortunately it doesn't look like the bad sector was in any of the files they cared about. Let's get an idea of the format from our test files. Janecalc files are "huge" because it looks like the entire 26x50 cell range is saved regardless of whether anything's in it or not. Looking at the directory of their data disk where they had saved a couple of sparse test spreadsheets of their own, they also were 39 blocks in length no matter how many cells were actually populated. The on-disk format is consequentially a bit wasteful: 000003a0 00 00 00 00 00 20 20 20 4a 61 6e 75 61 72 79 20 |..... January | 000003b0 20 46 65 62 72 75 61 72 79 20 20 20 20 20 4d 61 | February Ma| 000003c0 72 63 68 20 20 20 20 20 41 70 72 69 6c 20 20 20 |rch April | 000003d0 20 20 20 20 4d 61 79 20 20 20 20 20 20 4a 75 6e | May Jun| 000003e0 65 20 20 20 20 20 20 4a 75 6c 79 20 20 20 20 41 |e July A| 000003f0 75 67 75 73 74 20 53 65 70 74 65 6d 62 65 72 20 |ugust September | 00000400 20 20 4f 63 74 6f 62 65 72 20 20 4e 6f 76 65 6d | October Novem| 00000410 62 65 72 20 20 44 65 63 65 6d 62 65 72 00 00 01 |ber December...| 00000420 04 00 00 00 00 00 00 20 20 54 6f 74 61 6c 20 20 |....... Total | 00000430 20 41 76 65 72 61 67 65 20 20 20 00 00 01 04 00 | Average .....| Cardfiles are stored much more efficiently. Here's the entirety of our two cards. The fields are in the header, padded out to the fixed 12 character length, but with technically unnecessary nulls between them. A spurious "Beatles" entry looks like a buffer that was captured as part of the save, and there is also a page-aligned (counting the starting address) pad of nulls. Otherwise, the value strings look null-delimited, in the order they appear in the field list (unpopulated fields are zero-length strings). When you run out of fields, you're on the next card. % hexdump -C l.TESTLIST 00000000 00 7f 01 00 36 02 08 00 04 00 54 69 74 6c 65 20 |....6.....Title | 00000010 20 20 20 20 20 20 00 4c 65 61 64 20 41 72 74 69 | .Lead Arti| 00000020 73 74 20 00 4f 74 68 65 72 20 41 72 74 69 73 74 |st .Other Artist| 00000030 00 43 6f 6d 70 6f 73 65 72 20 20 20 20 00 43 6f |.Composer .Co| 00000040 6e 64 75 63 74 6f 72 20 20 20 00 57 68 65 72 65 |nductor .Where| 00000050 20 4b 65 70 74 20 20 00 42 6f 72 72 6f 77 65 64 | Kept .Borrowed| 00000060 20 62 79 20 00 44 61 74 65 20 4c 65 6e 74 20 20 | by .Date Lent | 00000070 20 00 00 00 ff ff 01 ff ff ff ff ff ff ff ff ff | ...............| 00000080 ff ff ff ff ff 00 01 02 03 04 05 06 07 00 01 02 |................| 00000090 03 04 05 06 07 ff ff ff ff ff ff ff ff ff ff 00 |................| 000000a0 00 54 68 65 20 42 65 61 74 6c 65 73 00 00 00 00 |.The Beatles....| 000000b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00000100 d7 09 80 60 60 ac 98 09 ae 04 cf a5 ea a9 d7 15 |...``...........| 00000110 80 ac 1d 21 d6 1c 80 60 60 ac 98 09 ae 04 cf 20 |...!...``...... | 00000120 75 0b 00 00 ac 0a 95 a5 f0 b0 a9 a6 b1 a9 a4 b1 |u...............| 00000130 a5 f1 b0 a9 a7 b1 a9 a5 b1 ac c0 08 cf 20 75 0b |............. u.| 00000140 fe ff a5 37 ae 8c ff 00 c0 d8 4b 80 cf a5 f0 b0 |...7......K.....| 00000150 a7 a6 b1 c0 d8 60 80 a5 f1 b0 a7 a7 b1 c0 d8 60 |.....`.........`| 00000160 80 cf a5 f0 b0 a7 a6 b1 00 00 09 00 01 5d f6 00 |.............]..| 00000170 00 00 00 09 00 09 00 01 66 f6 00 00 00 00 54 00 |........f.....T.| 00000180 50 00 01 b1 f6 69 64 65 20 12 00 42 00 01 6f f6 |P....ide ..B..o.| 00000190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 000001a0 00 00 00 00 00 00 00 52 65 76 6f 6c 76 65 72 00 |.......Revolver.| 000001b0 54 68 65 20 42 65 61 74 6c 65 73 00 00 4c 65 6e |The Beatles..Len| 000001c0 6e 6f 6e 2d 4d 63 43 61 72 74 6e 65 79 2d 48 61 |non-McCartney-Ha| 000001d0 72 72 69 73 6f 6e 00 47 65 6f 72 67 65 20 4d 61 |rrison.George Ma| 000001e0 72 74 69 6e 00 00 00 00 00 41 74 6f 6d 20 48 65 |rtin.....Atom He| 000001f0 61 72 74 20 4d 6f 74 68 65 72 00 50 69 6e 6b 20 |art Mother.Pink | 00000200 46 6c 6f 79 64 00 00 57 61 74 65 72 73 2d 47 69 |Floyd..Waters-Gi| 00000210 6c 6d 6f 75 72 2d 4d 61 73 6f 6e 2d 57 72 69 67 |lmour-Mason-Wrig| 00000220 68 74 2d 47 65 65 73 6f 6e 00 50 69 6e 6b 20 46 |ht-Geeson.Pink F| 00000230 6c 6f 79 64 00 00 00 00 |loyd....| 00000238 This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. The disk icon brings up a basic file manager allowing you to make duplicate backup files (but only to the same disk), rename or delete them, or create a new disk. The copy option is the default and is pre-selected when the window opens, which is irritating, because our modern reflexive habit of selecting the file first and then the action will cause an immediate copy to occur before you get the chance to click anything else. I don't think this was just me: there were several spurious duplicate files on the original black data disk I suspect for the same reason. If files are present on the disk, they will appear with their names and a filetype letter (W, C or L for Janewrite, Janecalc or Janelist respectively). Notice the slightly misshapen scrolling arrows, which were nice and clean on the Apple. We'll provide the .d71 to Jane here. Windows warning you about data loss have a red border. Interestingly, it provides both a No button and the exit button, which both do the same thing: abort back to the file manager. Jane seems unable to distinguish between an unformatted disk and a completely absent one, and will (fruitlessly) attempt to format an empty drive. Formatting in progress. The time estimates are surprisingly not far off. With our disk formatted, let's return to Janewrite at the end, since this will be the majority of the documents we'll convert. Instead, we'll start with the spreadsheet, Janecalc. Whenever any of the three built-in applications starts up, and once Jane has located the data disk, a file selector (in grey) appears. There are no spreadsheets ("worksheets") on our freshly formatted disk, so we click the NEW icon. Entering the new filename (blue window). You may have noticed that the red and blue windows are all invariably the same size regardless of contents and any active controls they contain. This probably simplified rendering quite a bit. Because Janecalc is green, its content window border is likewise green, and because Jane 128 doesn't multitask between the applications, it takes up the entirety of the screen. Two templates are provided, along with a roll-your-own option. We'll go with the Home Budget for illustration. The Home Budget template pulls up a simplified home budget by month which you can fill in. Jane supports 40, 64 and 80 column modes, all rendered in software on the VIC-IIe 320x200 display (not with the VDC's 640x200 display), but by default it uses 40. (I'll get to this in more detail in the word processor.) Along the bottom are various operators and the extent of the formula functions available (hardly competition for the Convergent WorkSlate). They can be selected with the pointer in lieu of text entry, which makes them quite discoverable, but in practice it's simply faster to type them. No other functions are implemented. Since the content window cannot be resized, the maximize gadget from the Apple II version became obviously useless and was removed. By using the joystick/mouse you can use the hand to point to a cell and then, with the hand pointing to it, just start typing text or a number. The cursor keys will move the pointer from cell to cell for you, though they will not exit the content area. If you click or otherwise select the cell with the hand, however, Jane considers this an attempt to construct a formula, which again would be frustrating to modern audiences used to, say, Microsoft Excel. But to edit it again, you pick the insert tool instead of the hand, and this time you must select the cell to type in it. Motion around the content area in all three applications is accomplished using multiple small icons in the bottom and right window borders. The "half full" icon pushes it all the way to the outer edge in that direction, while the double and single arrows move the viewport by large leaps and small leaps respectively. There are no thumbs to show relative location, but you can click anywhere along the scroll area for a proportionately "medium" jump if you like. You can also use CTRL-CRSR/CTRL-arrow keys. Even in 40-column mode, and even given that the scroll doesn't animate and just snaps to the new position, scrolling is agonizingly slow and multiple clicks on the scroll controls invariably overshoot. Putting it in 80 column mode doesn't just give you more on the screen — it also means you don't need to endure as many pauses trying to move around. Again, I'll have more to say about font sizes when we get to Janewrite. Unique to Janecalc, the scrolling actually wraps. Worksheets remain limited to 26 columns (A-Z), as in the Apple II version, but now up to 50 rows are allowed. Still, this wouldn't have been sufficient for anything larger than a modest small business, even in 1985. Formulas are approximately VisiCalc-style using A1 absolute notation for cells, though there are no sigils for functions (not that there's very many) and ranges are delimited by colons. Most basic math operators and parentheses are available. Here, we'll get a sum of this row ... ... and then manually calculate an average by dividing the sum by the count of populated rows (we could also just use avg). The template includes this at the bottom, but this shows you how formula entry worked. As we add data to dependent cells the sheets recalculate but circular references are not handled, though in fairness this capability was still not common in small spreadsheet applications. We'll go to Janelist next. When we do so, a red window pops up to prompt us to save our work. Switching to Janelist. Creating our new list. All very consistent (the file manager and requester seem to be part of the Jane kernel). Janelist, in fairness, never purported to be a database in any incarnation and acts more like a cardfile; even the manual merely refers to it as a "list keeper." Like Janecalc it comes with templates, though Janelist supports a substantial number more. For variety I'll try to enter some of my very large CD collection, because I'm one of those people (vinyl is for art, CD is for listening). The list comes up as fillable fields. There may be up to 15 field names up to 12 characters long. If you choose to create your own, then Jane will step you through entering the field names. That's about all the customization you can do. The values for those fields can span multiple lines, which is what the viewport scrolling is for — you use the icons at the bottom to advance through individual cards. Incidentally, Atom Heart Mother is Pink Floyd's finest album and I will tolerate no disagreement. The icon that looks like cards being pulled out suggests how to make a query (the magnifying glass icon, or possibly the funnel icon to denote a filter, wasn't universal at this point). Because it gives you choices, it's yellow, remember? The two OK buttons do different things. The top one filters cards to the query requested, but the bottom one undoes any query. You can query on top of queries for a primitive sort of logical-AND. Partial word searches are supported. For example, here is the second best Beatles album — the best is, of course, Abbey Road. Since we searched for the Beatles, when we run out of Beatles CDs, nothing more turns up from my formidable library. It is also possible to sort cards, in which case they appear in that order instead. You cannot sort on multiple fields, and you can't sort descending. Finally, Janewrite, where we will spend the rest of our time — and where apparently most of Jane's users spent theirs, including our previous owners. I've got a prefab file here I constructed while playing around to explore the file format, so this time we'll load a document instead of entering one, just to show you what that looks like from the file requester. Janewrite is IMHO the most polished and competent of the three apps, and it feels like the most development time was spent on it, too. It also shows what the Jane font renderer is capable of: although non-proportional and only a single typeface, you can see bold, underline, bold and underlined, superscript, and subscript are all possible. The bottom shows left, right, centre and full justification options, done per line, plus the font options, and then search (this time with a magnifying glass) and page layout. These icons are larger and more detailed than the Apple's. As with other parts of the UI, text attributes are set verb-initial, i.e., you would choose the desired style, then the insertion tool, then highlight the range of text and finally release the button (or, annoyingly, wait, which makes fine adjustments harder than they should be). Notice that there is an explicit bold-and-underline option, instead of using the separate bold and underline options in combination: that's because you can't make superscripted or subscripted text bold or underlined. The top of the content area shows the ruler — in characters, not inches — and margin stops and the single paragraph indent stop, which you can drag to change them. Interestingly, the ruler seems to be new for Jane 128: no screenshot for the Apple II version demonstrates one. Janewrite is also capable of a modicum of WYSIWYG if you select the 80 column option. This and other options come from the "computer" icon, which acts as a preference panel. Preferences are saved to the application disk and are global to all three applications. Despite this presenting a choice window (ordinarily yellow), Jane seems to treat it as a global window from the kernel, so it's grey. The bottom set of options are specifically for configuring the printer. Print output is generated with control codes and text only; Jane does not generate graphic sequences, so what actually shows up on the page depends on what your printer actually supports. The default middle print size option corresponds to 80 columns (more accurately, the default or 12cpi font size), while the small font corresponds to the condensed 15cpi and/or 132 column option available on some printers, and the large font corresponds to the 60 or 64-column (e.g., 10cpi) option also only available on some printers — not the expanded double wide printing option more typical of Commodore-specific devices. You could also select between regular fanfold tractor feed or plain paper, as well as the Near Letter Quality print option some printers supported, and finally the printer itself. There was built-in support for the MPS-801 (i.e., 1525), MPS-802 (i.e., 1526), 1101, "Oki" (generic Okidata), and generic "Epson" printers, assuming they were connected somehow to the IEC serial such as through a third-party parallel printer interface. These printer drivers varied wildly in their capabilities: the 1525/MPS-801 "driver" supported almost nothing except basic text, while the generic Okidata and Epson drivers supported nearly everything that Jane could generate. The "OTHER" driver is customizeable, a neat idea, if a little clumsy. A BASIC program called BUILDPRT on the grey disk allows you to populate it with your printer's control codes. Control sequences up to three characters long were supported. You would enter these from the manual, it would save them to disk, and then you could use the custom driver inside Jane. The topmost options affect the appearance of Jane. You can choose from three font sizes, all non-proportional, corresponding to 40, 64 or 80 column text. Confusingly, the 80-column option is the last when it's the middle option for printing. (The Apple II version likely didn't support 80 column text due to its smaller hi-res horizontal width.) Pointer speed and the "beep" Jane makes when you select options are also configurable. Here's how it looks in 80 columns, using the typical "soft 80" approach on the 64 which is more or less legible, at least on a composite display. As there are no colours in the content area, there is no risk of colour clash. This is probably the most useful view in Janewrite. The 64-column view, by contrast, is probably the least useful. The 40-column view is the most legible and 2:1 the size of a typical 80-column line, so it's easy to mentally grok page layout that way, but the 64-column view is odd enough to end up being the worst of both worlds. An interesting feature of Janewrite are the accented characters, which was not frequently seen on home computer-class word processors, as explained by the on-line help. Janewrite treats them as diacritics, and they can even be applied to letters that wouldn't ordinarily use them (because who knows? some language might), such as the grave and acute accents on the n as well as the more typical tilde. In fact, you can apply them to any character, even punctuation. However, the use of the up arrow to indicate a circumflex means there's no way you can type a literal caret into your document, and while a macron would have been nice, omitting the umlaut seems a greater fault. The decorators are also rather hard to distinguish in 80 columns, so Spanish users of Juana 128 might want to go to cuarenta column mode to mirar mejor. Janewrite also has basic find and/or find-and-replace, and a small pane appears below the content area when it's active. There are also decent page layout options, including setting both a per-page title and its position, adding a page number and its position, and margins, number of copies and starting page, though the last two would seem more appropriate for a print dialogue than a page layout one. Note that Jane will always print a 10-space left margin, so an 80-column printed line can be no longer than 70 characters, and this is indeed the maximum width Janewrite will support. However, paragraphs are apparently not stored as continuous sequences of text, demonstrated here with a contrived example. (In fact, we'll prove they aren't shortly.) While Janewrite will word-wrap at the right margin, inserting text after that will wrap onto a new line, not into the next line, even if the two lines were previously entered "together." There's a speed/flexibility tradeoff here in that Janewrite doesn't have to continuously reflow paragraphs, but it also means its concept of a paragraph is entirely based on how much you select. The text can be manually reflowed, joining lines if necessary, by picking one of the paragraph justification options and selecting the text with the hand, which will then be reflowed (and, if needed, spaces inserted) to match. In fact, this is also necessary if you change the margins because Jane doesn't automatically reformat your document then either. I also promised you an example of cut and paste, so here's one using the scissors (cut). You simply pick it and, with the button down, drag it across the text you want and release the button. Note that there is no undo, though I suppose you could just immediately paste it back in. Exiting Janewrite (though not saving, because we need the accented characters to stay in the file). Now that we understand what Jane can do and how it works, let's move on to converting the files. We can extract our test files we made from our .d71 with VICE's c1541 utility and hexdump it. This got a little more difficult than it should have been: % c1541 work.d71 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> dir 0 "data#000 " 01 2a 39 "c.TESTCALC" prg 3 "l.TESTLIST" prg 4 "w.nOTE.2" prg 4 "w.TESTCONV" prg 1278 blocks free. c1541 #8> read "w.TESTCONV" ERR = 62, FILE NOT FOUND, 00, 00 cannot read `w.TESTCONV' on unit 8 invalid filename As you may have guessed, that's because the filenames, and it turns out the data in the files themselves, are stored as true ASCII, not PETSCII (indeed as they would have been on the Apple II, also), so c1541's filename conversion fails. Fortunately, the extract command will walk the entire directory and pull out all the files no matter what they're named. The documents are all regular Commodore PRoGram files with a starting address and they appear to be loaded in-place at that address into bank 1. This introduces the possibility of some delightful save-file hacks but we're not here for that today. That means we can also simply extract our previous owners' files en masse as well. I imaged their disk using my ZoomFloppy and external 1571, and since they are normal PRGs, a BAM copy of the allocated sectors is all we need to do, with one wrinkle: % d64copy -B 9 r_jane_bam.d64 [Warning] growing image file to 683 blocks 14: --*****--*****--***** 8% 15/171[Warning] read error: 0e/00: 5 14: ?******************** 12% 21/171[Warning] giving up... 14: ?******************** 15: ********************* 16: ********************* 17: ********************* 18: ******************* 19: ******************* 20: ******************* 21: ******************* 22: ****..***...***...* 100% 171/171 170 blocks copied. % c1541 r_jane_bam.d64 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> extract c1541 #8> quit Fortunately it doesn't look like the bad sector was in any of the files they cared about. Let's get an idea of the format from our test files. Janecalc files are "huge" because it looks like the entire 26x50 cell range is saved regardless of whether anything's in it or not. Looking at the directory of their data disk where they had saved a couple of sparse test spreadsheets of their own, they also were 39 blocks in length no matter how many cells were actually populated. The on-disk format is consequentially a bit wasteful: 000003a0 00 00 00 00 00 20 20 20 4a 61 6e 75 61 72 79 20 |..... January | 000003b0 20 46 65 62 72 75 61 72 79 20 20 20 20 20 4d 61 | February Ma| 000003c0 72 63 68 20 20 20 20 20 41 70 72 69 6c 20 20 20 |rch April | 000003d0 20 20 20 20 4d 61 79 20 20 20 20 20 20 4a 75 6e | May Jun| 000003e0 65 20 20 20 20 20 20 4a 75 6c 79 20 20 20 20 41 |e July A| 000003f0 75 67 75 73 74 20 53 65 70 74 65 6d 62 65 72 20 |ugust September | 00000400 20 20 4f 63 74 6f 62 65 72 20 20 4e 6f 76 65 6d | October Novem| 00000410 62 65 72 20 20 44 65 63 65 6d 62 65 72 00 00 01 |ber December...| 00000420 04 00 00 00 00 00 00 20 20 54 6f 74 61 6c 20 20 |....... Total | 00000430 20 41 76 65 72 61 67 65 20 20 20 00 00 01 04 00 | Average .....| Cardfiles are stored much more efficiently. Here's the entirety of our two cards. The fields are in the header, padded out to the fixed 12 character length, but with technically unnecessary nulls between them. A spurious "Beatles" entry looks like a buffer that was captured as part of the save, and there is also a page-aligned (counting the starting address) pad of nulls. Otherwise, the value strings look null-delimited, in the order they appear in the field list (unpopulated fields are zero-length strings). When you run out of fields, you're on the next card. % hexdump -C l.TESTLIST 00000000 00 7f 01 00 36 02 08 00 04 00 54 69 74 6c 65 20 |....6.....Title | 00000010 20 20 20 20 20 20 00 4c 65 61 64 20 41 72 74 69 | .Lead Arti| 00000020 73 74 20 00 4f 74 68 65 72 20 41 72 74 69 73 74 |st .Other Artist| 00000030 00 43 6f 6d 70 6f 73 65 72 20 20 20 20 00 43 6f |.Composer .Co| 00000040 6e 64 75 63 74 6f 72 20 20 20 00 57 68 65 72 65 |nductor .Where| 00000050 20 4b 65 70 74 20 20 00 42 6f 72 72 6f 77 65 64 | Kept .Borrowed| 00000060 20 62 79 20 00 44 61 74 65 20 4c 65 6e 74 20 20 | by .Date Lent | 00000070 20 00 00 00 ff ff 01 ff ff ff ff ff ff ff ff ff | ...............| 00000080 ff ff ff ff ff 00 01 02 03 04 05 06 07 00 01 02 |................| 00000090 03 04 05 06 07 ff ff ff ff ff ff ff ff ff ff 00 |................| 000000a0 00 54 68 65 20 42 65 61 74 6c 65 73 00 00 00 00 |.The Beatles....| 000000b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00000100 d7 09 80 60 60 ac 98 09 ae 04 cf a5 ea a9 d7 15 |...``...........| 00000110 80 ac 1d 21 d6 1c 80 60 60 ac 98 09 ae 04 cf 20 |...!...``...... | 00000120 75 0b 00 00 ac 0a 95 a5 f0 b0 a9 a6 b1 a9 a4 b1 |u...............| 00000130 a5 f1 b0 a9 a7 b1 a9 a5 b1 ac c0 08 cf 20 75 0b |............. u.| 00000140 fe ff a5 37 ae 8c ff 00 c0 d8 4b 80 cf a5 f0 b0 |...7......K.....| 00000150 a7 a6 b1 c0 d8 60 80 a5 f1 b0 a7 a7 b1 c0 d8 60 |.....`.........`| 00000160 80 cf a5 f0 b0 a7 a6 b1 00 00 09 00 01 5d f6 00 |.............]..| 00000170 00 00 00 09 00 09 00 01 66 f6 00 00 00 00 54 00 |........f.....T.| 00000180 50 00 01 b1 f6 69 64 65 20 12 00 42 00 01 6f f6 |P....ide ..B..o.| 00000190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 000001a0 00 00 00 00 00 00 00 52 65 76 6f 6c 76 65 72 00 |.......Revolver.| 000001b0 54 68 65 20 42 65 61 74 6c 65 73 00 00 4c 65 6e |The Beatles..Len| 000001c0 6e 6f 6e 2d 4d 63 43 61 72 74 6e 65 79 2d 48 61 |non-McCartney-Ha| 000001d0 72 72 69 73 6f 6e 00 47 65 6f 72 67 65 20 4d 61 |rrison.George Ma| 000001e0 72 74 69 6e 00 00 00 00 00 41 74 6f 6d 20 48 65 |rtin.....Atom He| 000001f0 61 72 74 20 4d 6f 74 68 65 72 00 50 69 6e 6b 20 |art Mother.Pink | 00000200 46 6c 6f 79 64 00 00 57 61 74 65 72 73 2d 47 69 |Floyd..Waters-Gi| 00000210 6c 6d 6f 75 72 2d 4d 61 73 6f 6e 2d 57 72 69 67 |lmour-Mason-Wrig| 00000220 68 74 2d 47 65 65 73 6f 6e 00 50 69 6e 6b 20 46 |ht-Geeson.Pink F| 00000230 6c 6f 79 64 00 00 00 00 |loyd....| 00000238 This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. Along the bottom are various operators and the extent of the formula functions available (hardly competition for the Convergent WorkSlate). They can be selected with the pointer in lieu of text entry, which makes them quite discoverable, but in practice it's simply faster to type them. No other functions are implemented. Since the content window cannot be resized, the maximize gadget from the Apple II version became obviously useless and was removed. By using the joystick/mouse you can use the hand to point to a cell and then, with the hand pointing to it, just start typing text or a number. The cursor keys will move the pointer from cell to cell for you, though they will not exit the content area. If you click or otherwise select the cell with the hand, however, Jane considers this an attempt to construct a formula, which again would be frustrating to modern audiences used to, say, Microsoft Excel. But to edit it again, you pick the insert tool instead of the hand, and this time you must select the cell to type in it. Motion around the content area in all three applications is accomplished using multiple small icons in the bottom and right window borders. The "half full" icon pushes it all the way to the outer edge in that direction, while the double and single arrows move the viewport by large leaps and small leaps respectively. There are no thumbs to show relative location, but you can click anywhere along the scroll area for a proportionately "medium" jump if you like. You can also use CTRL-CRSR/CTRL-arrow keys. Even in 40-column mode, and even given that the scroll doesn't animate and just snaps to the new position, scrolling is agonizingly slow and multiple clicks on the scroll controls invariably overshoot. Putting it in 80 column mode doesn't just give you more on the screen — it also means you don't need to endure as many pauses trying to move around. Again, I'll have more to say about font sizes when we get to Janewrite. Unique to Janecalc, the scrolling actually wraps. Worksheets remain limited to 26 columns (A-Z), as in the Apple II version, but now up to 50 rows are allowed. Still, this wouldn't have been sufficient for anything larger than a modest small business, even in 1985. Formulas are approximately VisiCalc-style using A1 absolute notation for cells, though there are no sigils for functions (not that there's very many) and ranges are delimited by colons. Most basic math operators and parentheses are available. Here, we'll get a sum of this row ... ... and then manually calculate an average by dividing the sum by the count of populated rows (we could also just use avg). The template includes this at the bottom, but this shows you how formula entry worked. As we add data to dependent cells the sheets recalculate but circular references are not handled, though in fairness this capability was still not common in small spreadsheet applications. We'll go to Janelist next. When we do so, a red window pops up to prompt us to save our work. Switching to Janelist. Creating our new list. All very consistent (the file manager and requester seem to be part of the Jane kernel). Janelist, in fairness, never purported to be a database in any incarnation and acts more like a cardfile; even the manual merely refers to it as a "list keeper." Like Janecalc it comes with templates, though Janelist supports a substantial number more. For variety I'll try to enter some of my very large CD collection, because I'm one of those people (vinyl is for art, CD is for listening). The list comes up as fillable fields. There may be up to 15 field names up to 12 characters long. If you choose to create your own, then Jane will step you through entering the field names. That's about all the customization you can do. The values for those fields can span multiple lines, which is what the viewport scrolling is for — you use the icons at the bottom to advance through individual cards. Incidentally, Atom Heart Mother is Pink Floyd's finest album and I will tolerate no disagreement. The icon that looks like cards being pulled out suggests how to make a query (the magnifying glass icon, or possibly the funnel icon to denote a filter, wasn't universal at this point). Because it gives you choices, it's yellow, remember? The two OK buttons do different things. The top one filters cards to the query requested, but the bottom one undoes any query. You can query on top of queries for a primitive sort of logical-AND. Partial word searches are supported. For example, here is the second best Beatles album — the best is, of course, Abbey Road. Since we searched for the Beatles, when we run out of Beatles CDs, nothing more turns up from my formidable library. It is also possible to sort cards, in which case they appear in that order instead. You cannot sort on multiple fields, and you can't sort descending. Finally, Janewrite, where we will spend the rest of our time — and where apparently most of Jane's users spent theirs, including our previous owners. I've got a prefab file here I constructed while playing around to explore the file format, so this time we'll load a document instead of entering one, just to show you what that looks like from the file requester. Janewrite is IMHO the most polished and competent of the three apps, and it feels like the most development time was spent on it, too. It also shows what the Jane font renderer is capable of: although non-proportional and only a single typeface, you can see bold, underline, bold and underlined, superscript, and subscript are all possible. The bottom shows left, right, centre and full justification options, done per line, plus the font options, and then search (this time with a magnifying glass) and page layout. These icons are larger and more detailed than the Apple's. As with other parts of the UI, text attributes are set verb-initial, i.e., you would choose the desired style, then the insertion tool, then highlight the range of text and finally release the button (or, annoyingly, wait, which makes fine adjustments harder than they should be). Notice that there is an explicit bold-and-underline option, instead of using the separate bold and underline options in combination: that's because you can't make superscripted or subscripted text bold or underlined. The top of the content area shows the ruler — in characters, not inches — and margin stops and the single paragraph indent stop, which you can drag to change them. Interestingly, the ruler seems to be new for Jane 128: no screenshot for the Apple II version demonstrates one. Janewrite is also capable of a modicum of WYSIWYG if you select the 80 column option. This and other options come from the "computer" icon, which acts as a preference panel. Preferences are saved to the application disk and are global to all three applications. Despite this presenting a choice window (ordinarily yellow), Jane seems to treat it as a global window from the kernel, so it's grey. The bottom set of options are specifically for configuring the printer. Print output is generated with control codes and text only; Jane does not generate graphic sequences, so what actually shows up on the page depends on what your printer actually supports. The default middle print size option corresponds to 80 columns (more accurately, the default or 12cpi font size), while the small font corresponds to the condensed 15cpi and/or 132 column option available on some printers, and the large font corresponds to the 60 or 64-column (e.g., 10cpi) option also only available on some printers — not the expanded double wide printing option more typical of Commodore-specific devices. You could also select between regular fanfold tractor feed or plain paper, as well as the Near Letter Quality print option some printers supported, and finally the printer itself. There was built-in support for the MPS-801 (i.e., 1525), MPS-802 (i.e., 1526), 1101, "Oki" (generic Okidata), and generic "Epson" printers, assuming they were connected somehow to the IEC serial such as through a third-party parallel printer interface. These printer drivers varied wildly in their capabilities: the 1525/MPS-801 "driver" supported almost nothing except basic text, while the generic Okidata and Epson drivers supported nearly everything that Jane could generate. The "OTHER" driver is customizeable, a neat idea, if a little clumsy. A BASIC program called BUILDPRT on the grey disk allows you to populate it with your printer's control codes. Control sequences up to three characters long were supported. You would enter these from the manual, it would save them to disk, and then you could use the custom driver inside Jane. The topmost options affect the appearance of Jane. You can choose from three font sizes, all non-proportional, corresponding to 40, 64 or 80 column text. Confusingly, the 80-column option is the last when it's the middle option for printing. (The Apple II version likely didn't support 80 column text due to its smaller hi-res horizontal width.) Pointer speed and the "beep" Jane makes when you select options are also configurable. Here's how it looks in 80 columns, using the typical "soft 80" approach on the 64 which is more or less legible, at least on a composite display. As there are no colours in the content area, there is no risk of colour clash. This is probably the most useful view in Janewrite. The 64-column view, by contrast, is probably the least useful. The 40-column view is the most legible and 2:1 the size of a typical 80-column line, so it's easy to mentally grok page layout that way, but the 64-column view is odd enough to end up being the worst of both worlds. An interesting feature of Janewrite are the accented characters, which was not frequently seen on home computer-class word processors, as explained by the on-line help. Janewrite treats them as diacritics, and they can even be applied to letters that wouldn't ordinarily use them (because who knows? some language might), such as the grave and acute accents on the n as well as the more typical tilde. In fact, you can apply them to any character, even punctuation. However, the use of the up arrow to indicate a circumflex means there's no way you can type a literal caret into your document, and while a macron would have been nice, omitting the umlaut seems a greater fault. The decorators are also rather hard to distinguish in 80 columns, so Spanish users of Juana 128 might want to go to cuarenta column mode to mirar mejor. Janewrite also has basic find and/or find-and-replace, and a small pane appears below the content area when it's active. There are also decent page layout options, including setting both a per-page title and its position, adding a page number and its position, and margins, number of copies and starting page, though the last two would seem more appropriate for a print dialogue than a page layout one. Note that Jane will always print a 10-space left margin, so an 80-column printed line can be no longer than 70 characters, and this is indeed the maximum width Janewrite will support. However, paragraphs are apparently not stored as continuous sequences of text, demonstrated here with a contrived example. (In fact, we'll prove they aren't shortly.) While Janewrite will word-wrap at the right margin, inserting text after that will wrap onto a new line, not into the next line, even if the two lines were previously entered "together." There's a speed/flexibility tradeoff here in that Janewrite doesn't have to continuously reflow paragraphs, but it also means its concept of a paragraph is entirely based on how much you select. The text can be manually reflowed, joining lines if necessary, by picking one of the paragraph justification options and selecting the text with the hand, which will then be reflowed (and, if needed, spaces inserted) to match. In fact, this is also necessary if you change the margins because Jane doesn't automatically reformat your document then either. I also promised you an example of cut and paste, so here's one using the scissors (cut). You simply pick it and, with the button down, drag it across the text you want and release the button. Note that there is no undo, though I suppose you could just immediately paste it back in. Exiting Janewrite (though not saving, because we need the accented characters to stay in the file). Now that we understand what Jane can do and how it works, let's move on to converting the files. We can extract our test files we made from our .d71 with VICE's c1541 utility and hexdump it. This got a little more difficult than it should have been: % c1541 work.d71 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> dir 0 "data#000 " 01 2a 39 "c.TESTCALC" prg 3 "l.TESTLIST" prg 4 "w.nOTE.2" prg 4 "w.TESTCONV" prg 1278 blocks free. c1541 #8> read "w.TESTCONV" ERR = 62, FILE NOT FOUND, 00, 00 cannot read `w.TESTCONV' on unit 8 invalid filename As you may have guessed, that's because the filenames, and it turns out the data in the files themselves, are stored as true ASCII, not PETSCII (indeed as they would have been on the Apple II, also), so c1541's filename conversion fails. Fortunately, the extract command will walk the entire directory and pull out all the files no matter what they're named. The documents are all regular Commodore PRoGram files with a starting address and they appear to be loaded in-place at that address into bank 1. This introduces the possibility of some delightful save-file hacks but we're not here for that today. That means we can also simply extract our previous owners' files en masse as well. I imaged their disk using my ZoomFloppy and external 1571, and since they are normal PRGs, a BAM copy of the allocated sectors is all we need to do, with one wrinkle: % d64copy -B 9 r_jane_bam.d64 [Warning] growing image file to 683 blocks 14: --*****--*****--***** 8% 15/171[Warning] read error: 0e/00: 5 14: ?******************** 12% 21/171[Warning] giving up... 14: ?******************** 15: ********************* 16: ********************* 17: ********************* 18: ******************* 19: ******************* 20: ******************* 21: ******************* 22: ****..***...***...* 100% 171/171 170 blocks copied. % c1541 r_jane_bam.d64 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> extract c1541 #8> quit Fortunately it doesn't look like the bad sector was in any of the files they cared about. Let's get an idea of the format from our test files. Janecalc files are "huge" because it looks like the entire 26x50 cell range is saved regardless of whether anything's in it or not. Looking at the directory of their data disk where they had saved a couple of sparse test spreadsheets of their own, they also were 39 blocks in length no matter how many cells were actually populated. The on-disk format is consequentially a bit wasteful: 000003a0 00 00 00 00 00 20 20 20 4a 61 6e 75 61 72 79 20 |..... January | 000003b0 20 46 65 62 72 75 61 72 79 20 20 20 20 20 4d 61 | February Ma| 000003c0 72 63 68 20 20 20 20 20 41 70 72 69 6c 20 20 20 |rch April | 000003d0 20 20 20 20 4d 61 79 20 20 20 20 20 20 4a 75 6e | May Jun| 000003e0 65 20 20 20 20 20 20 4a 75 6c 79 20 20 20 20 41 |e July A| 000003f0 75 67 75 73 74 20 53 65 70 74 65 6d 62 65 72 20 |ugust September | 00000400 20 20 4f 63 74 6f 62 65 72 20 20 4e 6f 76 65 6d | October Novem| 00000410 62 65 72 20 20 44 65 63 65 6d 62 65 72 00 00 01 |ber December...| 00000420 04 00 00 00 00 00 00 20 20 54 6f 74 61 6c 20 20 |....... Total | 00000430 20 41 76 65 72 61 67 65 20 20 20 00 00 01 04 00 | Average .....| Cardfiles are stored much more efficiently. Here's the entirety of our two cards. The fields are in the header, padded out to the fixed 12 character length, but with technically unnecessary nulls between them. A spurious "Beatles" entry looks like a buffer that was captured as part of the save, and there is also a page-aligned (counting the starting address) pad of nulls. Otherwise, the value strings look null-delimited, in the order they appear in the field list (unpopulated fields are zero-length strings). When you run out of fields, you're on the next card. % hexdump -C l.TESTLIST 00000000 00 7f 01 00 36 02 08 00 04 00 54 69 74 6c 65 20 |....6.....Title | 00000010 20 20 20 20 20 20 00 4c 65 61 64 20 41 72 74 69 | .Lead Arti| 00000020 73 74 20 00 4f 74 68 65 72 20 41 72 74 69 73 74 |st .Other Artist| 00000030 00 43 6f 6d 70 6f 73 65 72 20 20 20 20 00 43 6f |.Composer .Co| 00000040 6e 64 75 63 74 6f 72 20 20 20 00 57 68 65 72 65 |nductor .Where| 00000050 20 4b 65 70 74 20 20 00 42 6f 72 72 6f 77 65 64 | Kept .Borrowed| 00000060 20 62 79 20 00 44 61 74 65 20 4c 65 6e 74 20 20 | by .Date Lent | 00000070 20 00 00 00 ff ff 01 ff ff ff ff ff ff ff ff ff | ...............| 00000080 ff ff ff ff ff 00 01 02 03 04 05 06 07 00 01 02 |................| 00000090 03 04 05 06 07 ff ff ff ff ff ff ff ff ff ff 00 |................| 000000a0 00 54 68 65 20 42 65 61 74 6c 65 73 00 00 00 00 |.The Beatles....| 000000b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00000100 d7 09 80 60 60 ac 98 09 ae 04 cf a5 ea a9 d7 15 |...``...........| 00000110 80 ac 1d 21 d6 1c 80 60 60 ac 98 09 ae 04 cf 20 |...!...``...... | 00000120 75 0b 00 00 ac 0a 95 a5 f0 b0 a9 a6 b1 a9 a4 b1 |u...............| 00000130 a5 f1 b0 a9 a7 b1 a9 a5 b1 ac c0 08 cf 20 75 0b |............. u.| 00000140 fe ff a5 37 ae 8c ff 00 c0 d8 4b 80 cf a5 f0 b0 |...7......K.....| 00000150 a7 a6 b1 c0 d8 60 80 a5 f1 b0 a7 a7 b1 c0 d8 60 |.....`.........`| 00000160 80 cf a5 f0 b0 a7 a6 b1 00 00 09 00 01 5d f6 00 |.............]..| 00000170 00 00 00 09 00 09 00 01 66 f6 00 00 00 00 54 00 |........f.....T.| 00000180 50 00 01 b1 f6 69 64 65 20 12 00 42 00 01 6f f6 |P....ide ..B..o.| 00000190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 000001a0 00 00 00 00 00 00 00 52 65 76 6f 6c 76 65 72 00 |.......Revolver.| 000001b0 54 68 65 20 42 65 61 74 6c 65 73 00 00 4c 65 6e |The Beatles..Len| 000001c0 6e 6f 6e 2d 4d 63 43 61 72 74 6e 65 79 2d 48 61 |non-McCartney-Ha| 000001d0 72 72 69 73 6f 6e 00 47 65 6f 72 67 65 20 4d 61 |rrison.George Ma| 000001e0 72 74 69 6e 00 00 00 00 00 41 74 6f 6d 20 48 65 |rtin.....Atom He| 000001f0 61 72 74 20 4d 6f 74 68 65 72 00 50 69 6e 6b 20 |art Mother.Pink | 00000200 46 6c 6f 79 64 00 00 57 61 74 65 72 73 2d 47 69 |Floyd..Waters-Gi| 00000210 6c 6d 6f 75 72 2d 4d 61 73 6f 6e 2d 57 72 69 67 |lmour-Mason-Wrig| 00000220 68 74 2d 47 65 65 73 6f 6e 00 50 69 6e 6b 20 46 |ht-Geeson.Pink F| 00000230 6c 6f 79 64 00 00 00 00 |loyd....| 00000238 This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. Even in 40-column mode, and even given that the scroll doesn't animate and just snaps to the new position, scrolling is agonizingly slow and multiple clicks on the scroll controls invariably overshoot. Putting it in 80 column mode doesn't just give you more on the screen — it also means you don't need to endure as many pauses trying to move around. Again, I'll have more to say about font sizes when we get to Janewrite. Unique to Janecalc, the scrolling actually wraps. Worksheets remain limited to 26 columns (A-Z), as in the Apple II version, but now up to 50 rows are allowed. Still, this wouldn't have been sufficient for anything larger than a modest small business, even in 1985. Formulas are approximately VisiCalc-style using A1 absolute notation for cells, though there are no sigils for functions (not that there's very many) and ranges are delimited by colons. Most basic math operators and parentheses are available. Here, we'll get a sum of this row ... ... and then manually calculate an average by dividing the sum by the count of populated rows (we could also just use avg). The template includes this at the bottom, but this shows you how formula entry worked. As we add data to dependent cells the sheets recalculate but circular references are not handled, though in fairness this capability was still not common in small spreadsheet applications. We'll go to Janelist next. When we do so, a red window pops up to prompt us to save our work. Switching to Janelist. Creating our new list. All very consistent (the file manager and requester seem to be part of the Jane kernel). Janelist, in fairness, never purported to be a database in any incarnation and acts more like a cardfile; even the manual merely refers to it as a "list keeper." Like Janecalc it comes with templates, though Janelist supports a substantial number more. For variety I'll try to enter some of my very large CD collection, because I'm one of those people (vinyl is for art, CD is for listening). The list comes up as fillable fields. There may be up to 15 field names up to 12 characters long. If you choose to create your own, then Jane will step you through entering the field names. That's about all the customization you can do. The values for those fields can span multiple lines, which is what the viewport scrolling is for — you use the icons at the bottom to advance through individual cards. Incidentally, Atom Heart Mother is Pink Floyd's finest album and I will tolerate no disagreement. The icon that looks like cards being pulled out suggests how to make a query (the magnifying glass icon, or possibly the funnel icon to denote a filter, wasn't universal at this point). Because it gives you choices, it's yellow, remember? The two OK buttons do different things. The top one filters cards to the query requested, but the bottom one undoes any query. You can query on top of queries for a primitive sort of logical-AND. Partial word searches are supported. For example, here is the second best Beatles album — the best is, of course, Abbey Road. Since we searched for the Beatles, when we run out of Beatles CDs, nothing more turns up from my formidable library. It is also possible to sort cards, in which case they appear in that order instead. You cannot sort on multiple fields, and you can't sort descending. Finally, Janewrite, where we will spend the rest of our time — and where apparently most of Jane's users spent theirs, including our previous owners. I've got a prefab file here I constructed while playing around to explore the file format, so this time we'll load a document instead of entering one, just to show you what that looks like from the file requester. Janewrite is IMHO the most polished and competent of the three apps, and it feels like the most development time was spent on it, too. It also shows what the Jane font renderer is capable of: although non-proportional and only a single typeface, you can see bold, underline, bold and underlined, superscript, and subscript are all possible. The bottom shows left, right, centre and full justification options, done per line, plus the font options, and then search (this time with a magnifying glass) and page layout. These icons are larger and more detailed than the Apple's. As with other parts of the UI, text attributes are set verb-initial, i.e., you would choose the desired style, then the insertion tool, then highlight the range of text and finally release the button (or, annoyingly, wait, which makes fine adjustments harder than they should be). Notice that there is an explicit bold-and-underline option, instead of using the separate bold and underline options in combination: that's because you can't make superscripted or subscripted text bold or underlined. The top of the content area shows the ruler — in characters, not inches — and margin stops and the single paragraph indent stop, which you can drag to change them. Interestingly, the ruler seems to be new for Jane 128: no screenshot for the Apple II version demonstrates one. Janewrite is also capable of a modicum of WYSIWYG if you select the 80 column option. This and other options come from the "computer" icon, which acts as a preference panel. Preferences are saved to the application disk and are global to all three applications. Despite this presenting a choice window (ordinarily yellow), Jane seems to treat it as a global window from the kernel, so it's grey. The bottom set of options are specifically for configuring the printer. Print output is generated with control codes and text only; Jane does not generate graphic sequences, so what actually shows up on the page depends on what your printer actually supports. The default middle print size option corresponds to 80 columns (more accurately, the default or 12cpi font size), while the small font corresponds to the condensed 15cpi and/or 132 column option available on some printers, and the large font corresponds to the 60 or 64-column (e.g., 10cpi) option also only available on some printers — not the expanded double wide printing option more typical of Commodore-specific devices. You could also select between regular fanfold tractor feed or plain paper, as well as the Near Letter Quality print option some printers supported, and finally the printer itself. There was built-in support for the MPS-801 (i.e., 1525), MPS-802 (i.e., 1526), 1101, "Oki" (generic Okidata), and generic "Epson" printers, assuming they were connected somehow to the IEC serial such as through a third-party parallel printer interface. These printer drivers varied wildly in their capabilities: the 1525/MPS-801 "driver" supported almost nothing except basic text, while the generic Okidata and Epson drivers supported nearly everything that Jane could generate. The "OTHER" driver is customizeable, a neat idea, if a little clumsy. A BASIC program called BUILDPRT on the grey disk allows you to populate it with your printer's control codes. Control sequences up to three characters long were supported. You would enter these from the manual, it would save them to disk, and then you could use the custom driver inside Jane. The topmost options affect the appearance of Jane. You can choose from three font sizes, all non-proportional, corresponding to 40, 64 or 80 column text. Confusingly, the 80-column option is the last when it's the middle option for printing. (The Apple II version likely didn't support 80 column text due to its smaller hi-res horizontal width.) Pointer speed and the "beep" Jane makes when you select options are also configurable. Here's how it looks in 80 columns, using the typical "soft 80" approach on the 64 which is more or less legible, at least on a composite display. As there are no colours in the content area, there is no risk of colour clash. This is probably the most useful view in Janewrite. The 64-column view, by contrast, is probably the least useful. The 40-column view is the most legible and 2:1 the size of a typical 80-column line, so it's easy to mentally grok page layout that way, but the 64-column view is odd enough to end up being the worst of both worlds. An interesting feature of Janewrite are the accented characters, which was not frequently seen on home computer-class word processors, as explained by the on-line help. Janewrite treats them as diacritics, and they can even be applied to letters that wouldn't ordinarily use them (because who knows? some language might), such as the grave and acute accents on the n as well as the more typical tilde. In fact, you can apply them to any character, even punctuation. However, the use of the up arrow to indicate a circumflex means there's no way you can type a literal caret into your document, and while a macron would have been nice, omitting the umlaut seems a greater fault. The decorators are also rather hard to distinguish in 80 columns, so Spanish users of Juana 128 might want to go to cuarenta column mode to mirar mejor. Janewrite also has basic find and/or find-and-replace, and a small pane appears below the content area when it's active. There are also decent page layout options, including setting both a per-page title and its position, adding a page number and its position, and margins, number of copies and starting page, though the last two would seem more appropriate for a print dialogue than a page layout one. Note that Jane will always print a 10-space left margin, so an 80-column printed line can be no longer than 70 characters, and this is indeed the maximum width Janewrite will support. However, paragraphs are apparently not stored as continuous sequences of text, demonstrated here with a contrived example. (In fact, we'll prove they aren't shortly.) While Janewrite will word-wrap at the right margin, inserting text after that will wrap onto a new line, not into the next line, even if the two lines were previously entered "together." There's a speed/flexibility tradeoff here in that Janewrite doesn't have to continuously reflow paragraphs, but it also means its concept of a paragraph is entirely based on how much you select. The text can be manually reflowed, joining lines if necessary, by picking one of the paragraph justification options and selecting the text with the hand, which will then be reflowed (and, if needed, spaces inserted) to match. In fact, this is also necessary if you change the margins because Jane doesn't automatically reformat your document then either. I also promised you an example of cut and paste, so here's one using the scissors (cut). You simply pick it and, with the button down, drag it across the text you want and release the button. Note that there is no undo, though I suppose you could just immediately paste it back in. Exiting Janewrite (though not saving, because we need the accented characters to stay in the file). Now that we understand what Jane can do and how it works, let's move on to converting the files. We can extract our test files we made from our .d71 with VICE's c1541 utility and hexdump it. This got a little more difficult than it should have been: % c1541 work.d71 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> dir 0 "data#000 " 01 2a 39 "c.TESTCALC" prg 3 "l.TESTLIST" prg 4 "w.nOTE.2" prg 4 "w.TESTCONV" prg 1278 blocks free. c1541 #8> read "w.TESTCONV" ERR = 62, FILE NOT FOUND, 00, 00 cannot read `w.TESTCONV' on unit 8 invalid filename As you may have guessed, that's because the filenames, and it turns out the data in the files themselves, are stored as true ASCII, not PETSCII (indeed as they would have been on the Apple II, also), so c1541's filename conversion fails. Fortunately, the extract command will walk the entire directory and pull out all the files no matter what they're named. The documents are all regular Commodore PRoGram files with a starting address and they appear to be loaded in-place at that address into bank 1. This introduces the possibility of some delightful save-file hacks but we're not here for that today. That means we can also simply extract our previous owners' files en masse as well. I imaged their disk using my ZoomFloppy and external 1571, and since they are normal PRGs, a BAM copy of the allocated sectors is all we need to do, with one wrinkle: % d64copy -B 9 r_jane_bam.d64 [Warning] growing image file to 683 blocks 14: --*****--*****--***** 8% 15/171[Warning] read error: 0e/00: 5 14: ?******************** 12% 21/171[Warning] giving up... 14: ?******************** 15: ********************* 16: ********************* 17: ********************* 18: ******************* 19: ******************* 20: ******************* 21: ******************* 22: ****..***...***...* 100% 171/171 170 blocks copied. % c1541 r_jane_bam.d64 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> extract c1541 #8> quit Fortunately it doesn't look like the bad sector was in any of the files they cared about. Let's get an idea of the format from our test files. Janecalc files are "huge" because it looks like the entire 26x50 cell range is saved regardless of whether anything's in it or not. Looking at the directory of their data disk where they had saved a couple of sparse test spreadsheets of their own, they also were 39 blocks in length no matter how many cells were actually populated. The on-disk format is consequentially a bit wasteful: 000003a0 00 00 00 00 00 20 20 20 4a 61 6e 75 61 72 79 20 |..... January | 000003b0 20 46 65 62 72 75 61 72 79 20 20 20 20 20 4d 61 | February Ma| 000003c0 72 63 68 20 20 20 20 20 41 70 72 69 6c 20 20 20 |rch April | 000003d0 20 20 20 20 4d 61 79 20 20 20 20 20 20 4a 75 6e | May Jun| 000003e0 65 20 20 20 20 20 20 4a 75 6c 79 20 20 20 20 41 |e July A| 000003f0 75 67 75 73 74 20 53 65 70 74 65 6d 62 65 72 20 |ugust September | 00000400 20 20 4f 63 74 6f 62 65 72 20 20 4e 6f 76 65 6d | October Novem| 00000410 62 65 72 20 20 44 65 63 65 6d 62 65 72 00 00 01 |ber December...| 00000420 04 00 00 00 00 00 00 20 20 54 6f 74 61 6c 20 20 |....... Total | 00000430 20 41 76 65 72 61 67 65 20 20 20 00 00 01 04 00 | Average .....| Cardfiles are stored much more efficiently. Here's the entirety of our two cards. The fields are in the header, padded out to the fixed 12 character length, but with technically unnecessary nulls between them. A spurious "Beatles" entry looks like a buffer that was captured as part of the save, and there is also a page-aligned (counting the starting address) pad of nulls. Otherwise, the value strings look null-delimited, in the order they appear in the field list (unpopulated fields are zero-length strings). When you run out of fields, you're on the next card. % hexdump -C l.TESTLIST 00000000 00 7f 01 00 36 02 08 00 04 00 54 69 74 6c 65 20 |....6.....Title | 00000010 20 20 20 20 20 20 00 4c 65 61 64 20 41 72 74 69 | .Lead Arti| 00000020 73 74 20 00 4f 74 68 65 72 20 41 72 74 69 73 74 |st .Other Artist| 00000030 00 43 6f 6d 70 6f 73 65 72 20 20 20 20 00 43 6f |.Composer .Co| 00000040 6e 64 75 63 74 6f 72 20 20 20 00 57 68 65 72 65 |nductor .Where| 00000050 20 4b 65 70 74 20 20 00 42 6f 72 72 6f 77 65 64 | Kept .Borrowed| 00000060 20 62 79 20 00 44 61 74 65 20 4c 65 6e 74 20 20 | by .Date Lent | 00000070 20 00 00 00 ff ff 01 ff ff ff ff ff ff ff ff ff | ...............| 00000080 ff ff ff ff ff 00 01 02 03 04 05 06 07 00 01 02 |................| 00000090 03 04 05 06 07 ff ff ff ff ff ff ff ff ff ff 00 |................| 000000a0 00 54 68 65 20 42 65 61 74 6c 65 73 00 00 00 00 |.The Beatles....| 000000b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00000100 d7 09 80 60 60 ac 98 09 ae 04 cf a5 ea a9 d7 15 |...``...........| 00000110 80 ac 1d 21 d6 1c 80 60 60 ac 98 09 ae 04 cf 20 |...!...``...... | 00000120 75 0b 00 00 ac 0a 95 a5 f0 b0 a9 a6 b1 a9 a4 b1 |u...............| 00000130 a5 f1 b0 a9 a7 b1 a9 a5 b1 ac c0 08 cf 20 75 0b |............. u.| 00000140 fe ff a5 37 ae 8c ff 00 c0 d8 4b 80 cf a5 f0 b0 |...7......K.....| 00000150 a7 a6 b1 c0 d8 60 80 a5 f1 b0 a7 a7 b1 c0 d8 60 |.....`.........`| 00000160 80 cf a5 f0 b0 a7 a6 b1 00 00 09 00 01 5d f6 00 |.............]..| 00000170 00 00 00 09 00 09 00 01 66 f6 00 00 00 00 54 00 |........f.....T.| 00000180 50 00 01 b1 f6 69 64 65 20 12 00 42 00 01 6f f6 |P....ide ..B..o.| 00000190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 000001a0 00 00 00 00 00 00 00 52 65 76 6f 6c 76 65 72 00 |.......Revolver.| 000001b0 54 68 65 20 42 65 61 74 6c 65 73 00 00 4c 65 6e |The Beatles..Len| 000001c0 6e 6f 6e 2d 4d 63 43 61 72 74 6e 65 79 2d 48 61 |non-McCartney-Ha| 000001d0 72 72 69 73 6f 6e 00 47 65 6f 72 67 65 20 4d 61 |rrison.George Ma| 000001e0 72 74 69 6e 00 00 00 00 00 41 74 6f 6d 20 48 65 |rtin.....Atom He| 000001f0 61 72 74 20 4d 6f 74 68 65 72 00 50 69 6e 6b 20 |art Mother.Pink | 00000200 46 6c 6f 79 64 00 00 57 61 74 65 72 73 2d 47 69 |Floyd..Waters-Gi| 00000210 6c 6d 6f 75 72 2d 4d 61 73 6f 6e 2d 57 72 69 67 |lmour-Mason-Wrig| 00000220 68 74 2d 47 65 65 73 6f 6e 00 50 69 6e 6b 20 46 |ht-Geeson.Pink F| 00000230 6c 6f 79 64 00 00 00 00 |loyd....| 00000238 This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. Unique to Janecalc, the scrolling actually wraps. Worksheets remain limited to 26 columns (A-Z), as in the Apple II version, but now up to 50 rows are allowed. Still, this wouldn't have been sufficient for anything larger than a modest small business, even in 1985. Formulas are approximately VisiCalc-style using A1 absolute notation for cells, though there are no sigils for functions (not that there's very many) and ranges are delimited by colons. Most basic math operators and parentheses are available. Here, we'll get a sum of this row ... ... and then manually calculate an average by dividing the sum by the count of populated rows (we could also just use avg). The template includes this at the bottom, but this shows you how formula entry worked. As we add data to dependent cells the sheets recalculate but circular references are not handled, though in fairness this capability was still not common in small spreadsheet applications. We'll go to Janelist next. When we do so, a red window pops up to prompt us to save our work. Switching to Janelist. Creating our new list. All very consistent (the file manager and requester seem to be part of the Jane kernel). Janelist, in fairness, never purported to be a database in any incarnation and acts more like a cardfile; even the manual merely refers to it as a "list keeper." Like Janecalc it comes with templates, though Janelist supports a substantial number more. For variety I'll try to enter some of my very large CD collection, because I'm one of those people (vinyl is for art, CD is for listening). The list comes up as fillable fields. There may be up to 15 field names up to 12 characters long. If you choose to create your own, then Jane will step you through entering the field names. That's about all the customization you can do. The values for those fields can span multiple lines, which is what the viewport scrolling is for — you use the icons at the bottom to advance through individual cards. Incidentally, Atom Heart Mother is Pink Floyd's finest album and I will tolerate no disagreement. The icon that looks like cards being pulled out suggests how to make a query (the magnifying glass icon, or possibly the funnel icon to denote a filter, wasn't universal at this point). Because it gives you choices, it's yellow, remember? The two OK buttons do different things. The top one filters cards to the query requested, but the bottom one undoes any query. You can query on top of queries for a primitive sort of logical-AND. Partial word searches are supported. For example, here is the second best Beatles album — the best is, of course, Abbey Road. Since we searched for the Beatles, when we run out of Beatles CDs, nothing more turns up from my formidable library. It is also possible to sort cards, in which case they appear in that order instead. You cannot sort on multiple fields, and you can't sort descending. Finally, Janewrite, where we will spend the rest of our time — and where apparently most of Jane's users spent theirs, including our previous owners. I've got a prefab file here I constructed while playing around to explore the file format, so this time we'll load a document instead of entering one, just to show you what that looks like from the file requester. Janewrite is IMHO the most polished and competent of the three apps, and it feels like the most development time was spent on it, too. It also shows what the Jane font renderer is capable of: although non-proportional and only a single typeface, you can see bold, underline, bold and underlined, superscript, and subscript are all possible. The bottom shows left, right, centre and full justification options, done per line, plus the font options, and then search (this time with a magnifying glass) and page layout. These icons are larger and more detailed than the Apple's. As with other parts of the UI, text attributes are set verb-initial, i.e., you would choose the desired style, then the insertion tool, then highlight the range of text and finally release the button (or, annoyingly, wait, which makes fine adjustments harder than they should be). Notice that there is an explicit bold-and-underline option, instead of using the separate bold and underline options in combination: that's because you can't make superscripted or subscripted text bold or underlined. The top of the content area shows the ruler — in characters, not inches — and margin stops and the single paragraph indent stop, which you can drag to change them. Interestingly, the ruler seems to be new for Jane 128: no screenshot for the Apple II version demonstrates one. Janewrite is also capable of a modicum of WYSIWYG if you select the 80 column option. This and other options come from the "computer" icon, which acts as a preference panel. Preferences are saved to the application disk and are global to all three applications. Despite this presenting a choice window (ordinarily yellow), Jane seems to treat it as a global window from the kernel, so it's grey. The bottom set of options are specifically for configuring the printer. Print output is generated with control codes and text only; Jane does not generate graphic sequences, so what actually shows up on the page depends on what your printer actually supports. The default middle print size option corresponds to 80 columns (more accurately, the default or 12cpi font size), while the small font corresponds to the condensed 15cpi and/or 132 column option available on some printers, and the large font corresponds to the 60 or 64-column (e.g., 10cpi) option also only available on some printers — not the expanded double wide printing option more typical of Commodore-specific devices. You could also select between regular fanfold tractor feed or plain paper, as well as the Near Letter Quality print option some printers supported, and finally the printer itself. There was built-in support for the MPS-801 (i.e., 1525), MPS-802 (i.e., 1526), 1101, "Oki" (generic Okidata), and generic "Epson" printers, assuming they were connected somehow to the IEC serial such as through a third-party parallel printer interface. These printer drivers varied wildly in their capabilities: the 1525/MPS-801 "driver" supported almost nothing except basic text, while the generic Okidata and Epson drivers supported nearly everything that Jane could generate. The "OTHER" driver is customizeable, a neat idea, if a little clumsy. A BASIC program called BUILDPRT on the grey disk allows you to populate it with your printer's control codes. Control sequences up to three characters long were supported. You would enter these from the manual, it would save them to disk, and then you could use the custom driver inside Jane. The topmost options affect the appearance of Jane. You can choose from three font sizes, all non-proportional, corresponding to 40, 64 or 80 column text. Confusingly, the 80-column option is the last when it's the middle option for printing. (The Apple II version likely didn't support 80 column text due to its smaller hi-res horizontal width.) Pointer speed and the "beep" Jane makes when you select options are also configurable. Here's how it looks in 80 columns, using the typical "soft 80" approach on the 64 which is more or less legible, at least on a composite display. As there are no colours in the content area, there is no risk of colour clash. This is probably the most useful view in Janewrite. The 64-column view, by contrast, is probably the least useful. The 40-column view is the most legible and 2:1 the size of a typical 80-column line, so it's easy to mentally grok page layout that way, but the 64-column view is odd enough to end up being the worst of both worlds. An interesting feature of Janewrite are the accented characters, which was not frequently seen on home computer-class word processors, as explained by the on-line help. Janewrite treats them as diacritics, and they can even be applied to letters that wouldn't ordinarily use them (because who knows? some language might), such as the grave and acute accents on the n as well as the more typical tilde. In fact, you can apply them to any character, even punctuation. However, the use of the up arrow to indicate a circumflex means there's no way you can type a literal caret into your document, and while a macron would have been nice, omitting the umlaut seems a greater fault. The decorators are also rather hard to distinguish in 80 columns, so Spanish users of Juana 128 might want to go to cuarenta column mode to mirar mejor. Janewrite also has basic find and/or find-and-replace, and a small pane appears below the content area when it's active. There are also decent page layout options, including setting both a per-page title and its position, adding a page number and its position, and margins, number of copies and starting page, though the last two would seem more appropriate for a print dialogue than a page layout one. Note that Jane will always print a 10-space left margin, so an 80-column printed line can be no longer than 70 characters, and this is indeed the maximum width Janewrite will support. However, paragraphs are apparently not stored as continuous sequences of text, demonstrated here with a contrived example. (In fact, we'll prove they aren't shortly.) While Janewrite will word-wrap at the right margin, inserting text after that will wrap onto a new line, not into the next line, even if the two lines were previously entered "together." There's a speed/flexibility tradeoff here in that Janewrite doesn't have to continuously reflow paragraphs, but it also means its concept of a paragraph is entirely based on how much you select. The text can be manually reflowed, joining lines if necessary, by picking one of the paragraph justification options and selecting the text with the hand, which will then be reflowed (and, if needed, spaces inserted) to match. In fact, this is also necessary if you change the margins because Jane doesn't automatically reformat your document then either. I also promised you an example of cut and paste, so here's one using the scissors (cut). You simply pick it and, with the button down, drag it across the text you want and release the button. Note that there is no undo, though I suppose you could just immediately paste it back in. Exiting Janewrite (though not saving, because we need the accented characters to stay in the file). Now that we understand what Jane can do and how it works, let's move on to converting the files. We can extract our test files we made from our .d71 with VICE's c1541 utility and hexdump it. This got a little more difficult than it should have been: % c1541 work.d71 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> dir 0 "data#000 " 01 2a 39 "c.TESTCALC" prg 3 "l.TESTLIST" prg 4 "w.nOTE.2" prg 4 "w.TESTCONV" prg 1278 blocks free. c1541 #8> read "w.TESTCONV" ERR = 62, FILE NOT FOUND, 00, 00 cannot read `w.TESTCONV' on unit 8 invalid filename As you may have guessed, that's because the filenames, and it turns out the data in the files themselves, are stored as true ASCII, not PETSCII (indeed as they would have been on the Apple II, also), so c1541's filename conversion fails. Fortunately, the extract command will walk the entire directory and pull out all the files no matter what they're named. The documents are all regular Commodore PRoGram files with a starting address and they appear to be loaded in-place at that address into bank 1. This introduces the possibility of some delightful save-file hacks but we're not here for that today. That means we can also simply extract our previous owners' files en masse as well. I imaged their disk using my ZoomFloppy and external 1571, and since they are normal PRGs, a BAM copy of the allocated sectors is all we need to do, with one wrinkle: % d64copy -B 9 r_jane_bam.d64 [Warning] growing image file to 683 blocks 14: --*****--*****--***** 8% 15/171[Warning] read error: 0e/00: 5 14: ?******************** 12% 21/171[Warning] giving up... 14: ?******************** 15: ********************* 16: ********************* 17: ********************* 18: ******************* 19: ******************* 20: ******************* 21: ******************* 22: ****..***...***...* 100% 171/171 170 blocks copied. % c1541 r_jane_bam.d64 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> extract c1541 #8> quit Fortunately it doesn't look like the bad sector was in any of the files they cared about. Let's get an idea of the format from our test files. Janecalc files are "huge" because it looks like the entire 26x50 cell range is saved regardless of whether anything's in it or not. Looking at the directory of their data disk where they had saved a couple of sparse test spreadsheets of their own, they also were 39 blocks in length no matter how many cells were actually populated. The on-disk format is consequentially a bit wasteful: 000003a0 00 00 00 00 00 20 20 20 4a 61 6e 75 61 72 79 20 |..... January | 000003b0 20 46 65 62 72 75 61 72 79 20 20 20 20 20 4d 61 | February Ma| 000003c0 72 63 68 20 20 20 20 20 41 70 72 69 6c 20 20 20 |rch April | 000003d0 20 20 20 20 4d 61 79 20 20 20 20 20 20 4a 75 6e | May Jun| 000003e0 65 20 20 20 20 20 20 4a 75 6c 79 20 20 20 20 41 |e July A| 000003f0 75 67 75 73 74 20 53 65 70 74 65 6d 62 65 72 20 |ugust September | 00000400 20 20 4f 63 74 6f 62 65 72 20 20 4e 6f 76 65 6d | October Novem| 00000410 62 65 72 20 20 44 65 63 65 6d 62 65 72 00 00 01 |ber December...| 00000420 04 00 00 00 00 00 00 20 20 54 6f 74 61 6c 20 20 |....... Total | 00000430 20 41 76 65 72 61 67 65 20 20 20 00 00 01 04 00 | Average .....| Cardfiles are stored much more efficiently. Here's the entirety of our two cards. The fields are in the header, padded out to the fixed 12 character length, but with technically unnecessary nulls between them. A spurious "Beatles" entry looks like a buffer that was captured as part of the save, and there is also a page-aligned (counting the starting address) pad of nulls. Otherwise, the value strings look null-delimited, in the order they appear in the field list (unpopulated fields are zero-length strings). When you run out of fields, you're on the next card. % hexdump -C l.TESTLIST 00000000 00 7f 01 00 36 02 08 00 04 00 54 69 74 6c 65 20 |....6.....Title | 00000010 20 20 20 20 20 20 00 4c 65 61 64 20 41 72 74 69 | .Lead Arti| 00000020 73 74 20 00 4f 74 68 65 72 20 41 72 74 69 73 74 |st .Other Artist| 00000030 00 43 6f 6d 70 6f 73 65 72 20 20 20 20 00 43 6f |.Composer .Co| 00000040 6e 64 75 63 74 6f 72 20 20 20 00 57 68 65 72 65 |nductor .Where| 00000050 20 4b 65 70 74 20 20 00 42 6f 72 72 6f 77 65 64 | Kept .Borrowed| 00000060 20 62 79 20 00 44 61 74 65 20 4c 65 6e 74 20 20 | by .Date Lent | 00000070 20 00 00 00 ff ff 01 ff ff ff ff ff ff ff ff ff | ...............| 00000080 ff ff ff ff ff 00 01 02 03 04 05 06 07 00 01 02 |................| 00000090 03 04 05 06 07 ff ff ff ff ff ff ff ff ff ff 00 |................| 000000a0 00 54 68 65 20 42 65 61 74 6c 65 73 00 00 00 00 |.The Beatles....| 000000b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00000100 d7 09 80 60 60 ac 98 09 ae 04 cf a5 ea a9 d7 15 |...``...........| 00000110 80 ac 1d 21 d6 1c 80 60 60 ac 98 09 ae 04 cf 20 |...!...``...... | 00000120 75 0b 00 00 ac 0a 95 a5 f0 b0 a9 a6 b1 a9 a4 b1 |u...............| 00000130 a5 f1 b0 a9 a7 b1 a9 a5 b1 ac c0 08 cf 20 75 0b |............. u.| 00000140 fe ff a5 37 ae 8c ff 00 c0 d8 4b 80 cf a5 f0 b0 |...7......K.....| 00000150 a7 a6 b1 c0 d8 60 80 a5 f1 b0 a7 a7 b1 c0 d8 60 |.....`.........`| 00000160 80 cf a5 f0 b0 a7 a6 b1 00 00 09 00 01 5d f6 00 |.............]..| 00000170 00 00 00 09 00 09 00 01 66 f6 00 00 00 00 54 00 |........f.....T.| 00000180 50 00 01 b1 f6 69 64 65 20 12 00 42 00 01 6f f6 |P....ide ..B..o.| 00000190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 000001a0 00 00 00 00 00 00 00 52 65 76 6f 6c 76 65 72 00 |.......Revolver.| 000001b0 54 68 65 20 42 65 61 74 6c 65 73 00 00 4c 65 6e |The Beatles..Len| 000001c0 6e 6f 6e 2d 4d 63 43 61 72 74 6e 65 79 2d 48 61 |non-McCartney-Ha| 000001d0 72 72 69 73 6f 6e 00 47 65 6f 72 67 65 20 4d 61 |rrison.George Ma| 000001e0 72 74 69 6e 00 00 00 00 00 41 74 6f 6d 20 48 65 |rtin.....Atom He| 000001f0 61 72 74 20 4d 6f 74 68 65 72 00 50 69 6e 6b 20 |art Mother.Pink | 00000200 46 6c 6f 79 64 00 00 57 61 74 65 72 73 2d 47 69 |Floyd..Waters-Gi| 00000210 6c 6d 6f 75 72 2d 4d 61 73 6f 6e 2d 57 72 69 67 |lmour-Mason-Wrig| 00000220 68 74 2d 47 65 65 73 6f 6e 00 50 69 6e 6b 20 46 |ht-Geeson.Pink F| 00000230 6c 6f 79 64 00 00 00 00 |loyd....| 00000238 This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. The two OK buttons do different things. The top one filters cards to the query requested, but the bottom one undoes any query. You can query on top of queries for a primitive sort of logical-AND. Partial word searches are supported. For example, here is the second best Beatles album — the best is, of course, Abbey Road. Since we searched for the Beatles, when we run out of Beatles CDs, nothing more turns up from my formidable library. It is also possible to sort cards, in which case they appear in that order instead. You cannot sort on multiple fields, and you can't sort descending. Finally, Janewrite, where we will spend the rest of our time — and where apparently most of Jane's users spent theirs, including our previous owners. I've got a prefab file here I constructed while playing around to explore the file format, so this time we'll load a document instead of entering one, just to show you what that looks like from the file requester. Janewrite is IMHO the most polished and competent of the three apps, and it feels like the most development time was spent on it, too. It also shows what the Jane font renderer is capable of: although non-proportional and only a single typeface, you can see bold, underline, bold and underlined, superscript, and subscript are all possible. The bottom shows left, right, centre and full justification options, done per line, plus the font options, and then search (this time with a magnifying glass) and page layout. These icons are larger and more detailed than the Apple's. As with other parts of the UI, text attributes are set verb-initial, i.e., you would choose the desired style, then the insertion tool, then highlight the range of text and finally release the button (or, annoyingly, wait, which makes fine adjustments harder than they should be). Notice that there is an explicit bold-and-underline option, instead of using the separate bold and underline options in combination: that's because you can't make superscripted or subscripted text bold or underlined. The top of the content area shows the ruler — in characters, not inches — and margin stops and the single paragraph indent stop, which you can drag to change them. Interestingly, the ruler seems to be new for Jane 128: no screenshot for the Apple II version demonstrates one. Janewrite is also capable of a modicum of WYSIWYG if you select the 80 column option. This and other options come from the "computer" icon, which acts as a preference panel. Preferences are saved to the application disk and are global to all three applications. Despite this presenting a choice window (ordinarily yellow), Jane seems to treat it as a global window from the kernel, so it's grey. The bottom set of options are specifically for configuring the printer. Print output is generated with control codes and text only; Jane does not generate graphic sequences, so what actually shows up on the page depends on what your printer actually supports. The default middle print size option corresponds to 80 columns (more accurately, the default or 12cpi font size), while the small font corresponds to the condensed 15cpi and/or 132 column option available on some printers, and the large font corresponds to the 60 or 64-column (e.g., 10cpi) option also only available on some printers — not the expanded double wide printing option more typical of Commodore-specific devices. You could also select between regular fanfold tractor feed or plain paper, as well as the Near Letter Quality print option some printers supported, and finally the printer itself. There was built-in support for the MPS-801 (i.e., 1525), MPS-802 (i.e., 1526), 1101, "Oki" (generic Okidata), and generic "Epson" printers, assuming they were connected somehow to the IEC serial such as through a third-party parallel printer interface. These printer drivers varied wildly in their capabilities: the 1525/MPS-801 "driver" supported almost nothing except basic text, while the generic Okidata and Epson drivers supported nearly everything that Jane could generate. The "OTHER" driver is customizeable, a neat idea, if a little clumsy. A BASIC program called BUILDPRT on the grey disk allows you to populate it with your printer's control codes. Control sequences up to three characters long were supported. You would enter these from the manual, it would save them to disk, and then you could use the custom driver inside Jane. The topmost options affect the appearance of Jane. You can choose from three font sizes, all non-proportional, corresponding to 40, 64 or 80 column text. Confusingly, the 80-column option is the last when it's the middle option for printing. (The Apple II version likely didn't support 80 column text due to its smaller hi-res horizontal width.) Pointer speed and the "beep" Jane makes when you select options are also configurable. Here's how it looks in 80 columns, using the typical "soft 80" approach on the 64 which is more or less legible, at least on a composite display. As there are no colours in the content area, there is no risk of colour clash. This is probably the most useful view in Janewrite. The 64-column view, by contrast, is probably the least useful. The 40-column view is the most legible and 2:1 the size of a typical 80-column line, so it's easy to mentally grok page layout that way, but the 64-column view is odd enough to end up being the worst of both worlds. An interesting feature of Janewrite are the accented characters, which was not frequently seen on home computer-class word processors, as explained by the on-line help. Janewrite treats them as diacritics, and they can even be applied to letters that wouldn't ordinarily use them (because who knows? some language might), such as the grave and acute accents on the n as well as the more typical tilde. In fact, you can apply them to any character, even punctuation. However, the use of the up arrow to indicate a circumflex means there's no way you can type a literal caret into your document, and while a macron would have been nice, omitting the umlaut seems a greater fault. The decorators are also rather hard to distinguish in 80 columns, so Spanish users of Juana 128 might want to go to cuarenta column mode to mirar mejor. Janewrite also has basic find and/or find-and-replace, and a small pane appears below the content area when it's active. There are also decent page layout options, including setting both a per-page title and its position, adding a page number and its position, and margins, number of copies and starting page, though the last two would seem more appropriate for a print dialogue than a page layout one. Note that Jane will always print a 10-space left margin, so an 80-column printed line can be no longer than 70 characters, and this is indeed the maximum width Janewrite will support. However, paragraphs are apparently not stored as continuous sequences of text, demonstrated here with a contrived example. (In fact, we'll prove they aren't shortly.) While Janewrite will word-wrap at the right margin, inserting text after that will wrap onto a new line, not into the next line, even if the two lines were previously entered "together." There's a speed/flexibility tradeoff here in that Janewrite doesn't have to continuously reflow paragraphs, but it also means its concept of a paragraph is entirely based on how much you select. The text can be manually reflowed, joining lines if necessary, by picking one of the paragraph justification options and selecting the text with the hand, which will then be reflowed (and, if needed, spaces inserted) to match. In fact, this is also necessary if you change the margins because Jane doesn't automatically reformat your document then either. I also promised you an example of cut and paste, so here's one using the scissors (cut). You simply pick it and, with the button down, drag it across the text you want and release the button. Note that there is no undo, though I suppose you could just immediately paste it back in. Exiting Janewrite (though not saving, because we need the accented characters to stay in the file). Now that we understand what Jane can do and how it works, let's move on to converting the files. We can extract our test files we made from our .d71 with VICE's c1541 utility and hexdump it. This got a little more difficult than it should have been: % c1541 work.d71 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> dir 0 "data#000 " 01 2a 39 "c.TESTCALC" prg 3 "l.TESTLIST" prg 4 "w.nOTE.2" prg 4 "w.TESTCONV" prg 1278 blocks free. c1541 #8> read "w.TESTCONV" ERR = 62, FILE NOT FOUND, 00, 00 cannot read `w.TESTCONV' on unit 8 invalid filename As you may have guessed, that's because the filenames, and it turns out the data in the files themselves, are stored as true ASCII, not PETSCII (indeed as they would have been on the Apple II, also), so c1541's filename conversion fails. Fortunately, the extract command will walk the entire directory and pull out all the files no matter what they're named. The documents are all regular Commodore PRoGram files with a starting address and they appear to be loaded in-place at that address into bank 1. This introduces the possibility of some delightful save-file hacks but we're not here for that today. That means we can also simply extract our previous owners' files en masse as well. I imaged their disk using my ZoomFloppy and external 1571, and since they are normal PRGs, a BAM copy of the allocated sectors is all we need to do, with one wrinkle: % d64copy -B 9 r_jane_bam.d64 [Warning] growing image file to 683 blocks 14: --*****--*****--***** 8% 15/171[Warning] read error: 0e/00: 5 14: ?******************** 12% 21/171[Warning] giving up... 14: ?******************** 15: ********************* 16: ********************* 17: ********************* 18: ******************* 19: ******************* 20: ******************* 21: ******************* 22: ****..***...***...* 100% 171/171 170 blocks copied. % c1541 r_jane_bam.d64 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> extract c1541 #8> quit Fortunately it doesn't look like the bad sector was in any of the files they cared about. Let's get an idea of the format from our test files. Janecalc files are "huge" because it looks like the entire 26x50 cell range is saved regardless of whether anything's in it or not. Looking at the directory of their data disk where they had saved a couple of sparse test spreadsheets of their own, they also were 39 blocks in length no matter how many cells were actually populated. The on-disk format is consequentially a bit wasteful: 000003a0 00 00 00 00 00 20 20 20 4a 61 6e 75 61 72 79 20 |..... January | 000003b0 20 46 65 62 72 75 61 72 79 20 20 20 20 20 4d 61 | February Ma| 000003c0 72 63 68 20 20 20 20 20 41 70 72 69 6c 20 20 20 |rch April | 000003d0 20 20 20 20 4d 61 79 20 20 20 20 20 20 4a 75 6e | May Jun| 000003e0 65 20 20 20 20 20 20 4a 75 6c 79 20 20 20 20 41 |e July A| 000003f0 75 67 75 73 74 20 53 65 70 74 65 6d 62 65 72 20 |ugust September | 00000400 20 20 4f 63 74 6f 62 65 72 20 20 4e 6f 76 65 6d | October Novem| 00000410 62 65 72 20 20 44 65 63 65 6d 62 65 72 00 00 01 |ber December...| 00000420 04 00 00 00 00 00 00 20 20 54 6f 74 61 6c 20 20 |....... Total | 00000430 20 41 76 65 72 61 67 65 20 20 20 00 00 01 04 00 | Average .....| Cardfiles are stored much more efficiently. Here's the entirety of our two cards. The fields are in the header, padded out to the fixed 12 character length, but with technically unnecessary nulls between them. A spurious "Beatles" entry looks like a buffer that was captured as part of the save, and there is also a page-aligned (counting the starting address) pad of nulls. Otherwise, the value strings look null-delimited, in the order they appear in the field list (unpopulated fields are zero-length strings). When you run out of fields, you're on the next card. % hexdump -C l.TESTLIST 00000000 00 7f 01 00 36 02 08 00 04 00 54 69 74 6c 65 20 |....6.....Title | 00000010 20 20 20 20 20 20 00 4c 65 61 64 20 41 72 74 69 | .Lead Arti| 00000020 73 74 20 00 4f 74 68 65 72 20 41 72 74 69 73 74 |st .Other Artist| 00000030 00 43 6f 6d 70 6f 73 65 72 20 20 20 20 00 43 6f |.Composer .Co| 00000040 6e 64 75 63 74 6f 72 20 20 20 00 57 68 65 72 65 |nductor .Where| 00000050 20 4b 65 70 74 20 20 00 42 6f 72 72 6f 77 65 64 | Kept .Borrowed| 00000060 20 62 79 20 00 44 61 74 65 20 4c 65 6e 74 20 20 | by .Date Lent | 00000070 20 00 00 00 ff ff 01 ff ff ff ff ff ff ff ff ff | ...............| 00000080 ff ff ff ff ff 00 01 02 03 04 05 06 07 00 01 02 |................| 00000090 03 04 05 06 07 ff ff ff ff ff ff ff ff ff ff 00 |................| 000000a0 00 54 68 65 20 42 65 61 74 6c 65 73 00 00 00 00 |.The Beatles....| 000000b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00000100 d7 09 80 60 60 ac 98 09 ae 04 cf a5 ea a9 d7 15 |...``...........| 00000110 80 ac 1d 21 d6 1c 80 60 60 ac 98 09 ae 04 cf 20 |...!...``...... | 00000120 75 0b 00 00 ac 0a 95 a5 f0 b0 a9 a6 b1 a9 a4 b1 |u...............| 00000130 a5 f1 b0 a9 a7 b1 a9 a5 b1 ac c0 08 cf 20 75 0b |............. u.| 00000140 fe ff a5 37 ae 8c ff 00 c0 d8 4b 80 cf a5 f0 b0 |...7......K.....| 00000150 a7 a6 b1 c0 d8 60 80 a5 f1 b0 a7 a7 b1 c0 d8 60 |.....`.........`| 00000160 80 cf a5 f0 b0 a7 a6 b1 00 00 09 00 01 5d f6 00 |.............]..| 00000170 00 00 00 09 00 09 00 01 66 f6 00 00 00 00 54 00 |........f.....T.| 00000180 50 00 01 b1 f6 69 64 65 20 12 00 42 00 01 6f f6 |P....ide ..B..o.| 00000190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 000001a0 00 00 00 00 00 00 00 52 65 76 6f 6c 76 65 72 00 |.......Revolver.| 000001b0 54 68 65 20 42 65 61 74 6c 65 73 00 00 4c 65 6e |The Beatles..Len| 000001c0 6e 6f 6e 2d 4d 63 43 61 72 74 6e 65 79 2d 48 61 |non-McCartney-Ha| 000001d0 72 72 69 73 6f 6e 00 47 65 6f 72 67 65 20 4d 61 |rrison.George Ma| 000001e0 72 74 69 6e 00 00 00 00 00 41 74 6f 6d 20 48 65 |rtin.....Atom He| 000001f0 61 72 74 20 4d 6f 74 68 65 72 00 50 69 6e 6b 20 |art Mother.Pink | 00000200 46 6c 6f 79 64 00 00 57 61 74 65 72 73 2d 47 69 |Floyd..Waters-Gi| 00000210 6c 6d 6f 75 72 2d 4d 61 73 6f 6e 2d 57 72 69 67 |lmour-Mason-Wrig| 00000220 68 74 2d 47 65 65 73 6f 6e 00 50 69 6e 6b 20 46 |ht-Geeson.Pink F| 00000230 6c 6f 79 64 00 00 00 00 |loyd....| 00000238 This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. The bottom shows left, right, centre and full justification options, done per line, plus the font options, and then search (this time with a magnifying glass) and page layout. These icons are larger and more detailed than the Apple's. As with other parts of the UI, text attributes are set verb-initial, i.e., you would choose the desired style, then the insertion tool, then highlight the range of text and finally release the button (or, annoyingly, wait, which makes fine adjustments harder than they should be). Notice that there is an explicit bold-and-underline option, instead of using the separate bold and underline options in combination: that's because you can't make superscripted or subscripted text bold or underlined. The top of the content area shows the ruler — in characters, not inches — and margin stops and the single paragraph indent stop, which you can drag to change them. Interestingly, the ruler seems to be new for Jane 128: no screenshot for the Apple II version demonstrates one. Janewrite is also capable of a modicum of WYSIWYG if you select the 80 column option. This and other options come from the "computer" icon, which acts as a preference panel. Preferences are saved to the application disk and are global to all three applications. Despite this presenting a choice window (ordinarily yellow), Jane seems to treat it as a global window from the kernel, so it's grey. The bottom set of options are specifically for configuring the printer. Print output is generated with control codes and text only; Jane does not generate graphic sequences, so what actually shows up on the page depends on what your printer actually supports. The default middle print size option corresponds to 80 columns (more accurately, the default or 12cpi font size), while the small font corresponds to the condensed 15cpi and/or 132 column option available on some printers, and the large font corresponds to the 60 or 64-column (e.g., 10cpi) option also only available on some printers — not the expanded double wide printing option more typical of Commodore-specific devices. You could also select between regular fanfold tractor feed or plain paper, as well as the Near Letter Quality print option some printers supported, and finally the printer itself. There was built-in support for the MPS-801 (i.e., 1525), MPS-802 (i.e., 1526), 1101, "Oki" (generic Okidata), and generic "Epson" printers, assuming they were connected somehow to the IEC serial such as through a third-party parallel printer interface. These printer drivers varied wildly in their capabilities: the 1525/MPS-801 "driver" supported almost nothing except basic text, while the generic Okidata and Epson drivers supported nearly everything that Jane could generate. The "OTHER" driver is customizeable, a neat idea, if a little clumsy. A BASIC program called BUILDPRT on the grey disk allows you to populate it with your printer's control codes. Control sequences up to three characters long were supported. You would enter these from the manual, it would save them to disk, and then you could use the custom driver inside Jane. The topmost options affect the appearance of Jane. You can choose from three font sizes, all non-proportional, corresponding to 40, 64 or 80 column text. Confusingly, the 80-column option is the last when it's the middle option for printing. (The Apple II version likely didn't support 80 column text due to its smaller hi-res horizontal width.) Pointer speed and the "beep" Jane makes when you select options are also configurable. Here's how it looks in 80 columns, using the typical "soft 80" approach on the 64 which is more or less legible, at least on a composite display. As there are no colours in the content area, there is no risk of colour clash. This is probably the most useful view in Janewrite. The 64-column view, by contrast, is probably the least useful. The 40-column view is the most legible and 2:1 the size of a typical 80-column line, so it's easy to mentally grok page layout that way, but the 64-column view is odd enough to end up being the worst of both worlds. An interesting feature of Janewrite are the accented characters, which was not frequently seen on home computer-class word processors, as explained by the on-line help. Janewrite treats them as diacritics, and they can even be applied to letters that wouldn't ordinarily use them (because who knows? some language might), such as the grave and acute accents on the n as well as the more typical tilde. In fact, you can apply them to any character, even punctuation. However, the use of the up arrow to indicate a circumflex means there's no way you can type a literal caret into your document, and while a macron would have been nice, omitting the umlaut seems a greater fault. The decorators are also rather hard to distinguish in 80 columns, so Spanish users of Juana 128 might want to go to cuarenta column mode to mirar mejor. Janewrite also has basic find and/or find-and-replace, and a small pane appears below the content area when it's active. There are also decent page layout options, including setting both a per-page title and its position, adding a page number and its position, and margins, number of copies and starting page, though the last two would seem more appropriate for a print dialogue than a page layout one. Note that Jane will always print a 10-space left margin, so an 80-column printed line can be no longer than 70 characters, and this is indeed the maximum width Janewrite will support. However, paragraphs are apparently not stored as continuous sequences of text, demonstrated here with a contrived example. (In fact, we'll prove they aren't shortly.) While Janewrite will word-wrap at the right margin, inserting text after that will wrap onto a new line, not into the next line, even if the two lines were previously entered "together." There's a speed/flexibility tradeoff here in that Janewrite doesn't have to continuously reflow paragraphs, but it also means its concept of a paragraph is entirely based on how much you select. The text can be manually reflowed, joining lines if necessary, by picking one of the paragraph justification options and selecting the text with the hand, which will then be reflowed (and, if needed, spaces inserted) to match. In fact, this is also necessary if you change the margins because Jane doesn't automatically reformat your document then either. I also promised you an example of cut and paste, so here's one using the scissors (cut). You simply pick it and, with the button down, drag it across the text you want and release the button. Note that there is no undo, though I suppose you could just immediately paste it back in. Exiting Janewrite (though not saving, because we need the accented characters to stay in the file). Now that we understand what Jane can do and how it works, let's move on to converting the files. We can extract our test files we made from our .d71 with VICE's c1541 utility and hexdump it. This got a little more difficult than it should have been: % c1541 work.d71 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> dir 0 "data#000 " 01 2a 39 "c.TESTCALC" prg 3 "l.TESTLIST" prg 4 "w.nOTE.2" prg 4 "w.TESTCONV" prg 1278 blocks free. c1541 #8> read "w.TESTCONV" ERR = 62, FILE NOT FOUND, 00, 00 cannot read `w.TESTCONV' on unit 8 invalid filename As you may have guessed, that's because the filenames, and it turns out the data in the files themselves, are stored as true ASCII, not PETSCII (indeed as they would have been on the Apple II, also), so c1541's filename conversion fails. Fortunately, the extract command will walk the entire directory and pull out all the files no matter what they're named. The documents are all regular Commodore PRoGram files with a starting address and they appear to be loaded in-place at that address into bank 1. This introduces the possibility of some delightful save-file hacks but we're not here for that today. That means we can also simply extract our previous owners' files en masse as well. I imaged their disk using my ZoomFloppy and external 1571, and since they are normal PRGs, a BAM copy of the allocated sectors is all we need to do, with one wrinkle: % d64copy -B 9 r_jane_bam.d64 [Warning] growing image file to 683 blocks 14: --*****--*****--***** 8% 15/171[Warning] read error: 0e/00: 5 14: ?******************** 12% 21/171[Warning] giving up... 14: ?******************** 15: ********************* 16: ********************* 17: ********************* 18: ******************* 19: ******************* 20: ******************* 21: ******************* 22: ****..***...***...* 100% 171/171 170 blocks copied. % c1541 r_jane_bam.d64 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> extract c1541 #8> quit Fortunately it doesn't look like the bad sector was in any of the files they cared about. Let's get an idea of the format from our test files. Janecalc files are "huge" because it looks like the entire 26x50 cell range is saved regardless of whether anything's in it or not. Looking at the directory of their data disk where they had saved a couple of sparse test spreadsheets of their own, they also were 39 blocks in length no matter how many cells were actually populated. The on-disk format is consequentially a bit wasteful: 000003a0 00 00 00 00 00 20 20 20 4a 61 6e 75 61 72 79 20 |..... January | 000003b0 20 46 65 62 72 75 61 72 79 20 20 20 20 20 4d 61 | February Ma| 000003c0 72 63 68 20 20 20 20 20 41 70 72 69 6c 20 20 20 |rch April | 000003d0 20 20 20 20 4d 61 79 20 20 20 20 20 20 4a 75 6e | May Jun| 000003e0 65 20 20 20 20 20 20 4a 75 6c 79 20 20 20 20 41 |e July A| 000003f0 75 67 75 73 74 20 53 65 70 74 65 6d 62 65 72 20 |ugust September | 00000400 20 20 4f 63 74 6f 62 65 72 20 20 4e 6f 76 65 6d | October Novem| 00000410 62 65 72 20 20 44 65 63 65 6d 62 65 72 00 00 01 |ber December...| 00000420 04 00 00 00 00 00 00 20 20 54 6f 74 61 6c 20 20 |....... Total | 00000430 20 41 76 65 72 61 67 65 20 20 20 00 00 01 04 00 | Average .....| Cardfiles are stored much more efficiently. Here's the entirety of our two cards. The fields are in the header, padded out to the fixed 12 character length, but with technically unnecessary nulls between them. A spurious "Beatles" entry looks like a buffer that was captured as part of the save, and there is also a page-aligned (counting the starting address) pad of nulls. Otherwise, the value strings look null-delimited, in the order they appear in the field list (unpopulated fields are zero-length strings). When you run out of fields, you're on the next card. % hexdump -C l.TESTLIST 00000000 00 7f 01 00 36 02 08 00 04 00 54 69 74 6c 65 20 |....6.....Title | 00000010 20 20 20 20 20 20 00 4c 65 61 64 20 41 72 74 69 | .Lead Arti| 00000020 73 74 20 00 4f 74 68 65 72 20 41 72 74 69 73 74 |st .Other Artist| 00000030 00 43 6f 6d 70 6f 73 65 72 20 20 20 20 00 43 6f |.Composer .Co| 00000040 6e 64 75 63 74 6f 72 20 20 20 00 57 68 65 72 65 |nductor .Where| 00000050 20 4b 65 70 74 20 20 00 42 6f 72 72 6f 77 65 64 | Kept .Borrowed| 00000060 20 62 79 20 00 44 61 74 65 20 4c 65 6e 74 20 20 | by .Date Lent | 00000070 20 00 00 00 ff ff 01 ff ff ff ff ff ff ff ff ff | ...............| 00000080 ff ff ff ff ff 00 01 02 03 04 05 06 07 00 01 02 |................| 00000090 03 04 05 06 07 ff ff ff ff ff ff ff ff ff ff 00 |................| 000000a0 00 54 68 65 20 42 65 61 74 6c 65 73 00 00 00 00 |.The Beatles....| 000000b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00000100 d7 09 80 60 60 ac 98 09 ae 04 cf a5 ea a9 d7 15 |...``...........| 00000110 80 ac 1d 21 d6 1c 80 60 60 ac 98 09 ae 04 cf 20 |...!...``...... | 00000120 75 0b 00 00 ac 0a 95 a5 f0 b0 a9 a6 b1 a9 a4 b1 |u...............| 00000130 a5 f1 b0 a9 a7 b1 a9 a5 b1 ac c0 08 cf 20 75 0b |............. u.| 00000140 fe ff a5 37 ae 8c ff 00 c0 d8 4b 80 cf a5 f0 b0 |...7......K.....| 00000150 a7 a6 b1 c0 d8 60 80 a5 f1 b0 a7 a7 b1 c0 d8 60 |.....`.........`| 00000160 80 cf a5 f0 b0 a7 a6 b1 00 00 09 00 01 5d f6 00 |.............]..| 00000170 00 00 00 09 00 09 00 01 66 f6 00 00 00 00 54 00 |........f.....T.| 00000180 50 00 01 b1 f6 69 64 65 20 12 00 42 00 01 6f f6 |P....ide ..B..o.| 00000190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 000001a0 00 00 00 00 00 00 00 52 65 76 6f 6c 76 65 72 00 |.......Revolver.| 000001b0 54 68 65 20 42 65 61 74 6c 65 73 00 00 4c 65 6e |The Beatles..Len| 000001c0 6e 6f 6e 2d 4d 63 43 61 72 74 6e 65 79 2d 48 61 |non-McCartney-Ha| 000001d0 72 72 69 73 6f 6e 00 47 65 6f 72 67 65 20 4d 61 |rrison.George Ma| 000001e0 72 74 69 6e 00 00 00 00 00 41 74 6f 6d 20 48 65 |rtin.....Atom He| 000001f0 61 72 74 20 4d 6f 74 68 65 72 00 50 69 6e 6b 20 |art Mother.Pink | 00000200 46 6c 6f 79 64 00 00 57 61 74 65 72 73 2d 47 69 |Floyd..Waters-Gi| 00000210 6c 6d 6f 75 72 2d 4d 61 73 6f 6e 2d 57 72 69 67 |lmour-Mason-Wrig| 00000220 68 74 2d 47 65 65 73 6f 6e 00 50 69 6e 6b 20 46 |ht-Geeson.Pink F| 00000230 6c 6f 79 64 00 00 00 00 |loyd....| 00000238 This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. The top of the content area shows the ruler — in characters, not inches — and margin stops and the single paragraph indent stop, which you can drag to change them. Interestingly, the ruler seems to be new for Jane 128: no screenshot for the Apple II version demonstrates one. Janewrite is also capable of a modicum of WYSIWYG if you select the 80 column option. This and other options come from the "computer" icon, which acts as a preference panel. Preferences are saved to the application disk and are global to all three applications. Despite this presenting a choice window (ordinarily yellow), Jane seems to treat it as a global window from the kernel, so it's grey. The bottom set of options are specifically for configuring the printer. Print output is generated with control codes and text only; Jane does not generate graphic sequences, so what actually shows up on the page depends on what your printer actually supports. The default middle print size option corresponds to 80 columns (more accurately, the default or 12cpi font size), while the small font corresponds to the condensed 15cpi and/or 132 column option available on some printers, and the large font corresponds to the 60 or 64-column (e.g., 10cpi) option also only available on some printers — not the expanded double wide printing option more typical of Commodore-specific devices. You could also select between regular fanfold tractor feed or plain paper, as well as the Near Letter Quality print option some printers supported, and finally the printer itself. There was built-in support for the MPS-801 (i.e., 1525), MPS-802 (i.e., 1526), 1101, "Oki" (generic Okidata), and generic "Epson" printers, assuming they were connected somehow to the IEC serial such as through a third-party parallel printer interface. These printer drivers varied wildly in their capabilities: the 1525/MPS-801 "driver" supported almost nothing except basic text, while the generic Okidata and Epson drivers supported nearly everything that Jane could generate. The "OTHER" driver is customizeable, a neat idea, if a little clumsy. A BASIC program called BUILDPRT on the grey disk allows you to populate it with your printer's control codes. Control sequences up to three characters long were supported. You would enter these from the manual, it would save them to disk, and then you could use the custom driver inside Jane. The topmost options affect the appearance of Jane. You can choose from three font sizes, all non-proportional, corresponding to 40, 64 or 80 column text. Confusingly, the 80-column option is the last when it's the middle option for printing. (The Apple II version likely didn't support 80 column text due to its smaller hi-res horizontal width.) Pointer speed and the "beep" Jane makes when you select options are also configurable. Here's how it looks in 80 columns, using the typical "soft 80" approach on the 64 which is more or less legible, at least on a composite display. As there are no colours in the content area, there is no risk of colour clash. This is probably the most useful view in Janewrite. The 64-column view, by contrast, is probably the least useful. The 40-column view is the most legible and 2:1 the size of a typical 80-column line, so it's easy to mentally grok page layout that way, but the 64-column view is odd enough to end up being the worst of both worlds. An interesting feature of Janewrite are the accented characters, which was not frequently seen on home computer-class word processors, as explained by the on-line help. Janewrite treats them as diacritics, and they can even be applied to letters that wouldn't ordinarily use them (because who knows? some language might), such as the grave and acute accents on the n as well as the more typical tilde. In fact, you can apply them to any character, even punctuation. However, the use of the up arrow to indicate a circumflex means there's no way you can type a literal caret into your document, and while a macron would have been nice, omitting the umlaut seems a greater fault. The decorators are also rather hard to distinguish in 80 columns, so Spanish users of Juana 128 might want to go to cuarenta column mode to mirar mejor. Janewrite also has basic find and/or find-and-replace, and a small pane appears below the content area when it's active. There are also decent page layout options, including setting both a per-page title and its position, adding a page number and its position, and margins, number of copies and starting page, though the last two would seem more appropriate for a print dialogue than a page layout one. Note that Jane will always print a 10-space left margin, so an 80-column printed line can be no longer than 70 characters, and this is indeed the maximum width Janewrite will support. However, paragraphs are apparently not stored as continuous sequences of text, demonstrated here with a contrived example. (In fact, we'll prove they aren't shortly.) While Janewrite will word-wrap at the right margin, inserting text after that will wrap onto a new line, not into the next line, even if the two lines were previously entered "together." There's a speed/flexibility tradeoff here in that Janewrite doesn't have to continuously reflow paragraphs, but it also means its concept of a paragraph is entirely based on how much you select. The text can be manually reflowed, joining lines if necessary, by picking one of the paragraph justification options and selecting the text with the hand, which will then be reflowed (and, if needed, spaces inserted) to match. In fact, this is also necessary if you change the margins because Jane doesn't automatically reformat your document then either. I also promised you an example of cut and paste, so here's one using the scissors (cut). You simply pick it and, with the button down, drag it across the text you want and release the button. Note that there is no undo, though I suppose you could just immediately paste it back in. Exiting Janewrite (though not saving, because we need the accented characters to stay in the file). Now that we understand what Jane can do and how it works, let's move on to converting the files. We can extract our test files we made from our .d71 with VICE's c1541 utility and hexdump it. This got a little more difficult than it should have been: % c1541 work.d71 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> dir 0 "data#000 " 01 2a 39 "c.TESTCALC" prg 3 "l.TESTLIST" prg 4 "w.nOTE.2" prg 4 "w.TESTCONV" prg 1278 blocks free. c1541 #8> read "w.TESTCONV" ERR = 62, FILE NOT FOUND, 00, 00 cannot read `w.TESTCONV' on unit 8 invalid filename As you may have guessed, that's because the filenames, and it turns out the data in the files themselves, are stored as true ASCII, not PETSCII (indeed as they would have been on the Apple II, also), so c1541's filename conversion fails. Fortunately, the extract command will walk the entire directory and pull out all the files no matter what they're named. The documents are all regular Commodore PRoGram files with a starting address and they appear to be loaded in-place at that address into bank 1. This introduces the possibility of some delightful save-file hacks but we're not here for that today. That means we can also simply extract our previous owners' files en masse as well. I imaged their disk using my ZoomFloppy and external 1571, and since they are normal PRGs, a BAM copy of the allocated sectors is all we need to do, with one wrinkle: % d64copy -B 9 r_jane_bam.d64 [Warning] growing image file to 683 blocks 14: --*****--*****--***** 8% 15/171[Warning] read error: 0e/00: 5 14: ?******************** 12% 21/171[Warning] giving up... 14: ?******************** 15: ********************* 16: ********************* 17: ********************* 18: ******************* 19: ******************* 20: ******************* 21: ******************* 22: ****..***...***...* 100% 171/171 170 blocks copied. % c1541 r_jane_bam.d64 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> extract c1541 #8> quit Fortunately it doesn't look like the bad sector was in any of the files they cared about. Let's get an idea of the format from our test files. Janecalc files are "huge" because it looks like the entire 26x50 cell range is saved regardless of whether anything's in it or not. Looking at the directory of their data disk where they had saved a couple of sparse test spreadsheets of their own, they also were 39 blocks in length no matter how many cells were actually populated. The on-disk format is consequentially a bit wasteful: 000003a0 00 00 00 00 00 20 20 20 4a 61 6e 75 61 72 79 20 |..... January | 000003b0 20 46 65 62 72 75 61 72 79 20 20 20 20 20 4d 61 | February Ma| 000003c0 72 63 68 20 20 20 20 20 41 70 72 69 6c 20 20 20 |rch April | 000003d0 20 20 20 20 4d 61 79 20 20 20 20 20 20 4a 75 6e | May Jun| 000003e0 65 20 20 20 20 20 20 4a 75 6c 79 20 20 20 20 41 |e July A| 000003f0 75 67 75 73 74 20 53 65 70 74 65 6d 62 65 72 20 |ugust September | 00000400 20 20 4f 63 74 6f 62 65 72 20 20 4e 6f 76 65 6d | October Novem| 00000410 62 65 72 20 20 44 65 63 65 6d 62 65 72 00 00 01 |ber December...| 00000420 04 00 00 00 00 00 00 20 20 54 6f 74 61 6c 20 20 |....... Total | 00000430 20 41 76 65 72 61 67 65 20 20 20 00 00 01 04 00 | Average .....| Cardfiles are stored much more efficiently. Here's the entirety of our two cards. The fields are in the header, padded out to the fixed 12 character length, but with technically unnecessary nulls between them. A spurious "Beatles" entry looks like a buffer that was captured as part of the save, and there is also a page-aligned (counting the starting address) pad of nulls. Otherwise, the value strings look null-delimited, in the order they appear in the field list (unpopulated fields are zero-length strings). When you run out of fields, you're on the next card. % hexdump -C l.TESTLIST 00000000 00 7f 01 00 36 02 08 00 04 00 54 69 74 6c 65 20 |....6.....Title | 00000010 20 20 20 20 20 20 00 4c 65 61 64 20 41 72 74 69 | .Lead Arti| 00000020 73 74 20 00 4f 74 68 65 72 20 41 72 74 69 73 74 |st .Other Artist| 00000030 00 43 6f 6d 70 6f 73 65 72 20 20 20 20 00 43 6f |.Composer .Co| 00000040 6e 64 75 63 74 6f 72 20 20 20 00 57 68 65 72 65 |nductor .Where| 00000050 20 4b 65 70 74 20 20 00 42 6f 72 72 6f 77 65 64 | Kept .Borrowed| 00000060 20 62 79 20 00 44 61 74 65 20 4c 65 6e 74 20 20 | by .Date Lent | 00000070 20 00 00 00 ff ff 01 ff ff ff ff ff ff ff ff ff | ...............| 00000080 ff ff ff ff ff 00 01 02 03 04 05 06 07 00 01 02 |................| 00000090 03 04 05 06 07 ff ff ff ff ff ff ff ff ff ff 00 |................| 000000a0 00 54 68 65 20 42 65 61 74 6c 65 73 00 00 00 00 |.The Beatles....| 000000b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00000100 d7 09 80 60 60 ac 98 09 ae 04 cf a5 ea a9 d7 15 |...``...........| 00000110 80 ac 1d 21 d6 1c 80 60 60 ac 98 09 ae 04 cf 20 |...!...``...... | 00000120 75 0b 00 00 ac 0a 95 a5 f0 b0 a9 a6 b1 a9 a4 b1 |u...............| 00000130 a5 f1 b0 a9 a7 b1 a9 a5 b1 ac c0 08 cf 20 75 0b |............. u.| 00000140 fe ff a5 37 ae 8c ff 00 c0 d8 4b 80 cf a5 f0 b0 |...7......K.....| 00000150 a7 a6 b1 c0 d8 60 80 a5 f1 b0 a7 a7 b1 c0 d8 60 |.....`.........`| 00000160 80 cf a5 f0 b0 a7 a6 b1 00 00 09 00 01 5d f6 00 |.............]..| 00000170 00 00 00 09 00 09 00 01 66 f6 00 00 00 00 54 00 |........f.....T.| 00000180 50 00 01 b1 f6 69 64 65 20 12 00 42 00 01 6f f6 |P....ide ..B..o.| 00000190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 000001a0 00 00 00 00 00 00 00 52 65 76 6f 6c 76 65 72 00 |.......Revolver.| 000001b0 54 68 65 20 42 65 61 74 6c 65 73 00 00 4c 65 6e |The Beatles..Len| 000001c0 6e 6f 6e 2d 4d 63 43 61 72 74 6e 65 79 2d 48 61 |non-McCartney-Ha| 000001d0 72 72 69 73 6f 6e 00 47 65 6f 72 67 65 20 4d 61 |rrison.George Ma| 000001e0 72 74 69 6e 00 00 00 00 00 41 74 6f 6d 20 48 65 |rtin.....Atom He| 000001f0 61 72 74 20 4d 6f 74 68 65 72 00 50 69 6e 6b 20 |art Mother.Pink | 00000200 46 6c 6f 79 64 00 00 57 61 74 65 72 73 2d 47 69 |Floyd..Waters-Gi| 00000210 6c 6d 6f 75 72 2d 4d 61 73 6f 6e 2d 57 72 69 67 |lmour-Mason-Wrig| 00000220 68 74 2d 47 65 65 73 6f 6e 00 50 69 6e 6b 20 46 |ht-Geeson.Pink F| 00000230 6c 6f 79 64 00 00 00 00 |loyd....| 00000238 This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. The bottom set of options are specifically for configuring the printer. Print output is generated with control codes and text only; Jane does not generate graphic sequences, so what actually shows up on the page depends on what your printer actually supports. The default middle print size option corresponds to 80 columns (more accurately, the default or 12cpi font size), while the small font corresponds to the condensed 15cpi and/or 132 column option available on some printers, and the large font corresponds to the 60 or 64-column (e.g., 10cpi) option also only available on some printers — not the expanded double wide printing option more typical of Commodore-specific devices. You could also select between regular fanfold tractor feed or plain paper, as well as the Near Letter Quality print option some printers supported, and finally the printer itself. There was built-in support for the MPS-801 (i.e., 1525), MPS-802 (i.e., 1526), 1101, "Oki" (generic Okidata), and generic "Epson" printers, assuming they were connected somehow to the IEC serial such as through a third-party parallel printer interface. These printer drivers varied wildly in their capabilities: the 1525/MPS-801 "driver" supported almost nothing except basic text, while the generic Okidata and Epson drivers supported nearly everything that Jane could generate. The "OTHER" driver is customizeable, a neat idea, if a little clumsy. A BASIC program called BUILDPRT on the grey disk allows you to populate it with your printer's control codes. Control sequences up to three characters long were supported. You would enter these from the manual, it would save them to disk, and then you could use the custom driver inside Jane. The topmost options affect the appearance of Jane. You can choose from three font sizes, all non-proportional, corresponding to 40, 64 or 80 column text. Confusingly, the 80-column option is the last when it's the middle option for printing. (The Apple II version likely didn't support 80 column text due to its smaller hi-res horizontal width.) Pointer speed and the "beep" Jane makes when you select options are also configurable. Here's how it looks in 80 columns, using the typical "soft 80" approach on the 64 which is more or less legible, at least on a composite display. As there are no colours in the content area, there is no risk of colour clash. This is probably the most useful view in Janewrite. The 64-column view, by contrast, is probably the least useful. The 40-column view is the most legible and 2:1 the size of a typical 80-column line, so it's easy to mentally grok page layout that way, but the 64-column view is odd enough to end up being the worst of both worlds. An interesting feature of Janewrite are the accented characters, which was not frequently seen on home computer-class word processors, as explained by the on-line help. Janewrite treats them as diacritics, and they can even be applied to letters that wouldn't ordinarily use them (because who knows? some language might), such as the grave and acute accents on the n as well as the more typical tilde. In fact, you can apply them to any character, even punctuation. However, the use of the up arrow to indicate a circumflex means there's no way you can type a literal caret into your document, and while a macron would have been nice, omitting the umlaut seems a greater fault. The decorators are also rather hard to distinguish in 80 columns, so Spanish users of Juana 128 might want to go to cuarenta column mode to mirar mejor. Janewrite also has basic find and/or find-and-replace, and a small pane appears below the content area when it's active. There are also decent page layout options, including setting both a per-page title and its position, adding a page number and its position, and margins, number of copies and starting page, though the last two would seem more appropriate for a print dialogue than a page layout one. Note that Jane will always print a 10-space left margin, so an 80-column printed line can be no longer than 70 characters, and this is indeed the maximum width Janewrite will support. However, paragraphs are apparently not stored as continuous sequences of text, demonstrated here with a contrived example. (In fact, we'll prove they aren't shortly.) While Janewrite will word-wrap at the right margin, inserting text after that will wrap onto a new line, not into the next line, even if the two lines were previously entered "together." There's a speed/flexibility tradeoff here in that Janewrite doesn't have to continuously reflow paragraphs, but it also means its concept of a paragraph is entirely based on how much you select. The text can be manually reflowed, joining lines if necessary, by picking one of the paragraph justification options and selecting the text with the hand, which will then be reflowed (and, if needed, spaces inserted) to match. In fact, this is also necessary if you change the margins because Jane doesn't automatically reformat your document then either. I also promised you an example of cut and paste, so here's one using the scissors (cut). You simply pick it and, with the button down, drag it across the text you want and release the button. Note that there is no undo, though I suppose you could just immediately paste it back in. Exiting Janewrite (though not saving, because we need the accented characters to stay in the file). Now that we understand what Jane can do and how it works, let's move on to converting the files. We can extract our test files we made from our .d71 with VICE's c1541 utility and hexdump it. This got a little more difficult than it should have been: % c1541 work.d71 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> dir 0 "data#000 " 01 2a 39 "c.TESTCALC" prg 3 "l.TESTLIST" prg 4 "w.nOTE.2" prg 4 "w.TESTCONV" prg 1278 blocks free. c1541 #8> read "w.TESTCONV" ERR = 62, FILE NOT FOUND, 00, 00 cannot read `w.TESTCONV' on unit 8 invalid filename As you may have guessed, that's because the filenames, and it turns out the data in the files themselves, are stored as true ASCII, not PETSCII (indeed as they would have been on the Apple II, also), so c1541's filename conversion fails. Fortunately, the extract command will walk the entire directory and pull out all the files no matter what they're named. The documents are all regular Commodore PRoGram files with a starting address and they appear to be loaded in-place at that address into bank 1. This introduces the possibility of some delightful save-file hacks but we're not here for that today. That means we can also simply extract our previous owners' files en masse as well. I imaged their disk using my ZoomFloppy and external 1571, and since they are normal PRGs, a BAM copy of the allocated sectors is all we need to do, with one wrinkle: % d64copy -B 9 r_jane_bam.d64 [Warning] growing image file to 683 blocks 14: --*****--*****--***** 8% 15/171[Warning] read error: 0e/00: 5 14: ?******************** 12% 21/171[Warning] giving up... 14: ?******************** 15: ********************* 16: ********************* 17: ********************* 18: ******************* 19: ******************* 20: ******************* 21: ******************* 22: ****..***...***...* 100% 171/171 170 blocks copied. % c1541 r_jane_bam.d64 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> extract c1541 #8> quit Fortunately it doesn't look like the bad sector was in any of the files they cared about. Let's get an idea of the format from our test files. Janecalc files are "huge" because it looks like the entire 26x50 cell range is saved regardless of whether anything's in it or not. Looking at the directory of their data disk where they had saved a couple of sparse test spreadsheets of their own, they also were 39 blocks in length no matter how many cells were actually populated. The on-disk format is consequentially a bit wasteful: 000003a0 00 00 00 00 00 20 20 20 4a 61 6e 75 61 72 79 20 |..... January | 000003b0 20 46 65 62 72 75 61 72 79 20 20 20 20 20 4d 61 | February Ma| 000003c0 72 63 68 20 20 20 20 20 41 70 72 69 6c 20 20 20 |rch April | 000003d0 20 20 20 20 4d 61 79 20 20 20 20 20 20 4a 75 6e | May Jun| 000003e0 65 20 20 20 20 20 20 4a 75 6c 79 20 20 20 20 41 |e July A| 000003f0 75 67 75 73 74 20 53 65 70 74 65 6d 62 65 72 20 |ugust September | 00000400 20 20 4f 63 74 6f 62 65 72 20 20 4e 6f 76 65 6d | October Novem| 00000410 62 65 72 20 20 44 65 63 65 6d 62 65 72 00 00 01 |ber December...| 00000420 04 00 00 00 00 00 00 20 20 54 6f 74 61 6c 20 20 |....... Total | 00000430 20 41 76 65 72 61 67 65 20 20 20 00 00 01 04 00 | Average .....| Cardfiles are stored much more efficiently. Here's the entirety of our two cards. The fields are in the header, padded out to the fixed 12 character length, but with technically unnecessary nulls between them. A spurious "Beatles" entry looks like a buffer that was captured as part of the save, and there is also a page-aligned (counting the starting address) pad of nulls. Otherwise, the value strings look null-delimited, in the order they appear in the field list (unpopulated fields are zero-length strings). When you run out of fields, you're on the next card. % hexdump -C l.TESTLIST 00000000 00 7f 01 00 36 02 08 00 04 00 54 69 74 6c 65 20 |....6.....Title | 00000010 20 20 20 20 20 20 00 4c 65 61 64 20 41 72 74 69 | .Lead Arti| 00000020 73 74 20 00 4f 74 68 65 72 20 41 72 74 69 73 74 |st .Other Artist| 00000030 00 43 6f 6d 70 6f 73 65 72 20 20 20 20 00 43 6f |.Composer .Co| 00000040 6e 64 75 63 74 6f 72 20 20 20 00 57 68 65 72 65 |nductor .Where| 00000050 20 4b 65 70 74 20 20 00 42 6f 72 72 6f 77 65 64 | Kept .Borrowed| 00000060 20 62 79 20 00 44 61 74 65 20 4c 65 6e 74 20 20 | by .Date Lent | 00000070 20 00 00 00 ff ff 01 ff ff ff ff ff ff ff ff ff | ...............| 00000080 ff ff ff ff ff 00 01 02 03 04 05 06 07 00 01 02 |................| 00000090 03 04 05 06 07 ff ff ff ff ff ff ff ff ff ff 00 |................| 000000a0 00 54 68 65 20 42 65 61 74 6c 65 73 00 00 00 00 |.The Beatles....| 000000b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00000100 d7 09 80 60 60 ac 98 09 ae 04 cf a5 ea a9 d7 15 |...``...........| 00000110 80 ac 1d 21 d6 1c 80 60 60 ac 98 09 ae 04 cf 20 |...!...``...... | 00000120 75 0b 00 00 ac 0a 95 a5 f0 b0 a9 a6 b1 a9 a4 b1 |u...............| 00000130 a5 f1 b0 a9 a7 b1 a9 a5 b1 ac c0 08 cf 20 75 0b |............. u.| 00000140 fe ff a5 37 ae 8c ff 00 c0 d8 4b 80 cf a5 f0 b0 |...7......K.....| 00000150 a7 a6 b1 c0 d8 60 80 a5 f1 b0 a7 a7 b1 c0 d8 60 |.....`.........`| 00000160 80 cf a5 f0 b0 a7 a6 b1 00 00 09 00 01 5d f6 00 |.............]..| 00000170 00 00 00 09 00 09 00 01 66 f6 00 00 00 00 54 00 |........f.....T.| 00000180 50 00 01 b1 f6 69 64 65 20 12 00 42 00 01 6f f6 |P....ide ..B..o.| 00000190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 000001a0 00 00 00 00 00 00 00 52 65 76 6f 6c 76 65 72 00 |.......Revolver.| 000001b0 54 68 65 20 42 65 61 74 6c 65 73 00 00 4c 65 6e |The Beatles..Len| 000001c0 6e 6f 6e 2d 4d 63 43 61 72 74 6e 65 79 2d 48 61 |non-McCartney-Ha| 000001d0 72 72 69 73 6f 6e 00 47 65 6f 72 67 65 20 4d 61 |rrison.George Ma| 000001e0 72 74 69 6e 00 00 00 00 00 41 74 6f 6d 20 48 65 |rtin.....Atom He| 000001f0 61 72 74 20 4d 6f 74 68 65 72 00 50 69 6e 6b 20 |art Mother.Pink | 00000200 46 6c 6f 79 64 00 00 57 61 74 65 72 73 2d 47 69 |Floyd..Waters-Gi| 00000210 6c 6d 6f 75 72 2d 4d 61 73 6f 6e 2d 57 72 69 67 |lmour-Mason-Wrig| 00000220 68 74 2d 47 65 65 73 6f 6e 00 50 69 6e 6b 20 46 |ht-Geeson.Pink F| 00000230 6c 6f 79 64 00 00 00 00 |loyd....| 00000238 This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. You could also select between regular fanfold tractor feed or plain paper, as well as the Near Letter Quality print option some printers supported, and finally the printer itself. There was built-in support for the MPS-801 (i.e., 1525), MPS-802 (i.e., 1526), 1101, "Oki" (generic Okidata), and generic "Epson" printers, assuming they were connected somehow to the IEC serial such as through a third-party parallel printer interface. These printer drivers varied wildly in their capabilities: the 1525/MPS-801 "driver" supported almost nothing except basic text, while the generic Okidata and Epson drivers supported nearly everything that Jane could generate. The "OTHER" driver is customizeable, a neat idea, if a little clumsy. A BASIC program called BUILDPRT on the grey disk allows you to populate it with your printer's control codes. Control sequences up to three characters long were supported. You would enter these from the manual, it would save them to disk, and then you could use the custom driver inside Jane. The topmost options affect the appearance of Jane. You can choose from three font sizes, all non-proportional, corresponding to 40, 64 or 80 column text. Confusingly, the 80-column option is the last when it's the middle option for printing. (The Apple II version likely didn't support 80 column text due to its smaller hi-res horizontal width.) Pointer speed and the "beep" Jane makes when you select options are also configurable. Here's how it looks in 80 columns, using the typical "soft 80" approach on the 64 which is more or less legible, at least on a composite display. As there are no colours in the content area, there is no risk of colour clash. This is probably the most useful view in Janewrite. The 64-column view, by contrast, is probably the least useful. The 40-column view is the most legible and 2:1 the size of a typical 80-column line, so it's easy to mentally grok page layout that way, but the 64-column view is odd enough to end up being the worst of both worlds. An interesting feature of Janewrite are the accented characters, which was not frequently seen on home computer-class word processors, as explained by the on-line help. Janewrite treats them as diacritics, and they can even be applied to letters that wouldn't ordinarily use them (because who knows? some language might), such as the grave and acute accents on the n as well as the more typical tilde. In fact, you can apply them to any character, even punctuation. However, the use of the up arrow to indicate a circumflex means there's no way you can type a literal caret into your document, and while a macron would have been nice, omitting the umlaut seems a greater fault. The decorators are also rather hard to distinguish in 80 columns, so Spanish users of Juana 128 might want to go to cuarenta column mode to mirar mejor. Janewrite also has basic find and/or find-and-replace, and a small pane appears below the content area when it's active. There are also decent page layout options, including setting both a per-page title and its position, adding a page number and its position, and margins, number of copies and starting page, though the last two would seem more appropriate for a print dialogue than a page layout one. Note that Jane will always print a 10-space left margin, so an 80-column printed line can be no longer than 70 characters, and this is indeed the maximum width Janewrite will support. However, paragraphs are apparently not stored as continuous sequences of text, demonstrated here with a contrived example. (In fact, we'll prove they aren't shortly.) While Janewrite will word-wrap at the right margin, inserting text after that will wrap onto a new line, not into the next line, even if the two lines were previously entered "together." There's a speed/flexibility tradeoff here in that Janewrite doesn't have to continuously reflow paragraphs, but it also means its concept of a paragraph is entirely based on how much you select. The text can be manually reflowed, joining lines if necessary, by picking one of the paragraph justification options and selecting the text with the hand, which will then be reflowed (and, if needed, spaces inserted) to match. In fact, this is also necessary if you change the margins because Jane doesn't automatically reformat your document then either. I also promised you an example of cut and paste, so here's one using the scissors (cut). You simply pick it and, with the button down, drag it across the text you want and release the button. Note that there is no undo, though I suppose you could just immediately paste it back in. Exiting Janewrite (though not saving, because we need the accented characters to stay in the file). Now that we understand what Jane can do and how it works, let's move on to converting the files. We can extract our test files we made from our .d71 with VICE's c1541 utility and hexdump it. This got a little more difficult than it should have been: % c1541 work.d71 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> dir 0 "data#000 " 01 2a 39 "c.TESTCALC" prg 3 "l.TESTLIST" prg 4 "w.nOTE.2" prg 4 "w.TESTCONV" prg 1278 blocks free. c1541 #8> read "w.TESTCONV" ERR = 62, FILE NOT FOUND, 00, 00 cannot read `w.TESTCONV' on unit 8 invalid filename As you may have guessed, that's because the filenames, and it turns out the data in the files themselves, are stored as true ASCII, not PETSCII (indeed as they would have been on the Apple II, also), so c1541's filename conversion fails. Fortunately, the extract command will walk the entire directory and pull out all the files no matter what they're named. The documents are all regular Commodore PRoGram files with a starting address and they appear to be loaded in-place at that address into bank 1. This introduces the possibility of some delightful save-file hacks but we're not here for that today. That means we can also simply extract our previous owners' files en masse as well. I imaged their disk using my ZoomFloppy and external 1571, and since they are normal PRGs, a BAM copy of the allocated sectors is all we need to do, with one wrinkle: % d64copy -B 9 r_jane_bam.d64 [Warning] growing image file to 683 blocks 14: --*****--*****--***** 8% 15/171[Warning] read error: 0e/00: 5 14: ?******************** 12% 21/171[Warning] giving up... 14: ?******************** 15: ********************* 16: ********************* 17: ********************* 18: ******************* 19: ******************* 20: ******************* 21: ******************* 22: ****..***...***...* 100% 171/171 170 blocks copied. % c1541 r_jane_bam.d64 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> extract c1541 #8> quit Fortunately it doesn't look like the bad sector was in any of the files they cared about. Let's get an idea of the format from our test files. Janecalc files are "huge" because it looks like the entire 26x50 cell range is saved regardless of whether anything's in it or not. Looking at the directory of their data disk where they had saved a couple of sparse test spreadsheets of their own, they also were 39 blocks in length no matter how many cells were actually populated. The on-disk format is consequentially a bit wasteful: 000003a0 00 00 00 00 00 20 20 20 4a 61 6e 75 61 72 79 20 |..... January | 000003b0 20 46 65 62 72 75 61 72 79 20 20 20 20 20 4d 61 | February Ma| 000003c0 72 63 68 20 20 20 20 20 41 70 72 69 6c 20 20 20 |rch April | 000003d0 20 20 20 20 4d 61 79 20 20 20 20 20 20 4a 75 6e | May Jun| 000003e0 65 20 20 20 20 20 20 4a 75 6c 79 20 20 20 20 41 |e July A| 000003f0 75 67 75 73 74 20 53 65 70 74 65 6d 62 65 72 20 |ugust September | 00000400 20 20 4f 63 74 6f 62 65 72 20 20 4e 6f 76 65 6d | October Novem| 00000410 62 65 72 20 20 44 65 63 65 6d 62 65 72 00 00 01 |ber December...| 00000420 04 00 00 00 00 00 00 20 20 54 6f 74 61 6c 20 20 |....... Total | 00000430 20 41 76 65 72 61 67 65 20 20 20 00 00 01 04 00 | Average .....| Cardfiles are stored much more efficiently. Here's the entirety of our two cards. The fields are in the header, padded out to the fixed 12 character length, but with technically unnecessary nulls between them. A spurious "Beatles" entry looks like a buffer that was captured as part of the save, and there is also a page-aligned (counting the starting address) pad of nulls. Otherwise, the value strings look null-delimited, in the order they appear in the field list (unpopulated fields are zero-length strings). When you run out of fields, you're on the next card. % hexdump -C l.TESTLIST 00000000 00 7f 01 00 36 02 08 00 04 00 54 69 74 6c 65 20 |....6.....Title | 00000010 20 20 20 20 20 20 00 4c 65 61 64 20 41 72 74 69 | .Lead Arti| 00000020 73 74 20 00 4f 74 68 65 72 20 41 72 74 69 73 74 |st .Other Artist| 00000030 00 43 6f 6d 70 6f 73 65 72 20 20 20 20 00 43 6f |.Composer .Co| 00000040 6e 64 75 63 74 6f 72 20 20 20 00 57 68 65 72 65 |nductor .Where| 00000050 20 4b 65 70 74 20 20 00 42 6f 72 72 6f 77 65 64 | Kept .Borrowed| 00000060 20 62 79 20 00 44 61 74 65 20 4c 65 6e 74 20 20 | by .Date Lent | 00000070 20 00 00 00 ff ff 01 ff ff ff ff ff ff ff ff ff | ...............| 00000080 ff ff ff ff ff 00 01 02 03 04 05 06 07 00 01 02 |................| 00000090 03 04 05 06 07 ff ff ff ff ff ff ff ff ff ff 00 |................| 000000a0 00 54 68 65 20 42 65 61 74 6c 65 73 00 00 00 00 |.The Beatles....| 000000b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00000100 d7 09 80 60 60 ac 98 09 ae 04 cf a5 ea a9 d7 15 |...``...........| 00000110 80 ac 1d 21 d6 1c 80 60 60 ac 98 09 ae 04 cf 20 |...!...``...... | 00000120 75 0b 00 00 ac 0a 95 a5 f0 b0 a9 a6 b1 a9 a4 b1 |u...............| 00000130 a5 f1 b0 a9 a7 b1 a9 a5 b1 ac c0 08 cf 20 75 0b |............. u.| 00000140 fe ff a5 37 ae 8c ff 00 c0 d8 4b 80 cf a5 f0 b0 |...7......K.....| 00000150 a7 a6 b1 c0 d8 60 80 a5 f1 b0 a7 a7 b1 c0 d8 60 |.....`.........`| 00000160 80 cf a5 f0 b0 a7 a6 b1 00 00 09 00 01 5d f6 00 |.............]..| 00000170 00 00 00 09 00 09 00 01 66 f6 00 00 00 00 54 00 |........f.....T.| 00000180 50 00 01 b1 f6 69 64 65 20 12 00 42 00 01 6f f6 |P....ide ..B..o.| 00000190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 000001a0 00 00 00 00 00 00 00 52 65 76 6f 6c 76 65 72 00 |.......Revolver.| 000001b0 54 68 65 20 42 65 61 74 6c 65 73 00 00 4c 65 6e |The Beatles..Len| 000001c0 6e 6f 6e 2d 4d 63 43 61 72 74 6e 65 79 2d 48 61 |non-McCartney-Ha| 000001d0 72 72 69 73 6f 6e 00 47 65 6f 72 67 65 20 4d 61 |rrison.George Ma| 000001e0 72 74 69 6e 00 00 00 00 00 41 74 6f 6d 20 48 65 |rtin.....Atom He| 000001f0 61 72 74 20 4d 6f 74 68 65 72 00 50 69 6e 6b 20 |art Mother.Pink | 00000200 46 6c 6f 79 64 00 00 57 61 74 65 72 73 2d 47 69 |Floyd..Waters-Gi| 00000210 6c 6d 6f 75 72 2d 4d 61 73 6f 6e 2d 57 72 69 67 |lmour-Mason-Wrig| 00000220 68 74 2d 47 65 65 73 6f 6e 00 50 69 6e 6b 20 46 |ht-Geeson.Pink F| 00000230 6c 6f 79 64 00 00 00 00 |loyd....| 00000238 This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. The "OTHER" driver is customizeable, a neat idea, if a little clumsy. A BASIC program called BUILDPRT on the grey disk allows you to populate it with your printer's control codes. Control sequences up to three characters long were supported. You would enter these from the manual, it would save them to disk, and then you could use the custom driver inside Jane. The topmost options affect the appearance of Jane. You can choose from three font sizes, all non-proportional, corresponding to 40, 64 or 80 column text. Confusingly, the 80-column option is the last when it's the middle option for printing. (The Apple II version likely didn't support 80 column text due to its smaller hi-res horizontal width.) Pointer speed and the "beep" Jane makes when you select options are also configurable. Here's how it looks in 80 columns, using the typical "soft 80" approach on the 64 which is more or less legible, at least on a composite display. As there are no colours in the content area, there is no risk of colour clash. This is probably the most useful view in Janewrite. The 64-column view, by contrast, is probably the least useful. The 40-column view is the most legible and 2:1 the size of a typical 80-column line, so it's easy to mentally grok page layout that way, but the 64-column view is odd enough to end up being the worst of both worlds. An interesting feature of Janewrite are the accented characters, which was not frequently seen on home computer-class word processors, as explained by the on-line help. Janewrite treats them as diacritics, and they can even be applied to letters that wouldn't ordinarily use them (because who knows? some language might), such as the grave and acute accents on the n as well as the more typical tilde. In fact, you can apply them to any character, even punctuation. However, the use of the up arrow to indicate a circumflex means there's no way you can type a literal caret into your document, and while a macron would have been nice, omitting the umlaut seems a greater fault. The decorators are also rather hard to distinguish in 80 columns, so Spanish users of Juana 128 might want to go to cuarenta column mode to mirar mejor. Janewrite also has basic find and/or find-and-replace, and a small pane appears below the content area when it's active. There are also decent page layout options, including setting both a per-page title and its position, adding a page number and its position, and margins, number of copies and starting page, though the last two would seem more appropriate for a print dialogue than a page layout one. Note that Jane will always print a 10-space left margin, so an 80-column printed line can be no longer than 70 characters, and this is indeed the maximum width Janewrite will support. However, paragraphs are apparently not stored as continuous sequences of text, demonstrated here with a contrived example. (In fact, we'll prove they aren't shortly.) While Janewrite will word-wrap at the right margin, inserting text after that will wrap onto a new line, not into the next line, even if the two lines were previously entered "together." There's a speed/flexibility tradeoff here in that Janewrite doesn't have to continuously reflow paragraphs, but it also means its concept of a paragraph is entirely based on how much you select. The text can be manually reflowed, joining lines if necessary, by picking one of the paragraph justification options and selecting the text with the hand, which will then be reflowed (and, if needed, spaces inserted) to match. In fact, this is also necessary if you change the margins because Jane doesn't automatically reformat your document then either. I also promised you an example of cut and paste, so here's one using the scissors (cut). You simply pick it and, with the button down, drag it across the text you want and release the button. Note that there is no undo, though I suppose you could just immediately paste it back in. Exiting Janewrite (though not saving, because we need the accented characters to stay in the file). Now that we understand what Jane can do and how it works, let's move on to converting the files. We can extract our test files we made from our .d71 with VICE's c1541 utility and hexdump it. This got a little more difficult than it should have been: % c1541 work.d71 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> dir 0 "data#000 " 01 2a 39 "c.TESTCALC" prg 3 "l.TESTLIST" prg 4 "w.nOTE.2" prg 4 "w.TESTCONV" prg 1278 blocks free. c1541 #8> read "w.TESTCONV" ERR = 62, FILE NOT FOUND, 00, 00 cannot read `w.TESTCONV' on unit 8 invalid filename As you may have guessed, that's because the filenames, and it turns out the data in the files themselves, are stored as true ASCII, not PETSCII (indeed as they would have been on the Apple II, also), so c1541's filename conversion fails. Fortunately, the extract command will walk the entire directory and pull out all the files no matter what they're named. The documents are all regular Commodore PRoGram files with a starting address and they appear to be loaded in-place at that address into bank 1. This introduces the possibility of some delightful save-file hacks but we're not here for that today. That means we can also simply extract our previous owners' files en masse as well. I imaged their disk using my ZoomFloppy and external 1571, and since they are normal PRGs, a BAM copy of the allocated sectors is all we need to do, with one wrinkle: % d64copy -B 9 r_jane_bam.d64 [Warning] growing image file to 683 blocks 14: --*****--*****--***** 8% 15/171[Warning] read error: 0e/00: 5 14: ?******************** 12% 21/171[Warning] giving up... 14: ?******************** 15: ********************* 16: ********************* 17: ********************* 18: ******************* 19: ******************* 20: ******************* 21: ******************* 22: ****..***...***...* 100% 171/171 170 blocks copied. % c1541 r_jane_bam.d64 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> extract c1541 #8> quit Fortunately it doesn't look like the bad sector was in any of the files they cared about. Let's get an idea of the format from our test files. Janecalc files are "huge" because it looks like the entire 26x50 cell range is saved regardless of whether anything's in it or not. Looking at the directory of their data disk where they had saved a couple of sparse test spreadsheets of their own, they also were 39 blocks in length no matter how many cells were actually populated. The on-disk format is consequentially a bit wasteful: 000003a0 00 00 00 00 00 20 20 20 4a 61 6e 75 61 72 79 20 |..... January | 000003b0 20 46 65 62 72 75 61 72 79 20 20 20 20 20 4d 61 | February Ma| 000003c0 72 63 68 20 20 20 20 20 41 70 72 69 6c 20 20 20 |rch April | 000003d0 20 20 20 20 4d 61 79 20 20 20 20 20 20 4a 75 6e | May Jun| 000003e0 65 20 20 20 20 20 20 4a 75 6c 79 20 20 20 20 41 |e July A| 000003f0 75 67 75 73 74 20 53 65 70 74 65 6d 62 65 72 20 |ugust September | 00000400 20 20 4f 63 74 6f 62 65 72 20 20 4e 6f 76 65 6d | October Novem| 00000410 62 65 72 20 20 44 65 63 65 6d 62 65 72 00 00 01 |ber December...| 00000420 04 00 00 00 00 00 00 20 20 54 6f 74 61 6c 20 20 |....... Total | 00000430 20 41 76 65 72 61 67 65 20 20 20 00 00 01 04 00 | Average .....| Cardfiles are stored much more efficiently. Here's the entirety of our two cards. The fields are in the header, padded out to the fixed 12 character length, but with technically unnecessary nulls between them. A spurious "Beatles" entry looks like a buffer that was captured as part of the save, and there is also a page-aligned (counting the starting address) pad of nulls. Otherwise, the value strings look null-delimited, in the order they appear in the field list (unpopulated fields are zero-length strings). When you run out of fields, you're on the next card. % hexdump -C l.TESTLIST 00000000 00 7f 01 00 36 02 08 00 04 00 54 69 74 6c 65 20 |....6.....Title | 00000010 20 20 20 20 20 20 00 4c 65 61 64 20 41 72 74 69 | .Lead Arti| 00000020 73 74 20 00 4f 74 68 65 72 20 41 72 74 69 73 74 |st .Other Artist| 00000030 00 43 6f 6d 70 6f 73 65 72 20 20 20 20 00 43 6f |.Composer .Co| 00000040 6e 64 75 63 74 6f 72 20 20 20 00 57 68 65 72 65 |nductor .Where| 00000050 20 4b 65 70 74 20 20 00 42 6f 72 72 6f 77 65 64 | Kept .Borrowed| 00000060 20 62 79 20 00 44 61 74 65 20 4c 65 6e 74 20 20 | by .Date Lent | 00000070 20 00 00 00 ff ff 01 ff ff ff ff ff ff ff ff ff | ...............| 00000080 ff ff ff ff ff 00 01 02 03 04 05 06 07 00 01 02 |................| 00000090 03 04 05 06 07 ff ff ff ff ff ff ff ff ff ff 00 |................| 000000a0 00 54 68 65 20 42 65 61 74 6c 65 73 00 00 00 00 |.The Beatles....| 000000b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00000100 d7 09 80 60 60 ac 98 09 ae 04 cf a5 ea a9 d7 15 |...``...........| 00000110 80 ac 1d 21 d6 1c 80 60 60 ac 98 09 ae 04 cf 20 |...!...``...... | 00000120 75 0b 00 00 ac 0a 95 a5 f0 b0 a9 a6 b1 a9 a4 b1 |u...............| 00000130 a5 f1 b0 a9 a7 b1 a9 a5 b1 ac c0 08 cf 20 75 0b |............. u.| 00000140 fe ff a5 37 ae 8c ff 00 c0 d8 4b 80 cf a5 f0 b0 |...7......K.....| 00000150 a7 a6 b1 c0 d8 60 80 a5 f1 b0 a7 a7 b1 c0 d8 60 |.....`.........`| 00000160 80 cf a5 f0 b0 a7 a6 b1 00 00 09 00 01 5d f6 00 |.............]..| 00000170 00 00 00 09 00 09 00 01 66 f6 00 00 00 00 54 00 |........f.....T.| 00000180 50 00 01 b1 f6 69 64 65 20 12 00 42 00 01 6f f6 |P....ide ..B..o.| 00000190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 000001a0 00 00 00 00 00 00 00 52 65 76 6f 6c 76 65 72 00 |.......Revolver.| 000001b0 54 68 65 20 42 65 61 74 6c 65 73 00 00 4c 65 6e |The Beatles..Len| 000001c0 6e 6f 6e 2d 4d 63 43 61 72 74 6e 65 79 2d 48 61 |non-McCartney-Ha| 000001d0 72 72 69 73 6f 6e 00 47 65 6f 72 67 65 20 4d 61 |rrison.George Ma| 000001e0 72 74 69 6e 00 00 00 00 00 41 74 6f 6d 20 48 65 |rtin.....Atom He| 000001f0 61 72 74 20 4d 6f 74 68 65 72 00 50 69 6e 6b 20 |art Mother.Pink | 00000200 46 6c 6f 79 64 00 00 57 61 74 65 72 73 2d 47 69 |Floyd..Waters-Gi| 00000210 6c 6d 6f 75 72 2d 4d 61 73 6f 6e 2d 57 72 69 67 |lmour-Mason-Wrig| 00000220 68 74 2d 47 65 65 73 6f 6e 00 50 69 6e 6b 20 46 |ht-Geeson.Pink F| 00000230 6c 6f 79 64 00 00 00 00 |loyd....| 00000238 This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. The topmost options affect the appearance of Jane. You can choose from three font sizes, all non-proportional, corresponding to 40, 64 or 80 column text. Confusingly, the 80-column option is the last when it's the middle option for printing. (The Apple II version likely didn't support 80 column text due to its smaller hi-res horizontal width.) Pointer speed and the "beep" Jane makes when you select options are also configurable. Here's how it looks in 80 columns, using the typical "soft 80" approach on the 64 which is more or less legible, at least on a composite display. As there are no colours in the content area, there is no risk of colour clash. This is probably the most useful view in Janewrite. The 64-column view, by contrast, is probably the least useful. The 40-column view is the most legible and 2:1 the size of a typical 80-column line, so it's easy to mentally grok page layout that way, but the 64-column view is odd enough to end up being the worst of both worlds. An interesting feature of Janewrite are the accented characters, which was not frequently seen on home computer-class word processors, as explained by the on-line help. Janewrite treats them as diacritics, and they can even be applied to letters that wouldn't ordinarily use them (because who knows? some language might), such as the grave and acute accents on the n as well as the more typical tilde. In fact, you can apply them to any character, even punctuation. However, the use of the up arrow to indicate a circumflex means there's no way you can type a literal caret into your document, and while a macron would have been nice, omitting the umlaut seems a greater fault. The decorators are also rather hard to distinguish in 80 columns, so Spanish users of Juana 128 might want to go to cuarenta column mode to mirar mejor. Janewrite also has basic find and/or find-and-replace, and a small pane appears below the content area when it's active. There are also decent page layout options, including setting both a per-page title and its position, adding a page number and its position, and margins, number of copies and starting page, though the last two would seem more appropriate for a print dialogue than a page layout one. Note that Jane will always print a 10-space left margin, so an 80-column printed line can be no longer than 70 characters, and this is indeed the maximum width Janewrite will support. However, paragraphs are apparently not stored as continuous sequences of text, demonstrated here with a contrived example. (In fact, we'll prove they aren't shortly.) While Janewrite will word-wrap at the right margin, inserting text after that will wrap onto a new line, not into the next line, even if the two lines were previously entered "together." There's a speed/flexibility tradeoff here in that Janewrite doesn't have to continuously reflow paragraphs, but it also means its concept of a paragraph is entirely based on how much you select. The text can be manually reflowed, joining lines if necessary, by picking one of the paragraph justification options and selecting the text with the hand, which will then be reflowed (and, if needed, spaces inserted) to match. In fact, this is also necessary if you change the margins because Jane doesn't automatically reformat your document then either. I also promised you an example of cut and paste, so here's one using the scissors (cut). You simply pick it and, with the button down, drag it across the text you want and release the button. Note that there is no undo, though I suppose you could just immediately paste it back in. Exiting Janewrite (though not saving, because we need the accented characters to stay in the file). Now that we understand what Jane can do and how it works, let's move on to converting the files. We can extract our test files we made from our .d71 with VICE's c1541 utility and hexdump it. This got a little more difficult than it should have been: % c1541 work.d71 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> dir 0 "data#000 " 01 2a 39 "c.TESTCALC" prg 3 "l.TESTLIST" prg 4 "w.nOTE.2" prg 4 "w.TESTCONV" prg 1278 blocks free. c1541 #8> read "w.TESTCONV" ERR = 62, FILE NOT FOUND, 00, 00 cannot read `w.TESTCONV' on unit 8 invalid filename As you may have guessed, that's because the filenames, and it turns out the data in the files themselves, are stored as true ASCII, not PETSCII (indeed as they would have been on the Apple II, also), so c1541's filename conversion fails. Fortunately, the extract command will walk the entire directory and pull out all the files no matter what they're named. The documents are all regular Commodore PRoGram files with a starting address and they appear to be loaded in-place at that address into bank 1. This introduces the possibility of some delightful save-file hacks but we're not here for that today. That means we can also simply extract our previous owners' files en masse as well. I imaged their disk using my ZoomFloppy and external 1571, and since they are normal PRGs, a BAM copy of the allocated sectors is all we need to do, with one wrinkle: % d64copy -B 9 r_jane_bam.d64 [Warning] growing image file to 683 blocks 14: --*****--*****--***** 8% 15/171[Warning] read error: 0e/00: 5 14: ?******************** 12% 21/171[Warning] giving up... 14: ?******************** 15: ********************* 16: ********************* 17: ********************* 18: ******************* 19: ******************* 20: ******************* 21: ******************* 22: ****..***...***...* 100% 171/171 170 blocks copied. % c1541 r_jane_bam.d64 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> extract c1541 #8> quit Fortunately it doesn't look like the bad sector was in any of the files they cared about. Let's get an idea of the format from our test files. Janecalc files are "huge" because it looks like the entire 26x50 cell range is saved regardless of whether anything's in it or not. Looking at the directory of their data disk where they had saved a couple of sparse test spreadsheets of their own, they also were 39 blocks in length no matter how many cells were actually populated. The on-disk format is consequentially a bit wasteful: 000003a0 00 00 00 00 00 20 20 20 4a 61 6e 75 61 72 79 20 |..... January | 000003b0 20 46 65 62 72 75 61 72 79 20 20 20 20 20 4d 61 | February Ma| 000003c0 72 63 68 20 20 20 20 20 41 70 72 69 6c 20 20 20 |rch April | 000003d0 20 20 20 20 4d 61 79 20 20 20 20 20 20 4a 75 6e | May Jun| 000003e0 65 20 20 20 20 20 20 4a 75 6c 79 20 20 20 20 41 |e July A| 000003f0 75 67 75 73 74 20 53 65 70 74 65 6d 62 65 72 20 |ugust September | 00000400 20 20 4f 63 74 6f 62 65 72 20 20 4e 6f 76 65 6d | October Novem| 00000410 62 65 72 20 20 44 65 63 65 6d 62 65 72 00 00 01 |ber December...| 00000420 04 00 00 00 00 00 00 20 20 54 6f 74 61 6c 20 20 |....... Total | 00000430 20 41 76 65 72 61 67 65 20 20 20 00 00 01 04 00 | Average .....| Cardfiles are stored much more efficiently. Here's the entirety of our two cards. The fields are in the header, padded out to the fixed 12 character length, but with technically unnecessary nulls between them. A spurious "Beatles" entry looks like a buffer that was captured as part of the save, and there is also a page-aligned (counting the starting address) pad of nulls. Otherwise, the value strings look null-delimited, in the order they appear in the field list (unpopulated fields are zero-length strings). When you run out of fields, you're on the next card. % hexdump -C l.TESTLIST 00000000 00 7f 01 00 36 02 08 00 04 00 54 69 74 6c 65 20 |....6.....Title | 00000010 20 20 20 20 20 20 00 4c 65 61 64 20 41 72 74 69 | .Lead Arti| 00000020 73 74 20 00 4f 74 68 65 72 20 41 72 74 69 73 74 |st .Other Artist| 00000030 00 43 6f 6d 70 6f 73 65 72 20 20 20 20 00 43 6f |.Composer .Co| 00000040 6e 64 75 63 74 6f 72 20 20 20 00 57 68 65 72 65 |nductor .Where| 00000050 20 4b 65 70 74 20 20 00 42 6f 72 72 6f 77 65 64 | Kept .Borrowed| 00000060 20 62 79 20 00 44 61 74 65 20 4c 65 6e 74 20 20 | by .Date Lent | 00000070 20 00 00 00 ff ff 01 ff ff ff ff ff ff ff ff ff | ...............| 00000080 ff ff ff ff ff 00 01 02 03 04 05 06 07 00 01 02 |................| 00000090 03 04 05 06 07 ff ff ff ff ff ff ff ff ff ff 00 |................| 000000a0 00 54 68 65 20 42 65 61 74 6c 65 73 00 00 00 00 |.The Beatles....| 000000b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00000100 d7 09 80 60 60 ac 98 09 ae 04 cf a5 ea a9 d7 15 |...``...........| 00000110 80 ac 1d 21 d6 1c 80 60 60 ac 98 09 ae 04 cf 20 |...!...``...... | 00000120 75 0b 00 00 ac 0a 95 a5 f0 b0 a9 a6 b1 a9 a4 b1 |u...............| 00000130 a5 f1 b0 a9 a7 b1 a9 a5 b1 ac c0 08 cf 20 75 0b |............. u.| 00000140 fe ff a5 37 ae 8c ff 00 c0 d8 4b 80 cf a5 f0 b0 |...7......K.....| 00000150 a7 a6 b1 c0 d8 60 80 a5 f1 b0 a7 a7 b1 c0 d8 60 |.....`.........`| 00000160 80 cf a5 f0 b0 a7 a6 b1 00 00 09 00 01 5d f6 00 |.............]..| 00000170 00 00 00 09 00 09 00 01 66 f6 00 00 00 00 54 00 |........f.....T.| 00000180 50 00 01 b1 f6 69 64 65 20 12 00 42 00 01 6f f6 |P....ide ..B..o.| 00000190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 000001a0 00 00 00 00 00 00 00 52 65 76 6f 6c 76 65 72 00 |.......Revolver.| 000001b0 54 68 65 20 42 65 61 74 6c 65 73 00 00 4c 65 6e |The Beatles..Len| 000001c0 6e 6f 6e 2d 4d 63 43 61 72 74 6e 65 79 2d 48 61 |non-McCartney-Ha| 000001d0 72 72 69 73 6f 6e 00 47 65 6f 72 67 65 20 4d 61 |rrison.George Ma| 000001e0 72 74 69 6e 00 00 00 00 00 41 74 6f 6d 20 48 65 |rtin.....Atom He| 000001f0 61 72 74 20 4d 6f 74 68 65 72 00 50 69 6e 6b 20 |art Mother.Pink | 00000200 46 6c 6f 79 64 00 00 57 61 74 65 72 73 2d 47 69 |Floyd..Waters-Gi| 00000210 6c 6d 6f 75 72 2d 4d 61 73 6f 6e 2d 57 72 69 67 |lmour-Mason-Wrig| 00000220 68 74 2d 47 65 65 73 6f 6e 00 50 69 6e 6b 20 46 |ht-Geeson.Pink F| 00000230 6c 6f 79 64 00 00 00 00 |loyd....| 00000238 This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. Now that we understand what Jane can do and how it works, let's move on to converting the files. We can extract our test files we made from our .d71 with VICE's c1541 utility and hexdump it. This got a little more difficult than it should have been: % c1541 work.d71 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> dir 0 "data#000 " 01 2a 39 "c.TESTCALC" prg 3 "l.TESTLIST" prg 4 "w.nOTE.2" prg 4 "w.TESTCONV" prg 1278 blocks free. c1541 #8> read "w.TESTCONV" ERR = 62, FILE NOT FOUND, 00, 00 cannot read `w.TESTCONV' on unit 8 invalid filename As you may have guessed, that's because the filenames, and it turns out the data in the files themselves, are stored as true ASCII, not PETSCII (indeed as they would have been on the Apple II, also), so c1541's filename conversion fails. Fortunately, the extract command will walk the entire directory and pull out all the files no matter what they're named. The documents are all regular Commodore PRoGram files with a starting address and they appear to be loaded in-place at that address into bank 1. This introduces the possibility of some delightful save-file hacks but we're not here for that today. That means we can also simply extract our previous owners' files en masse as well. I imaged their disk using my ZoomFloppy and external 1571, and since they are normal PRGs, a BAM copy of the allocated sectors is all we need to do, with one wrinkle: % d64copy -B 9 r_jane_bam.d64 [Warning] growing image file to 683 blocks 14: --*****--*****--***** 8% 15/171[Warning] read error: 0e/00: 5 14: ?******************** 12% 21/171[Warning] giving up... 14: ?******************** 15: ********************* 16: ********************* 17: ********************* 18: ******************* 19: ******************* 20: ******************* 21: ******************* 22: ****..***...***...* 100% 171/171 170 blocks copied. % c1541 r_jane_bam.d64 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> extract c1541 #8> quit Fortunately it doesn't look like the bad sector was in any of the files they cared about. Let's get an idea of the format from our test files. Janecalc files are "huge" because it looks like the entire 26x50 cell range is saved regardless of whether anything's in it or not. Looking at the directory of their data disk where they had saved a couple of sparse test spreadsheets of their own, they also were 39 blocks in length no matter how many cells were actually populated. The on-disk format is consequentially a bit wasteful: 000003a0 00 00 00 00 00 20 20 20 4a 61 6e 75 61 72 79 20 |..... January | 000003b0 20 46 65 62 72 75 61 72 79 20 20 20 20 20 4d 61 | February Ma| 000003c0 72 63 68 20 20 20 20 20 41 70 72 69 6c 20 20 20 |rch April | 000003d0 20 20 20 20 4d 61 79 20 20 20 20 20 20 4a 75 6e | May Jun| 000003e0 65 20 20 20 20 20 20 4a 75 6c 79 20 20 20 20 41 |e July A| 000003f0 75 67 75 73 74 20 53 65 70 74 65 6d 62 65 72 20 |ugust September | 00000400 20 20 4f 63 74 6f 62 65 72 20 20 4e 6f 76 65 6d | October Novem| 00000410 62 65 72 20 20 44 65 63 65 6d 62 65 72 00 00 01 |ber December...| 00000420 04 00 00 00 00 00 00 20 20 54 6f 74 61 6c 20 20 |....... Total | 00000430 20 41 76 65 72 61 67 65 20 20 20 00 00 01 04 00 | Average .....| Cardfiles are stored much more efficiently. Here's the entirety of our two cards. The fields are in the header, padded out to the fixed 12 character length, but with technically unnecessary nulls between them. A spurious "Beatles" entry looks like a buffer that was captured as part of the save, and there is also a page-aligned (counting the starting address) pad of nulls. Otherwise, the value strings look null-delimited, in the order they appear in the field list (unpopulated fields are zero-length strings). When you run out of fields, you're on the next card. % hexdump -C l.TESTLIST 00000000 00 7f 01 00 36 02 08 00 04 00 54 69 74 6c 65 20 |....6.....Title | 00000010 20 20 20 20 20 20 00 4c 65 61 64 20 41 72 74 69 | .Lead Arti| 00000020 73 74 20 00 4f 74 68 65 72 20 41 72 74 69 73 74 |st .Other Artist| 00000030 00 43 6f 6d 70 6f 73 65 72 20 20 20 20 00 43 6f |.Composer .Co| 00000040 6e 64 75 63 74 6f 72 20 20 20 00 57 68 65 72 65 |nductor .Where| 00000050 20 4b 65 70 74 20 20 00 42 6f 72 72 6f 77 65 64 | Kept .Borrowed| 00000060 20 62 79 20 00 44 61 74 65 20 4c 65 6e 74 20 20 | by .Date Lent | 00000070 20 00 00 00 ff ff 01 ff ff ff ff ff ff ff ff ff | ...............| 00000080 ff ff ff ff ff 00 01 02 03 04 05 06 07 00 01 02 |................| 00000090 03 04 05 06 07 ff ff ff ff ff ff ff ff ff ff 00 |................| 000000a0 00 54 68 65 20 42 65 61 74 6c 65 73 00 00 00 00 |.The Beatles....| 000000b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00000100 d7 09 80 60 60 ac 98 09 ae 04 cf a5 ea a9 d7 15 |...``...........| 00000110 80 ac 1d 21 d6 1c 80 60 60 ac 98 09 ae 04 cf 20 |...!...``...... | 00000120 75 0b 00 00 ac 0a 95 a5 f0 b0 a9 a6 b1 a9 a4 b1 |u...............| 00000130 a5 f1 b0 a9 a7 b1 a9 a5 b1 ac c0 08 cf 20 75 0b |............. u.| 00000140 fe ff a5 37 ae 8c ff 00 c0 d8 4b 80 cf a5 f0 b0 |...7......K.....| 00000150 a7 a6 b1 c0 d8 60 80 a5 f1 b0 a7 a7 b1 c0 d8 60 |.....`.........`| 00000160 80 cf a5 f0 b0 a7 a6 b1 00 00 09 00 01 5d f6 00 |.............]..| 00000170 00 00 00 09 00 09 00 01 66 f6 00 00 00 00 54 00 |........f.....T.| 00000180 50 00 01 b1 f6 69 64 65 20 12 00 42 00 01 6f f6 |P....ide ..B..o.| 00000190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 000001a0 00 00 00 00 00 00 00 52 65 76 6f 6c 76 65 72 00 |.......Revolver.| 000001b0 54 68 65 20 42 65 61 74 6c 65 73 00 00 4c 65 6e |The Beatles..Len| 000001c0 6e 6f 6e 2d 4d 63 43 61 72 74 6e 65 79 2d 48 61 |non-McCartney-Ha| 000001d0 72 72 69 73 6f 6e 00 47 65 6f 72 67 65 20 4d 61 |rrison.George Ma| 000001e0 72 74 69 6e 00 00 00 00 00 41 74 6f 6d 20 48 65 |rtin.....Atom He| 000001f0 61 72 74 20 4d 6f 74 68 65 72 00 50 69 6e 6b 20 |art Mother.Pink | 00000200 46 6c 6f 79 64 00 00 57 61 74 65 72 73 2d 47 69 |Floyd..Waters-Gi| 00000210 6c 6d 6f 75 72 2d 4d 61 73 6f 6e 2d 57 72 69 67 |lmour-Mason-Wrig| 00000220 68 74 2d 47 65 65 73 6f 6e 00 50 69 6e 6b 20 46 |ht-Geeson.Pink F| 00000230 6c 6f 79 64 00 00 00 00 |loyd....| 00000238 This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. % c1541 work.d71 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> dir 0 "data#000 " 01 2a 39 "c.TESTCALC" prg 3 "l.TESTLIST" prg 4 "w.nOTE.2" prg 4 "w.TESTCONV" prg 1278 blocks free. c1541 #8> read "w.TESTCONV" ERR = 62, FILE NOT FOUND, 00, 00 cannot read `w.TESTCONV' on unit 8 invalid filename As you may have guessed, that's because the filenames, and it turns out the data in the files themselves, are stored as true ASCII, not PETSCII (indeed as they would have been on the Apple II, also), so c1541's filename conversion fails. Fortunately, the extract command will walk the entire directory and pull out all the files no matter what they're named. The documents are all regular Commodore PRoGram files with a starting address and they appear to be loaded in-place at that address into bank 1. This introduces the possibility of some delightful save-file hacks but we're not here for that today. That means we can also simply extract our previous owners' files en masse as well. I imaged their disk using my ZoomFloppy and external 1571, and since they are normal PRGs, a BAM copy of the allocated sectors is all we need to do, with one wrinkle: % d64copy -B 9 r_jane_bam.d64 [Warning] growing image file to 683 blocks 14: --*****--*****--***** 8% 15/171[Warning] read error: 0e/00: 5 14: ?******************** 12% 21/171[Warning] giving up... 14: ?******************** 15: ********************* 16: ********************* 17: ********************* 18: ******************* 19: ******************* 20: ******************* 21: ******************* 22: ****..***...***...* 100% 171/171 170 blocks copied. % c1541 r_jane_bam.d64 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> extract c1541 #8> quit Fortunately it doesn't look like the bad sector was in any of the files they cared about. Let's get an idea of the format from our test files. Janecalc files are "huge" because it looks like the entire 26x50 cell range is saved regardless of whether anything's in it or not. Looking at the directory of their data disk where they had saved a couple of sparse test spreadsheets of their own, they also were 39 blocks in length no matter how many cells were actually populated. The on-disk format is consequentially a bit wasteful: 000003a0 00 00 00 00 00 20 20 20 4a 61 6e 75 61 72 79 20 |..... January | 000003b0 20 46 65 62 72 75 61 72 79 20 20 20 20 20 4d 61 | February Ma| 000003c0 72 63 68 20 20 20 20 20 41 70 72 69 6c 20 20 20 |rch April | 000003d0 20 20 20 20 4d 61 79 20 20 20 20 20 20 4a 75 6e | May Jun| 000003e0 65 20 20 20 20 20 20 4a 75 6c 79 20 20 20 20 41 |e July A| 000003f0 75 67 75 73 74 20 53 65 70 74 65 6d 62 65 72 20 |ugust September | 00000400 20 20 4f 63 74 6f 62 65 72 20 20 4e 6f 76 65 6d | October Novem| 00000410 62 65 72 20 20 44 65 63 65 6d 62 65 72 00 00 01 |ber December...| 00000420 04 00 00 00 00 00 00 20 20 54 6f 74 61 6c 20 20 |....... Total | 00000430 20 41 76 65 72 61 67 65 20 20 20 00 00 01 04 00 | Average .....| Cardfiles are stored much more efficiently. Here's the entirety of our two cards. The fields are in the header, padded out to the fixed 12 character length, but with technically unnecessary nulls between them. A spurious "Beatles" entry looks like a buffer that was captured as part of the save, and there is also a page-aligned (counting the starting address) pad of nulls. Otherwise, the value strings look null-delimited, in the order they appear in the field list (unpopulated fields are zero-length strings). When you run out of fields, you're on the next card. % hexdump -C l.TESTLIST 00000000 00 7f 01 00 36 02 08 00 04 00 54 69 74 6c 65 20 |....6.....Title | 00000010 20 20 20 20 20 20 00 4c 65 61 64 20 41 72 74 69 | .Lead Arti| 00000020 73 74 20 00 4f 74 68 65 72 20 41 72 74 69 73 74 |st .Other Artist| 00000030 00 43 6f 6d 70 6f 73 65 72 20 20 20 20 00 43 6f |.Composer .Co| 00000040 6e 64 75 63 74 6f 72 20 20 20 00 57 68 65 72 65 |nductor .Where| 00000050 20 4b 65 70 74 20 20 00 42 6f 72 72 6f 77 65 64 | Kept .Borrowed| 00000060 20 62 79 20 00 44 61 74 65 20 4c 65 6e 74 20 20 | by .Date Lent | 00000070 20 00 00 00 ff ff 01 ff ff ff ff ff ff ff ff ff | ...............| 00000080 ff ff ff ff ff 00 01 02 03 04 05 06 07 00 01 02 |................| 00000090 03 04 05 06 07 ff ff ff ff ff ff ff ff ff ff 00 |................| 000000a0 00 54 68 65 20 42 65 61 74 6c 65 73 00 00 00 00 |.The Beatles....| 000000b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00000100 d7 09 80 60 60 ac 98 09 ae 04 cf a5 ea a9 d7 15 |...``...........| 00000110 80 ac 1d 21 d6 1c 80 60 60 ac 98 09 ae 04 cf 20 |...!...``...... | 00000120 75 0b 00 00 ac 0a 95 a5 f0 b0 a9 a6 b1 a9 a4 b1 |u...............| 00000130 a5 f1 b0 a9 a7 b1 a9 a5 b1 ac c0 08 cf 20 75 0b |............. u.| 00000140 fe ff a5 37 ae 8c ff 00 c0 d8 4b 80 cf a5 f0 b0 |...7......K.....| 00000150 a7 a6 b1 c0 d8 60 80 a5 f1 b0 a7 a7 b1 c0 d8 60 |.....`.........`| 00000160 80 cf a5 f0 b0 a7 a6 b1 00 00 09 00 01 5d f6 00 |.............]..| 00000170 00 00 00 09 00 09 00 01 66 f6 00 00 00 00 54 00 |........f.....T.| 00000180 50 00 01 b1 f6 69 64 65 20 12 00 42 00 01 6f f6 |P....ide ..B..o.| 00000190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 000001a0 00 00 00 00 00 00 00 52 65 76 6f 6c 76 65 72 00 |.......Revolver.| 000001b0 54 68 65 20 42 65 61 74 6c 65 73 00 00 4c 65 6e |The Beatles..Len| 000001c0 6e 6f 6e 2d 4d 63 43 61 72 74 6e 65 79 2d 48 61 |non-McCartney-Ha| 000001d0 72 72 69 73 6f 6e 00 47 65 6f 72 67 65 20 4d 61 |rrison.George Ma| 000001e0 72 74 69 6e 00 00 00 00 00 41 74 6f 6d 20 48 65 |rtin.....Atom He| 000001f0 61 72 74 20 4d 6f 74 68 65 72 00 50 69 6e 6b 20 |art Mother.Pink | 00000200 46 6c 6f 79 64 00 00 57 61 74 65 72 73 2d 47 69 |Floyd..Waters-Gi| 00000210 6c 6d 6f 75 72 2d 4d 61 73 6f 6e 2d 57 72 69 67 |lmour-Mason-Wrig| 00000220 68 74 2d 47 65 65 73 6f 6e 00 50 69 6e 6b 20 46 |ht-Geeson.Pink F| 00000230 6c 6f 79 64 00 00 00 00 |loyd....| 00000238 This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. As you may have guessed, that's because the filenames, and it turns out the data in the files themselves, are stored as true ASCII, not PETSCII (indeed as they would have been on the Apple II, also), so c1541's filename conversion fails. Fortunately, the extract command will walk the entire directory and pull out all the files no matter what they're named. The documents are all regular Commodore PRoGram files with a starting address and they appear to be loaded in-place at that address into bank 1. This introduces the possibility of some delightful save-file hacks but we're not here for that today. That means we can also simply extract our previous owners' files en masse as well. I imaged their disk using my ZoomFloppy and external 1571, and since they are normal PRGs, a BAM copy of the allocated sectors is all we need to do, with one wrinkle: % d64copy -B 9 r_jane_bam.d64 [Warning] growing image file to 683 blocks 14: --*****--*****--***** 8% 15/171[Warning] read error: 0e/00: 5 14: ?******************** 12% 21/171[Warning] giving up... 14: ?******************** 15: ********************* 16: ********************* 17: ********************* 18: ******************* 19: ******************* 20: ******************* 21: ******************* 22: ****..***...***...* 100% 171/171 170 blocks copied. % c1541 r_jane_bam.d64 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> extract c1541 #8> quit Fortunately it doesn't look like the bad sector was in any of the files they cared about. Let's get an idea of the format from our test files. Janecalc files are "huge" because it looks like the entire 26x50 cell range is saved regardless of whether anything's in it or not. Looking at the directory of their data disk where they had saved a couple of sparse test spreadsheets of their own, they also were 39 blocks in length no matter how many cells were actually populated. The on-disk format is consequentially a bit wasteful: 000003a0 00 00 00 00 00 20 20 20 4a 61 6e 75 61 72 79 20 |..... January | 000003b0 20 46 65 62 72 75 61 72 79 20 20 20 20 20 4d 61 | February Ma| 000003c0 72 63 68 20 20 20 20 20 41 70 72 69 6c 20 20 20 |rch April | 000003d0 20 20 20 20 4d 61 79 20 20 20 20 20 20 4a 75 6e | May Jun| 000003e0 65 20 20 20 20 20 20 4a 75 6c 79 20 20 20 20 41 |e July A| 000003f0 75 67 75 73 74 20 53 65 70 74 65 6d 62 65 72 20 |ugust September | 00000400 20 20 4f 63 74 6f 62 65 72 20 20 4e 6f 76 65 6d | October Novem| 00000410 62 65 72 20 20 44 65 63 65 6d 62 65 72 00 00 01 |ber December...| 00000420 04 00 00 00 00 00 00 20 20 54 6f 74 61 6c 20 20 |....... Total | 00000430 20 41 76 65 72 61 67 65 20 20 20 00 00 01 04 00 | Average .....| Cardfiles are stored much more efficiently. Here's the entirety of our two cards. The fields are in the header, padded out to the fixed 12 character length, but with technically unnecessary nulls between them. A spurious "Beatles" entry looks like a buffer that was captured as part of the save, and there is also a page-aligned (counting the starting address) pad of nulls. Otherwise, the value strings look null-delimited, in the order they appear in the field list (unpopulated fields are zero-length strings). When you run out of fields, you're on the next card. % hexdump -C l.TESTLIST 00000000 00 7f 01 00 36 02 08 00 04 00 54 69 74 6c 65 20 |....6.....Title | 00000010 20 20 20 20 20 20 00 4c 65 61 64 20 41 72 74 69 | .Lead Arti| 00000020 73 74 20 00 4f 74 68 65 72 20 41 72 74 69 73 74 |st .Other Artist| 00000030 00 43 6f 6d 70 6f 73 65 72 20 20 20 20 00 43 6f |.Composer .Co| 00000040 6e 64 75 63 74 6f 72 20 20 20 00 57 68 65 72 65 |nductor .Where| 00000050 20 4b 65 70 74 20 20 00 42 6f 72 72 6f 77 65 64 | Kept .Borrowed| 00000060 20 62 79 20 00 44 61 74 65 20 4c 65 6e 74 20 20 | by .Date Lent | 00000070 20 00 00 00 ff ff 01 ff ff ff ff ff ff ff ff ff | ...............| 00000080 ff ff ff ff ff 00 01 02 03 04 05 06 07 00 01 02 |................| 00000090 03 04 05 06 07 ff ff ff ff ff ff ff ff ff ff 00 |................| 000000a0 00 54 68 65 20 42 65 61 74 6c 65 73 00 00 00 00 |.The Beatles....| 000000b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00000100 d7 09 80 60 60 ac 98 09 ae 04 cf a5 ea a9 d7 15 |...``...........| 00000110 80 ac 1d 21 d6 1c 80 60 60 ac 98 09 ae 04 cf 20 |...!...``...... | 00000120 75 0b 00 00 ac 0a 95 a5 f0 b0 a9 a6 b1 a9 a4 b1 |u...............| 00000130 a5 f1 b0 a9 a7 b1 a9 a5 b1 ac c0 08 cf 20 75 0b |............. u.| 00000140 fe ff a5 37 ae 8c ff 00 c0 d8 4b 80 cf a5 f0 b0 |...7......K.....| 00000150 a7 a6 b1 c0 d8 60 80 a5 f1 b0 a7 a7 b1 c0 d8 60 |.....`.........`| 00000160 80 cf a5 f0 b0 a7 a6 b1 00 00 09 00 01 5d f6 00 |.............]..| 00000170 00 00 00 09 00 09 00 01 66 f6 00 00 00 00 54 00 |........f.....T.| 00000180 50 00 01 b1 f6 69 64 65 20 12 00 42 00 01 6f f6 |P....ide ..B..o.| 00000190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 000001a0 00 00 00 00 00 00 00 52 65 76 6f 6c 76 65 72 00 |.......Revolver.| 000001b0 54 68 65 20 42 65 61 74 6c 65 73 00 00 4c 65 6e |The Beatles..Len| 000001c0 6e 6f 6e 2d 4d 63 43 61 72 74 6e 65 79 2d 48 61 |non-McCartney-Ha| 000001d0 72 72 69 73 6f 6e 00 47 65 6f 72 67 65 20 4d 61 |rrison.George Ma| 000001e0 72 74 69 6e 00 00 00 00 00 41 74 6f 6d 20 48 65 |rtin.....Atom He| 000001f0 61 72 74 20 4d 6f 74 68 65 72 00 50 69 6e 6b 20 |art Mother.Pink | 00000200 46 6c 6f 79 64 00 00 57 61 74 65 72 73 2d 47 69 |Floyd..Waters-Gi| 00000210 6c 6d 6f 75 72 2d 4d 61 73 6f 6e 2d 57 72 69 67 |lmour-Mason-Wrig| 00000220 68 74 2d 47 65 65 73 6f 6e 00 50 69 6e 6b 20 46 |ht-Geeson.Pink F| 00000230 6c 6f 79 64 00 00 00 00 |loyd....| 00000238 This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. The documents are all regular Commodore PRoGram files with a starting address and they appear to be loaded in-place at that address into bank 1. This introduces the possibility of some delightful save-file hacks but we're not here for that today. That means we can also simply extract our previous owners' files en masse as well. I imaged their disk using my ZoomFloppy and external 1571, and since they are normal PRGs, a BAM copy of the allocated sectors is all we need to do, with one wrinkle: % d64copy -B 9 r_jane_bam.d64 [Warning] growing image file to 683 blocks 14: --*****--*****--***** 8% 15/171[Warning] read error: 0e/00: 5 14: ?******************** 12% 21/171[Warning] giving up... 14: ?******************** 15: ********************* 16: ********************* 17: ********************* 18: ******************* 19: ******************* 20: ******************* 21: ******************* 22: ****..***...***...* 100% 171/171 170 blocks copied. % c1541 r_jane_bam.d64 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> extract c1541 #8> quit Fortunately it doesn't look like the bad sector was in any of the files they cared about. Let's get an idea of the format from our test files. Janecalc files are "huge" because it looks like the entire 26x50 cell range is saved regardless of whether anything's in it or not. Looking at the directory of their data disk where they had saved a couple of sparse test spreadsheets of their own, they also were 39 blocks in length no matter how many cells were actually populated. The on-disk format is consequentially a bit wasteful: 000003a0 00 00 00 00 00 20 20 20 4a 61 6e 75 61 72 79 20 |..... January | 000003b0 20 46 65 62 72 75 61 72 79 20 20 20 20 20 4d 61 | February Ma| 000003c0 72 63 68 20 20 20 20 20 41 70 72 69 6c 20 20 20 |rch April | 000003d0 20 20 20 20 4d 61 79 20 20 20 20 20 20 4a 75 6e | May Jun| 000003e0 65 20 20 20 20 20 20 4a 75 6c 79 20 20 20 20 41 |e July A| 000003f0 75 67 75 73 74 20 53 65 70 74 65 6d 62 65 72 20 |ugust September | 00000400 20 20 4f 63 74 6f 62 65 72 20 20 4e 6f 76 65 6d | October Novem| 00000410 62 65 72 20 20 44 65 63 65 6d 62 65 72 00 00 01 |ber December...| 00000420 04 00 00 00 00 00 00 20 20 54 6f 74 61 6c 20 20 |....... Total | 00000430 20 41 76 65 72 61 67 65 20 20 20 00 00 01 04 00 | Average .....| Cardfiles are stored much more efficiently. Here's the entirety of our two cards. The fields are in the header, padded out to the fixed 12 character length, but with technically unnecessary nulls between them. A spurious "Beatles" entry looks like a buffer that was captured as part of the save, and there is also a page-aligned (counting the starting address) pad of nulls. Otherwise, the value strings look null-delimited, in the order they appear in the field list (unpopulated fields are zero-length strings). When you run out of fields, you're on the next card. % hexdump -C l.TESTLIST 00000000 00 7f 01 00 36 02 08 00 04 00 54 69 74 6c 65 20 |....6.....Title | 00000010 20 20 20 20 20 20 00 4c 65 61 64 20 41 72 74 69 | .Lead Arti| 00000020 73 74 20 00 4f 74 68 65 72 20 41 72 74 69 73 74 |st .Other Artist| 00000030 00 43 6f 6d 70 6f 73 65 72 20 20 20 20 00 43 6f |.Composer .Co| 00000040 6e 64 75 63 74 6f 72 20 20 20 00 57 68 65 72 65 |nductor .Where| 00000050 20 4b 65 70 74 20 20 00 42 6f 72 72 6f 77 65 64 | Kept .Borrowed| 00000060 20 62 79 20 00 44 61 74 65 20 4c 65 6e 74 20 20 | by .Date Lent | 00000070 20 00 00 00 ff ff 01 ff ff ff ff ff ff ff ff ff | ...............| 00000080 ff ff ff ff ff 00 01 02 03 04 05 06 07 00 01 02 |................| 00000090 03 04 05 06 07 ff ff ff ff ff ff ff ff ff ff 00 |................| 000000a0 00 54 68 65 20 42 65 61 74 6c 65 73 00 00 00 00 |.The Beatles....| 000000b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00000100 d7 09 80 60 60 ac 98 09 ae 04 cf a5 ea a9 d7 15 |...``...........| 00000110 80 ac 1d 21 d6 1c 80 60 60 ac 98 09 ae 04 cf 20 |...!...``...... | 00000120 75 0b 00 00 ac 0a 95 a5 f0 b0 a9 a6 b1 a9 a4 b1 |u...............| 00000130 a5 f1 b0 a9 a7 b1 a9 a5 b1 ac c0 08 cf 20 75 0b |............. u.| 00000140 fe ff a5 37 ae 8c ff 00 c0 d8 4b 80 cf a5 f0 b0 |...7......K.....| 00000150 a7 a6 b1 c0 d8 60 80 a5 f1 b0 a7 a7 b1 c0 d8 60 |.....`.........`| 00000160 80 cf a5 f0 b0 a7 a6 b1 00 00 09 00 01 5d f6 00 |.............]..| 00000170 00 00 00 09 00 09 00 01 66 f6 00 00 00 00 54 00 |........f.....T.| 00000180 50 00 01 b1 f6 69 64 65 20 12 00 42 00 01 6f f6 |P....ide ..B..o.| 00000190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 000001a0 00 00 00 00 00 00 00 52 65 76 6f 6c 76 65 72 00 |.......Revolver.| 000001b0 54 68 65 20 42 65 61 74 6c 65 73 00 00 4c 65 6e |The Beatles..Len| 000001c0 6e 6f 6e 2d 4d 63 43 61 72 74 6e 65 79 2d 48 61 |non-McCartney-Ha| 000001d0 72 72 69 73 6f 6e 00 47 65 6f 72 67 65 20 4d 61 |rrison.George Ma| 000001e0 72 74 69 6e 00 00 00 00 00 41 74 6f 6d 20 48 65 |rtin.....Atom He| 000001f0 61 72 74 20 4d 6f 74 68 65 72 00 50 69 6e 6b 20 |art Mother.Pink | 00000200 46 6c 6f 79 64 00 00 57 61 74 65 72 73 2d 47 69 |Floyd..Waters-Gi| 00000210 6c 6d 6f 75 72 2d 4d 61 73 6f 6e 2d 57 72 69 67 |lmour-Mason-Wrig| 00000220 68 74 2d 47 65 65 73 6f 6e 00 50 69 6e 6b 20 46 |ht-Geeson.Pink F| 00000230 6c 6f 79 64 00 00 00 00 |loyd....| 00000238 This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. That means we can also simply extract our previous owners' files en masse as well. I imaged their disk using my ZoomFloppy and external 1571, and since they are normal PRGs, a BAM copy of the allocated sectors is all we need to do, with one wrinkle: % d64copy -B 9 r_jane_bam.d64 [Warning] growing image file to 683 blocks 14: --*****--*****--***** 8% 15/171[Warning] read error: 0e/00: 5 14: ?******************** 12% 21/171[Warning] giving up... 14: ?******************** 15: ********************* 16: ********************* 17: ********************* 18: ******************* 19: ******************* 20: ******************* 21: ******************* 22: ****..***...***...* 100% 171/171 170 blocks copied. % c1541 r_jane_bam.d64 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> extract c1541 #8> quit Fortunately it doesn't look like the bad sector was in any of the files they cared about. Let's get an idea of the format from our test files. Janecalc files are "huge" because it looks like the entire 26x50 cell range is saved regardless of whether anything's in it or not. Looking at the directory of their data disk where they had saved a couple of sparse test spreadsheets of their own, they also were 39 blocks in length no matter how many cells were actually populated. The on-disk format is consequentially a bit wasteful: 000003a0 00 00 00 00 00 20 20 20 4a 61 6e 75 61 72 79 20 |..... January | 000003b0 20 46 65 62 72 75 61 72 79 20 20 20 20 20 4d 61 | February Ma| 000003c0 72 63 68 20 20 20 20 20 41 70 72 69 6c 20 20 20 |rch April | 000003d0 20 20 20 20 4d 61 79 20 20 20 20 20 20 4a 75 6e | May Jun| 000003e0 65 20 20 20 20 20 20 4a 75 6c 79 20 20 20 20 41 |e July A| 000003f0 75 67 75 73 74 20 53 65 70 74 65 6d 62 65 72 20 |ugust September | 00000400 20 20 4f 63 74 6f 62 65 72 20 20 4e 6f 76 65 6d | October Novem| 00000410 62 65 72 20 20 44 65 63 65 6d 62 65 72 00 00 01 |ber December...| 00000420 04 00 00 00 00 00 00 20 20 54 6f 74 61 6c 20 20 |....... Total | 00000430 20 41 76 65 72 61 67 65 20 20 20 00 00 01 04 00 | Average .....| Cardfiles are stored much more efficiently. Here's the entirety of our two cards. The fields are in the header, padded out to the fixed 12 character length, but with technically unnecessary nulls between them. A spurious "Beatles" entry looks like a buffer that was captured as part of the save, and there is also a page-aligned (counting the starting address) pad of nulls. Otherwise, the value strings look null-delimited, in the order they appear in the field list (unpopulated fields are zero-length strings). When you run out of fields, you're on the next card. % hexdump -C l.TESTLIST 00000000 00 7f 01 00 36 02 08 00 04 00 54 69 74 6c 65 20 |....6.....Title | 00000010 20 20 20 20 20 20 00 4c 65 61 64 20 41 72 74 69 | .Lead Arti| 00000020 73 74 20 00 4f 74 68 65 72 20 41 72 74 69 73 74 |st .Other Artist| 00000030 00 43 6f 6d 70 6f 73 65 72 20 20 20 20 00 43 6f |.Composer .Co| 00000040 6e 64 75 63 74 6f 72 20 20 20 00 57 68 65 72 65 |nductor .Where| 00000050 20 4b 65 70 74 20 20 00 42 6f 72 72 6f 77 65 64 | Kept .Borrowed| 00000060 20 62 79 20 00 44 61 74 65 20 4c 65 6e 74 20 20 | by .Date Lent | 00000070 20 00 00 00 ff ff 01 ff ff ff ff ff ff ff ff ff | ...............| 00000080 ff ff ff ff ff 00 01 02 03 04 05 06 07 00 01 02 |................| 00000090 03 04 05 06 07 ff ff ff ff ff ff ff ff ff ff 00 |................| 000000a0 00 54 68 65 20 42 65 61 74 6c 65 73 00 00 00 00 |.The Beatles....| 000000b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00000100 d7 09 80 60 60 ac 98 09 ae 04 cf a5 ea a9 d7 15 |...``...........| 00000110 80 ac 1d 21 d6 1c 80 60 60 ac 98 09 ae 04 cf 20 |...!...``...... | 00000120 75 0b 00 00 ac 0a 95 a5 f0 b0 a9 a6 b1 a9 a4 b1 |u...............| 00000130 a5 f1 b0 a9 a7 b1 a9 a5 b1 ac c0 08 cf 20 75 0b |............. u.| 00000140 fe ff a5 37 ae 8c ff 00 c0 d8 4b 80 cf a5 f0 b0 |...7......K.....| 00000150 a7 a6 b1 c0 d8 60 80 a5 f1 b0 a7 a7 b1 c0 d8 60 |.....`.........`| 00000160 80 cf a5 f0 b0 a7 a6 b1 00 00 09 00 01 5d f6 00 |.............]..| 00000170 00 00 00 09 00 09 00 01 66 f6 00 00 00 00 54 00 |........f.....T.| 00000180 50 00 01 b1 f6 69 64 65 20 12 00 42 00 01 6f f6 |P....ide ..B..o.| 00000190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 000001a0 00 00 00 00 00 00 00 52 65 76 6f 6c 76 65 72 00 |.......Revolver.| 000001b0 54 68 65 20 42 65 61 74 6c 65 73 00 00 4c 65 6e |The Beatles..Len| 000001c0 6e 6f 6e 2d 4d 63 43 61 72 74 6e 65 79 2d 48 61 |non-McCartney-Ha| 000001d0 72 72 69 73 6f 6e 00 47 65 6f 72 67 65 20 4d 61 |rrison.George Ma| 000001e0 72 74 69 6e 00 00 00 00 00 41 74 6f 6d 20 48 65 |rtin.....Atom He| 000001f0 61 72 74 20 4d 6f 74 68 65 72 00 50 69 6e 6b 20 |art Mother.Pink | 00000200 46 6c 6f 79 64 00 00 57 61 74 65 72 73 2d 47 69 |Floyd..Waters-Gi| 00000210 6c 6d 6f 75 72 2d 4d 61 73 6f 6e 2d 57 72 69 67 |lmour-Mason-Wrig| 00000220 68 74 2d 47 65 65 73 6f 6e 00 50 69 6e 6b 20 46 |ht-Geeson.Pink F| 00000230 6c 6f 79 64 00 00 00 00 |loyd....| 00000238 This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. % d64copy -B 9 r_jane_bam.d64 [Warning] growing image file to 683 blocks 14: --*****--*****--***** 8% 15/171[Warning] read error: 0e/00: 5 14: ?******************** 12% 21/171[Warning] giving up... 14: ?******************** 15: ********************* 16: ********************* 17: ********************* 18: ******************* 19: ******************* 20: ******************* 21: ******************* 22: ****..***...***...* 100% 171/171 170 blocks copied. % c1541 r_jane_bam.d64 c1541 (VICE 3.8) Copyright 1995-2023 The VICE Development Team. C1541 is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions. c1541 #8> extract c1541 #8> quit Fortunately it doesn't look like the bad sector was in any of the files they cared about. Let's get an idea of the format from our test files. Janecalc files are "huge" because it looks like the entire 26x50 cell range is saved regardless of whether anything's in it or not. Looking at the directory of their data disk where they had saved a couple of sparse test spreadsheets of their own, they also were 39 blocks in length no matter how many cells were actually populated. The on-disk format is consequentially a bit wasteful: 000003a0 00 00 00 00 00 20 20 20 4a 61 6e 75 61 72 79 20 |..... January | 000003b0 20 46 65 62 72 75 61 72 79 20 20 20 20 20 4d 61 | February Ma| 000003c0 72 63 68 20 20 20 20 20 41 70 72 69 6c 20 20 20 |rch April | 000003d0 20 20 20 20 4d 61 79 20 20 20 20 20 20 4a 75 6e | May Jun| 000003e0 65 20 20 20 20 20 20 4a 75 6c 79 20 20 20 20 41 |e July A| 000003f0 75 67 75 73 74 20 53 65 70 74 65 6d 62 65 72 20 |ugust September | 00000400 20 20 4f 63 74 6f 62 65 72 20 20 4e 6f 76 65 6d | October Novem| 00000410 62 65 72 20 20 44 65 63 65 6d 62 65 72 00 00 01 |ber December...| 00000420 04 00 00 00 00 00 00 20 20 54 6f 74 61 6c 20 20 |....... Total | 00000430 20 41 76 65 72 61 67 65 20 20 20 00 00 01 04 00 | Average .....| Cardfiles are stored much more efficiently. Here's the entirety of our two cards. The fields are in the header, padded out to the fixed 12 character length, but with technically unnecessary nulls between them. A spurious "Beatles" entry looks like a buffer that was captured as part of the save, and there is also a page-aligned (counting the starting address) pad of nulls. Otherwise, the value strings look null-delimited, in the order they appear in the field list (unpopulated fields are zero-length strings). When you run out of fields, you're on the next card. % hexdump -C l.TESTLIST 00000000 00 7f 01 00 36 02 08 00 04 00 54 69 74 6c 65 20 |....6.....Title | 00000010 20 20 20 20 20 20 00 4c 65 61 64 20 41 72 74 69 | .Lead Arti| 00000020 73 74 20 00 4f 74 68 65 72 20 41 72 74 69 73 74 |st .Other Artist| 00000030 00 43 6f 6d 70 6f 73 65 72 20 20 20 20 00 43 6f |.Composer .Co| 00000040 6e 64 75 63 74 6f 72 20 20 20 00 57 68 65 72 65 |nductor .Where| 00000050 20 4b 65 70 74 20 20 00 42 6f 72 72 6f 77 65 64 | Kept .Borrowed| 00000060 20 62 79 20 00 44 61 74 65 20 4c 65 6e 74 20 20 | by .Date Lent | 00000070 20 00 00 00 ff ff 01 ff ff ff ff ff ff ff ff ff | ...............| 00000080 ff ff ff ff ff 00 01 02 03 04 05 06 07 00 01 02 |................| 00000090 03 04 05 06 07 ff ff ff ff ff ff ff ff ff ff 00 |................| 000000a0 00 54 68 65 20 42 65 61 74 6c 65 73 00 00 00 00 |.The Beatles....| 000000b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00000100 d7 09 80 60 60 ac 98 09 ae 04 cf a5 ea a9 d7 15 |...``...........| 00000110 80 ac 1d 21 d6 1c 80 60 60 ac 98 09 ae 04 cf 20 |...!...``...... | 00000120 75 0b 00 00 ac 0a 95 a5 f0 b0 a9 a6 b1 a9 a4 b1 |u...............| 00000130 a5 f1 b0 a9 a7 b1 a9 a5 b1 ac c0 08 cf 20 75 0b |............. u.| 00000140 fe ff a5 37 ae 8c ff 00 c0 d8 4b 80 cf a5 f0 b0 |...7......K.....| 00000150 a7 a6 b1 c0 d8 60 80 a5 f1 b0 a7 a7 b1 c0 d8 60 |.....`.........`| 00000160 80 cf a5 f0 b0 a7 a6 b1 00 00 09 00 01 5d f6 00 |.............]..| 00000170 00 00 00 09 00 09 00 01 66 f6 00 00 00 00 54 00 |........f.....T.| 00000180 50 00 01 b1 f6 69 64 65 20 12 00 42 00 01 6f f6 |P....ide ..B..o.| 00000190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 000001a0 00 00 00 00 00 00 00 52 65 76 6f 6c 76 65 72 00 |.......Revolver.| 000001b0 54 68 65 20 42 65 61 74 6c 65 73 00 00 4c 65 6e |The Beatles..Len| 000001c0 6e 6f 6e 2d 4d 63 43 61 72 74 6e 65 79 2d 48 61 |non-McCartney-Ha| 000001d0 72 72 69 73 6f 6e 00 47 65 6f 72 67 65 20 4d 61 |rrison.George Ma| 000001e0 72 74 69 6e 00 00 00 00 00 41 74 6f 6d 20 48 65 |rtin.....Atom He| 000001f0 61 72 74 20 4d 6f 74 68 65 72 00 50 69 6e 6b 20 |art Mother.Pink | 00000200 46 6c 6f 79 64 00 00 57 61 74 65 72 73 2d 47 69 |Floyd..Waters-Gi| 00000210 6c 6d 6f 75 72 2d 4d 61 73 6f 6e 2d 57 72 69 67 |lmour-Mason-Wrig| 00000220 68 74 2d 47 65 65 73 6f 6e 00 50 69 6e 6b 20 46 |ht-Geeson.Pink F| 00000230 6c 6f 79 64 00 00 00 00 |loyd....| 00000238 This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. Fortunately it doesn't look like the bad sector was in any of the files they cared about. Let's get an idea of the format from our test files. Janecalc files are "huge" because it looks like the entire 26x50 cell range is saved regardless of whether anything's in it or not. Looking at the directory of their data disk where they had saved a couple of sparse test spreadsheets of their own, they also were 39 blocks in length no matter how many cells were actually populated. The on-disk format is consequentially a bit wasteful: 000003a0 00 00 00 00 00 20 20 20 4a 61 6e 75 61 72 79 20 |..... January | 000003b0 20 46 65 62 72 75 61 72 79 20 20 20 20 20 4d 61 | February Ma| 000003c0 72 63 68 20 20 20 20 20 41 70 72 69 6c 20 20 20 |rch April | 000003d0 20 20 20 20 4d 61 79 20 20 20 20 20 20 4a 75 6e | May Jun| 000003e0 65 20 20 20 20 20 20 4a 75 6c 79 20 20 20 20 41 |e July A| 000003f0 75 67 75 73 74 20 53 65 70 74 65 6d 62 65 72 20 |ugust September | 00000400 20 20 4f 63 74 6f 62 65 72 20 20 4e 6f 76 65 6d | October Novem| 00000410 62 65 72 20 20 44 65 63 65 6d 62 65 72 00 00 01 |ber December...| 00000420 04 00 00 00 00 00 00 20 20 54 6f 74 61 6c 20 20 |....... Total | 00000430 20 41 76 65 72 61 67 65 20 20 20 00 00 01 04 00 | Average .....| Cardfiles are stored much more efficiently. Here's the entirety of our two cards. The fields are in the header, padded out to the fixed 12 character length, but with technically unnecessary nulls between them. A spurious "Beatles" entry looks like a buffer that was captured as part of the save, and there is also a page-aligned (counting the starting address) pad of nulls. Otherwise, the value strings look null-delimited, in the order they appear in the field list (unpopulated fields are zero-length strings). When you run out of fields, you're on the next card. % hexdump -C l.TESTLIST 00000000 00 7f 01 00 36 02 08 00 04 00 54 69 74 6c 65 20 |....6.....Title | 00000010 20 20 20 20 20 20 00 4c 65 61 64 20 41 72 74 69 | .Lead Arti| 00000020 73 74 20 00 4f 74 68 65 72 20 41 72 74 69 73 74 |st .Other Artist| 00000030 00 43 6f 6d 70 6f 73 65 72 20 20 20 20 00 43 6f |.Composer .Co| 00000040 6e 64 75 63 74 6f 72 20 20 20 00 57 68 65 72 65 |nductor .Where| 00000050 20 4b 65 70 74 20 20 00 42 6f 72 72 6f 77 65 64 | Kept .Borrowed| 00000060 20 62 79 20 00 44 61 74 65 20 4c 65 6e 74 20 20 | by .Date Lent | 00000070 20 00 00 00 ff ff 01 ff ff ff ff ff ff ff ff ff | ...............| 00000080 ff ff ff ff ff 00 01 02 03 04 05 06 07 00 01 02 |................| 00000090 03 04 05 06 07 ff ff ff ff ff ff ff ff ff ff 00 |................| 000000a0 00 54 68 65 20 42 65 61 74 6c 65 73 00 00 00 00 |.The Beatles....| 000000b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00000100 d7 09 80 60 60 ac 98 09 ae 04 cf a5 ea a9 d7 15 |...``...........| 00000110 80 ac 1d 21 d6 1c 80 60 60 ac 98 09 ae 04 cf 20 |...!...``...... | 00000120 75 0b 00 00 ac 0a 95 a5 f0 b0 a9 a6 b1 a9 a4 b1 |u...............| 00000130 a5 f1 b0 a9 a7 b1 a9 a5 b1 ac c0 08 cf 20 75 0b |............. u.| 00000140 fe ff a5 37 ae 8c ff 00 c0 d8 4b 80 cf a5 f0 b0 |...7......K.....| 00000150 a7 a6 b1 c0 d8 60 80 a5 f1 b0 a7 a7 b1 c0 d8 60 |.....`.........`| 00000160 80 cf a5 f0 b0 a7 a6 b1 00 00 09 00 01 5d f6 00 |.............]..| 00000170 00 00 00 09 00 09 00 01 66 f6 00 00 00 00 54 00 |........f.....T.| 00000180 50 00 01 b1 f6 69 64 65 20 12 00 42 00 01 6f f6 |P....ide ..B..o.| 00000190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 000001a0 00 00 00 00 00 00 00 52 65 76 6f 6c 76 65 72 00 |.......Revolver.| 000001b0 54 68 65 20 42 65 61 74 6c 65 73 00 00 4c 65 6e |The Beatles..Len| 000001c0 6e 6f 6e 2d 4d 63 43 61 72 74 6e 65 79 2d 48 61 |non-McCartney-Ha| 000001d0 72 72 69 73 6f 6e 00 47 65 6f 72 67 65 20 4d 61 |rrison.George Ma| 000001e0 72 74 69 6e 00 00 00 00 00 41 74 6f 6d 20 48 65 |rtin.....Atom He| 000001f0 61 72 74 20 4d 6f 74 68 65 72 00 50 69 6e 6b 20 |art Mother.Pink | 00000200 46 6c 6f 79 64 00 00 57 61 74 65 72 73 2d 47 69 |Floyd..Waters-Gi| 00000210 6c 6d 6f 75 72 2d 4d 61 73 6f 6e 2d 57 72 69 67 |lmour-Mason-Wrig| 00000220 68 74 2d 47 65 65 73 6f 6e 00 50 69 6e 6b 20 46 |ht-Geeson.Pink F| 00000230 6c 6f 79 64 00 00 00 00 |loyd....| 00000238 This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. Let's get an idea of the format from our test files. Janecalc files are "huge" because it looks like the entire 26x50 cell range is saved regardless of whether anything's in it or not. Looking at the directory of their data disk where they had saved a couple of sparse test spreadsheets of their own, they also were 39 blocks in length no matter how many cells were actually populated. The on-disk format is consequentially a bit wasteful: 000003a0 00 00 00 00 00 20 20 20 4a 61 6e 75 61 72 79 20 |..... January | 000003b0 20 46 65 62 72 75 61 72 79 20 20 20 20 20 4d 61 | February Ma| 000003c0 72 63 68 20 20 20 20 20 41 70 72 69 6c 20 20 20 |rch April | 000003d0 20 20 20 20 4d 61 79 20 20 20 20 20 20 4a 75 6e | May Jun| 000003e0 65 20 20 20 20 20 20 4a 75 6c 79 20 20 20 20 41 |e July A| 000003f0 75 67 75 73 74 20 53 65 70 74 65 6d 62 65 72 20 |ugust September | 00000400 20 20 4f 63 74 6f 62 65 72 20 20 4e 6f 76 65 6d | October Novem| 00000410 62 65 72 20 20 44 65 63 65 6d 62 65 72 00 00 01 |ber December...| 00000420 04 00 00 00 00 00 00 20 20 54 6f 74 61 6c 20 20 |....... Total | 00000430 20 41 76 65 72 61 67 65 20 20 20 00 00 01 04 00 | Average .....| Cardfiles are stored much more efficiently. Here's the entirety of our two cards. The fields are in the header, padded out to the fixed 12 character length, but with technically unnecessary nulls between them. A spurious "Beatles" entry looks like a buffer that was captured as part of the save, and there is also a page-aligned (counting the starting address) pad of nulls. Otherwise, the value strings look null-delimited, in the order they appear in the field list (unpopulated fields are zero-length strings). When you run out of fields, you're on the next card. % hexdump -C l.TESTLIST 00000000 00 7f 01 00 36 02 08 00 04 00 54 69 74 6c 65 20 |....6.....Title | 00000010 20 20 20 20 20 20 00 4c 65 61 64 20 41 72 74 69 | .Lead Arti| 00000020 73 74 20 00 4f 74 68 65 72 20 41 72 74 69 73 74 |st .Other Artist| 00000030 00 43 6f 6d 70 6f 73 65 72 20 20 20 20 00 43 6f |.Composer .Co| 00000040 6e 64 75 63 74 6f 72 20 20 20 00 57 68 65 72 65 |nductor .Where| 00000050 20 4b 65 70 74 20 20 00 42 6f 72 72 6f 77 65 64 | Kept .Borrowed| 00000060 20 62 79 20 00 44 61 74 65 20 4c 65 6e 74 20 20 | by .Date Lent | 00000070 20 00 00 00 ff ff 01 ff ff ff ff ff ff ff ff ff | ...............| 00000080 ff ff ff ff ff 00 01 02 03 04 05 06 07 00 01 02 |................| 00000090 03 04 05 06 07 ff ff ff ff ff ff ff ff ff ff 00 |................| 000000a0 00 54 68 65 20 42 65 61 74 6c 65 73 00 00 00 00 |.The Beatles....| 000000b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00000100 d7 09 80 60 60 ac 98 09 ae 04 cf a5 ea a9 d7 15 |...``...........| 00000110 80 ac 1d 21 d6 1c 80 60 60 ac 98 09 ae 04 cf 20 |...!...``...... | 00000120 75 0b 00 00 ac 0a 95 a5 f0 b0 a9 a6 b1 a9 a4 b1 |u...............| 00000130 a5 f1 b0 a9 a7 b1 a9 a5 b1 ac c0 08 cf 20 75 0b |............. u.| 00000140 fe ff a5 37 ae 8c ff 00 c0 d8 4b 80 cf a5 f0 b0 |...7......K.....| 00000150 a7 a6 b1 c0 d8 60 80 a5 f1 b0 a7 a7 b1 c0 d8 60 |.....`.........`| 00000160 80 cf a5 f0 b0 a7 a6 b1 00 00 09 00 01 5d f6 00 |.............]..| 00000170 00 00 00 09 00 09 00 01 66 f6 00 00 00 00 54 00 |........f.....T.| 00000180 50 00 01 b1 f6 69 64 65 20 12 00 42 00 01 6f f6 |P....ide ..B..o.| 00000190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 000001a0 00 00 00 00 00 00 00 52 65 76 6f 6c 76 65 72 00 |.......Revolver.| 000001b0 54 68 65 20 42 65 61 74 6c 65 73 00 00 4c 65 6e |The Beatles..Len| 000001c0 6e 6f 6e 2d 4d 63 43 61 72 74 6e 65 79 2d 48 61 |non-McCartney-Ha| 000001d0 72 72 69 73 6f 6e 00 47 65 6f 72 67 65 20 4d 61 |rrison.George Ma| 000001e0 72 74 69 6e 00 00 00 00 00 41 74 6f 6d 20 48 65 |rtin.....Atom He| 000001f0 61 72 74 20 4d 6f 74 68 65 72 00 50 69 6e 6b 20 |art Mother.Pink | 00000200 46 6c 6f 79 64 00 00 57 61 74 65 72 73 2d 47 69 |Floyd..Waters-Gi| 00000210 6c 6d 6f 75 72 2d 4d 61 73 6f 6e 2d 57 72 69 67 |lmour-Mason-Wrig| 00000220 68 74 2d 47 65 65 73 6f 6e 00 50 69 6e 6b 20 46 |ht-Geeson.Pink F| 00000230 6c 6f 79 64 00 00 00 00 |loyd....| 00000238 This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. 000003a0 00 00 00 00 00 20 20 20 4a 61 6e 75 61 72 79 20 |..... January | 000003b0 20 46 65 62 72 75 61 72 79 20 20 20 20 20 4d 61 | February Ma| 000003c0 72 63 68 20 20 20 20 20 41 70 72 69 6c 20 20 20 |rch April | 000003d0 20 20 20 20 4d 61 79 20 20 20 20 20 20 4a 75 6e | May Jun| 000003e0 65 20 20 20 20 20 20 4a 75 6c 79 20 20 20 20 41 |e July A| 000003f0 75 67 75 73 74 20 53 65 70 74 65 6d 62 65 72 20 |ugust September | 00000400 20 20 4f 63 74 6f 62 65 72 20 20 4e 6f 76 65 6d | October Novem| 00000410 62 65 72 20 20 44 65 63 65 6d 62 65 72 00 00 01 |ber December...| 00000420 04 00 00 00 00 00 00 20 20 54 6f 74 61 6c 20 20 |....... Total | 00000430 20 41 76 65 72 61 67 65 20 20 20 00 00 01 04 00 | Average .....| Cardfiles are stored much more efficiently. Here's the entirety of our two cards. The fields are in the header, padded out to the fixed 12 character length, but with technically unnecessary nulls between them. A spurious "Beatles" entry looks like a buffer that was captured as part of the save, and there is also a page-aligned (counting the starting address) pad of nulls. Otherwise, the value strings look null-delimited, in the order they appear in the field list (unpopulated fields are zero-length strings). When you run out of fields, you're on the next card. % hexdump -C l.TESTLIST 00000000 00 7f 01 00 36 02 08 00 04 00 54 69 74 6c 65 20 |....6.....Title | 00000010 20 20 20 20 20 20 00 4c 65 61 64 20 41 72 74 69 | .Lead Arti| 00000020 73 74 20 00 4f 74 68 65 72 20 41 72 74 69 73 74 |st .Other Artist| 00000030 00 43 6f 6d 70 6f 73 65 72 20 20 20 20 00 43 6f |.Composer .Co| 00000040 6e 64 75 63 74 6f 72 20 20 20 00 57 68 65 72 65 |nductor .Where| 00000050 20 4b 65 70 74 20 20 00 42 6f 72 72 6f 77 65 64 | Kept .Borrowed| 00000060 20 62 79 20 00 44 61 74 65 20 4c 65 6e 74 20 20 | by .Date Lent | 00000070 20 00 00 00 ff ff 01 ff ff ff ff ff ff ff ff ff | ...............| 00000080 ff ff ff ff ff 00 01 02 03 04 05 06 07 00 01 02 |................| 00000090 03 04 05 06 07 ff ff ff ff ff ff ff ff ff ff 00 |................| 000000a0 00 54 68 65 20 42 65 61 74 6c 65 73 00 00 00 00 |.The Beatles....| 000000b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00000100 d7 09 80 60 60 ac 98 09 ae 04 cf a5 ea a9 d7 15 |...``...........| 00000110 80 ac 1d 21 d6 1c 80 60 60 ac 98 09 ae 04 cf 20 |...!...``...... | 00000120 75 0b 00 00 ac 0a 95 a5 f0 b0 a9 a6 b1 a9 a4 b1 |u...............| 00000130 a5 f1 b0 a9 a7 b1 a9 a5 b1 ac c0 08 cf 20 75 0b |............. u.| 00000140 fe ff a5 37 ae 8c ff 00 c0 d8 4b 80 cf a5 f0 b0 |...7......K.....| 00000150 a7 a6 b1 c0 d8 60 80 a5 f1 b0 a7 a7 b1 c0 d8 60 |.....`.........`| 00000160 80 cf a5 f0 b0 a7 a6 b1 00 00 09 00 01 5d f6 00 |.............]..| 00000170 00 00 00 09 00 09 00 01 66 f6 00 00 00 00 54 00 |........f.....T.| 00000180 50 00 01 b1 f6 69 64 65 20 12 00 42 00 01 6f f6 |P....ide ..B..o.| 00000190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 000001a0 00 00 00 00 00 00 00 52 65 76 6f 6c 76 65 72 00 |.......Revolver.| 000001b0 54 68 65 20 42 65 61 74 6c 65 73 00 00 4c 65 6e |The Beatles..Len| 000001c0 6e 6f 6e 2d 4d 63 43 61 72 74 6e 65 79 2d 48 61 |non-McCartney-Ha| 000001d0 72 72 69 73 6f 6e 00 47 65 6f 72 67 65 20 4d 61 |rrison.George Ma| 000001e0 72 74 69 6e 00 00 00 00 00 41 74 6f 6d 20 48 65 |rtin.....Atom He| 000001f0 61 72 74 20 4d 6f 74 68 65 72 00 50 69 6e 6b 20 |art Mother.Pink | 00000200 46 6c 6f 79 64 00 00 57 61 74 65 72 73 2d 47 69 |Floyd..Waters-Gi| 00000210 6c 6d 6f 75 72 2d 4d 61 73 6f 6e 2d 57 72 69 67 |lmour-Mason-Wrig| 00000220 68 74 2d 47 65 65 73 6f 6e 00 50 69 6e 6b 20 46 |ht-Geeson.Pink F| 00000230 6c 6f 79 64 00 00 00 00 |loyd....| 00000238 This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. Cardfiles are stored much more efficiently. Here's the entirety of our two cards. The fields are in the header, padded out to the fixed 12 character length, but with technically unnecessary nulls between them. A spurious "Beatles" entry looks like a buffer that was captured as part of the save, and there is also a page-aligned (counting the starting address) pad of nulls. Otherwise, the value strings look null-delimited, in the order they appear in the field list (unpopulated fields are zero-length strings). When you run out of fields, you're on the next card. % hexdump -C l.TESTLIST 00000000 00 7f 01 00 36 02 08 00 04 00 54 69 74 6c 65 20 |....6.....Title | 00000010 20 20 20 20 20 20 00 4c 65 61 64 20 41 72 74 69 | .Lead Arti| 00000020 73 74 20 00 4f 74 68 65 72 20 41 72 74 69 73 74 |st .Other Artist| 00000030 00 43 6f 6d 70 6f 73 65 72 20 20 20 20 00 43 6f |.Composer .Co| 00000040 6e 64 75 63 74 6f 72 20 20 20 00 57 68 65 72 65 |nductor .Where| 00000050 20 4b 65 70 74 20 20 00 42 6f 72 72 6f 77 65 64 | Kept .Borrowed| 00000060 20 62 79 20 00 44 61 74 65 20 4c 65 6e 74 20 20 | by .Date Lent | 00000070 20 00 00 00 ff ff 01 ff ff ff ff ff ff ff ff ff | ...............| 00000080 ff ff ff ff ff 00 01 02 03 04 05 06 07 00 01 02 |................| 00000090 03 04 05 06 07 ff ff ff ff ff ff ff ff ff ff 00 |................| 000000a0 00 54 68 65 20 42 65 61 74 6c 65 73 00 00 00 00 |.The Beatles....| 000000b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00000100 d7 09 80 60 60 ac 98 09 ae 04 cf a5 ea a9 d7 15 |...``...........| 00000110 80 ac 1d 21 d6 1c 80 60 60 ac 98 09 ae 04 cf 20 |...!...``...... | 00000120 75 0b 00 00 ac 0a 95 a5 f0 b0 a9 a6 b1 a9 a4 b1 |u...............| 00000130 a5 f1 b0 a9 a7 b1 a9 a5 b1 ac c0 08 cf 20 75 0b |............. u.| 00000140 fe ff a5 37 ae 8c ff 00 c0 d8 4b 80 cf a5 f0 b0 |...7......K.....| 00000150 a7 a6 b1 c0 d8 60 80 a5 f1 b0 a7 a7 b1 c0 d8 60 |.....`.........`| 00000160 80 cf a5 f0 b0 a7 a6 b1 00 00 09 00 01 5d f6 00 |.............]..| 00000170 00 00 00 09 00 09 00 01 66 f6 00 00 00 00 54 00 |........f.....T.| 00000180 50 00 01 b1 f6 69 64 65 20 12 00 42 00 01 6f f6 |P....ide ..B..o.| 00000190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 000001a0 00 00 00 00 00 00 00 52 65 76 6f 6c 76 65 72 00 |.......Revolver.| 000001b0 54 68 65 20 42 65 61 74 6c 65 73 00 00 4c 65 6e |The Beatles..Len| 000001c0 6e 6f 6e 2d 4d 63 43 61 72 74 6e 65 79 2d 48 61 |non-McCartney-Ha| 000001d0 72 72 69 73 6f 6e 00 47 65 6f 72 67 65 20 4d 61 |rrison.George Ma| 000001e0 72 74 69 6e 00 00 00 00 00 41 74 6f 6d 20 48 65 |rtin.....Atom He| 000001f0 61 72 74 20 4d 6f 74 68 65 72 00 50 69 6e 6b 20 |art Mother.Pink | 00000200 46 6c 6f 79 64 00 00 57 61 74 65 72 73 2d 47 69 |Floyd..Waters-Gi| 00000210 6c 6d 6f 75 72 2d 4d 61 73 6f 6e 2d 57 72 69 67 |lmour-Mason-Wrig| 00000220 68 74 2d 47 65 65 73 6f 6e 00 50 69 6e 6b 20 46 |ht-Geeson.Pink F| 00000230 6c 6f 79 64 00 00 00 00 |loyd....| 00000238 This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. % hexdump -C l.TESTLIST 00000000 00 7f 01 00 36 02 08 00 04 00 54 69 74 6c 65 20 |....6.....Title | 00000010 20 20 20 20 20 20 00 4c 65 61 64 20 41 72 74 69 | .Lead Arti| 00000020 73 74 20 00 4f 74 68 65 72 20 41 72 74 69 73 74 |st .Other Artist| 00000030 00 43 6f 6d 70 6f 73 65 72 20 20 20 20 00 43 6f |.Composer .Co| 00000040 6e 64 75 63 74 6f 72 20 20 20 00 57 68 65 72 65 |nductor .Where| 00000050 20 4b 65 70 74 20 20 00 42 6f 72 72 6f 77 65 64 | Kept .Borrowed| 00000060 20 62 79 20 00 44 61 74 65 20 4c 65 6e 74 20 20 | by .Date Lent | 00000070 20 00 00 00 ff ff 01 ff ff ff ff ff ff ff ff ff | ...............| 00000080 ff ff ff ff ff 00 01 02 03 04 05 06 07 00 01 02 |................| 00000090 03 04 05 06 07 ff ff ff ff ff ff ff ff ff ff 00 |................| 000000a0 00 54 68 65 20 42 65 61 74 6c 65 73 00 00 00 00 |.The Beatles....| 000000b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00000100 d7 09 80 60 60 ac 98 09 ae 04 cf a5 ea a9 d7 15 |...``...........| 00000110 80 ac 1d 21 d6 1c 80 60 60 ac 98 09 ae 04 cf 20 |...!...``...... | 00000120 75 0b 00 00 ac 0a 95 a5 f0 b0 a9 a6 b1 a9 a4 b1 |u...............| 00000130 a5 f1 b0 a9 a7 b1 a9 a5 b1 ac c0 08 cf 20 75 0b |............. u.| 00000140 fe ff a5 37 ae 8c ff 00 c0 d8 4b 80 cf a5 f0 b0 |...7......K.....| 00000150 a7 a6 b1 c0 d8 60 80 a5 f1 b0 a7 a7 b1 c0 d8 60 |.....`.........`| 00000160 80 cf a5 f0 b0 a7 a6 b1 00 00 09 00 01 5d f6 00 |.............]..| 00000170 00 00 00 09 00 09 00 01 66 f6 00 00 00 00 54 00 |........f.....T.| 00000180 50 00 01 b1 f6 69 64 65 20 12 00 42 00 01 6f f6 |P....ide ..B..o.| 00000190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 000001a0 00 00 00 00 00 00 00 52 65 76 6f 6c 76 65 72 00 |.......Revolver.| 000001b0 54 68 65 20 42 65 61 74 6c 65 73 00 00 4c 65 6e |The Beatles..Len| 000001c0 6e 6f 6e 2d 4d 63 43 61 72 74 6e 65 79 2d 48 61 |non-McCartney-Ha| 000001d0 72 72 69 73 6f 6e 00 47 65 6f 72 67 65 20 4d 61 |rrison.George Ma| 000001e0 72 74 69 6e 00 00 00 00 00 41 74 6f 6d 20 48 65 |rtin.....Atom He| 000001f0 61 72 74 20 4d 6f 74 68 65 72 00 50 69 6e 6b 20 |art Mother.Pink | 00000200 46 6c 6f 79 64 00 00 57 61 74 65 72 73 2d 47 69 |Floyd..Waters-Gi| 00000210 6c 6d 6f 75 72 2d 4d 61 73 6f 6e 2d 57 72 69 67 |lmour-Mason-Wrig| 00000220 68 74 2d 47 65 65 73 6f 6e 00 50 69 6e 6b 20 46 |ht-Geeson.Pink F| 00000230 6c 6f 79 64 00 00 00 00 |loyd....| 00000238 This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. This would be very easy to convert, and I just manually did this by dumping everything with strings for their one cardlist with one single record. Other things I can pick out are the file length minus the starting address at byte offset 4 (as a little-endian unsigned 16-bit quantity), and the value at byte offset 6 might be the number of fields, though we don't need either of those to simply grab the data. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. Now for the Janewrite files, starting with our test document which should contain every sort of text ornamentation that Janewrite can represent. The first section looks like this. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. % hexdump -C w.TESTCONV 00000000 00 88 01 00 21 00 00 00 46 00 05 00 47 00 34 03 |....!...F...G.4.| 00000010 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * 00000030 00 20 00 20 00 20 00 20 05 00 04 02 0a 50 01 05 |. . . . .....P..| 00000040 3d 42 01 01 6e 81 61 6e 61 20 61 62 72 83 65 83 |=B..n.ana abr.e.| 00000050 20 61 6c 82 6f 82 20 61 6c 84 65 00 01 6e 00 61 | al.o. al.e..n.a| 00000060 00 6e 00 61 00 20 00 61 00 62 00 72 03 65 00 20 |.n.a. .a.b.r.e. | 00000070 00 61 00 6c 02 6f 00 20 00 61 00 6c 04 65 00 20 |.a.l.o. .a.l.e. | 00000080 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 |. . . . . . . . | * Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. Skipping the start address (this is indeed its location in bank 1), we again see some pieces of what looks like a buffer, as well as the file length (again minus the starting address) at byte offset 14. The left margin is (probably) at byte offset 6 because the right margin is at byte offset 8 (also a 16-bit LE short), followed by the paragraph indent. After this header, we now get the text, shown here in its entirety. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. 000000a0 00 20 00 49 74 20 77 61 73 20 61 20 64 61 72 6b |. .It was a dark| 000000b0 20 61 6e 64 20 73 74 6f 72 6d 79 20 6e 69 67 68 | and stormy nigh| 000000c0 74 2e 00 90 49 74 90 20 90 77 61 73 90 20 90 61 |t...It. .was. .a| 000000d0 90 20 90 64 61 72 6b 90 20 90 61 6e 64 90 20 90 |. .dark. .and. .| 000000e0 75 6e 64 65 72 6c 69 6e 65 64 90 20 90 73 74 6f |underlined. .sto| 000000f0 72 6d 79 90 20 90 6e 69 67 68 74 2e 00 88 49 74 |rmy. .night...It| 00000100 88 20 88 77 61 73 88 20 88 61 88 20 88 64 61 72 |. .was. .a. .dar| 00000110 6b 88 20 88 61 6e 64 88 20 88 62 6f 6c 64 88 20 |k. .and. .bold. | 00000120 88 73 74 6f 72 6d 79 88 20 88 6e 69 67 68 74 2e |.stormy. .night.| 00000130 00 98 49 74 98 20 98 77 61 73 98 20 98 61 98 20 |..It. .was. .a. | 00000140 98 64 61 72 6b 98 20 98 61 6e 64 98 20 98 62 6f |.dark. .and. .bo| 00000150 6c 64 98 20 98 61 6e 64 98 20 98 75 6e 64 65 72 |ld. .and. .under| 00000160 6c 69 6e 65 64 98 20 98 73 74 6f 72 6d 79 98 20 |lined. .stormy. | 00000170 98 6e 69 67 68 74 2e 00 00 a0 49 74 a0 20 a0 77 |.night....It. .w| 00000180 61 73 a0 20 a0 61 6c 73 6f a0 20 a0 73 75 70 65 |as. .also. .supe| 00000190 72 73 63 72 69 70 74 65 64 a0 20 20 c0 61 6e 64 |rscripted. .and| 000001a0 c0 20 c0 73 75 62 73 63 72 69 70 74 65 64 2e c0 |. .subscripted..| 000001b0 20 20 2e 2e 2e 20 62 75 74 20 6e 6f 74 20 62 6f | ... but not bo| 000001c0 74 68 2c 00 61 6e 64 20 6e 6f 74 20 63 6f 6d 62 |th,.and not comb| 000001d0 69 6e 65 64 20 77 69 74 68 20 75 6e 64 65 72 6c |ined with underl| 000001e0 69 6e 69 6e 67 20 6f 72 20 62 6f 6c 64 2e 00 00 |ining or bold...| 000001f0 48 65 20 6c 65 66 74 20 6a 75 73 74 69 66 69 65 |He left justifie| 00000200 64 20 68 69 6d 73 65 6c 66 2e 00 ff 58 48 65 20 |d himself...XHe | 00000210 72 69 67 68 74 20 6a 75 73 74 69 66 69 65 64 20 |right justified | 00000220 68 69 6d 73 65 6c 66 2e 00 ff 24 48 65 20 70 75 |himself...$He pu| 00000230 74 20 68 69 6d 73 65 6c 66 20 72 69 67 68 74 20 |t himself right | 00000240 69 6e 20 74 68 65 20 63 65 6e 74 72 65 2e 00 ff |in the centre...| 00000250 0a 48 65 20 6d 61 64 65 20 65 76 65 72 79 74 68 |.He made everyth| 00000260 69 6e 67 20 65 78 70 61 6e 64 20 6f 75 74 2c 20 |ing expand out, | 00000270 61 20 70 61 72 61 67 72 61 70 68 20 65 78 74 65 |a paragraph exte| 00000280 6e 64 69 6e 67 20 6f 76 65 72 20 6d 75 6c 74 69 |nding over multi| 00000290 70 6c 65 00 ff 0a 6c 69 6e 65 73 2c 20 61 20 66 |ple...lines, a f| 000002a0 72 61 67 6d 65 6e 74 20 74 68 61 74 20 62 65 63 |ragment that bec| 000002b0 61 6d 65 20 61 6e 20 69 63 6f 6e 20 75 6e 74 6f |ame an icon unto| 000002c0 20 69 74 73 65 6c 66 2e 00 00 61 82 61 86 61 87 | itself...a.a.a.| 000002d0 61 82 61 81 20 61 6e 64 20 6e 65 78 74 20 41 82 |a.a. and next A.| 000002e0 41 86 41 87 41 82 41 81 20 6e 65 78 74 20 6e 82 |A.A.A.A. next n.| 000002f0 6e 86 6e 87 6e 82 6e 81 20 6e 65 78 74 20 4e 82 |n.n.n.n. next N.| 00000300 4e 86 4e 87 4e 82 4e 81 20 6d 61 81 6e 81 61 6e |N.N.N.N. ma.n.an| 00000310 61 20 61 62 72 83 65 83 20 61 6c 82 6f 82 20 61 |a abr.e. al.o. a| 00000320 6c 84 65 00 00 00 00 00 00 00 00 00 00 00 00 00 |l.e.............| 00000330 00 00 00 00 00 00 |......| Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. Most of the document again can be trivially understood as null-delimited strings. Notice that no single line ever exceeds 80 columns in length: as we demonstrated above, there are no Dana paragraphs, only Zuul lines. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. There are also various meta-sequences for the formatting. We can pick out the easy ones right away: $90 turns on and off underlining (interesting that Jane automatically skips spaces, much as would be the convention on a typewriter), $88 bold, $98 bold and underlined, $a0 superscript and $c0 subscript. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. For justification, we can infer that a line starting with $ff indicates different formatting for that line. A superficial guess would suppose the next character sets the justification type, e.g. $58 right, $24 centre, and $0a full justification (left justification is the default and implied). However, looking at some of the family's files, there were other values here, many of which were close to those numbers but many that were also rather disparate, and none that exceeded $8c (140). Eventually it became clear that all it indicates is the number of leading spaces divided by two, or more generally stated, all levels of justification are simply baked into the document and pre-calculated with spaces. This is entirely consistent with the lack of automatic reflow we saw while in Janewrite. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. Accents are also a little odd. If we take the last four words with single accents, then the ornamented letter would seem surrounded by the metacharacter: $81 $63 $81 for ñ (CTRL-@), $82 $6f $82 for ô (^), $83 $65 $83 for é (CTRL-;) and $84 $65 ($84) for è (CTRL-*), though since it occurs at the end of the line it would be cancelled anyway. An experiment I did showed that this is true for multiple characters as well, as long as they're all the same diacritic. So far so good, but the strange part is alternating between multiple accented characters back to back with different accents. Our letter sequences are unaccented, circumflex, grave, acute and tilde, yet the metacharacters seem to change between the $82s, after which we drop down to $81 following the final character which sounds like the delimiter itself changed too. This is the same pattern for each of the other multibyte clusters in this example. I did a test document with "ãâáàa" (i.e., ascending metacharacters $81 $82 $83 $84) and got $81 $61 $83 $61 $81 $61 $87 $61 $84 $61, while "àáâãa" (descending $84 $83 $82 $81) is rendered $84 $61 $87 $61 $81 $61 $83 $61 $81 $61, "áàãâa" (i.e., $83 $84 $81 $82) is rendered $83 $61 $87 $61 $85 $61 $83 $61 $82 $61, and "àâáãa" (i.e., $84 $82 $83 $81) comes out $84 $61 $86 $61 $81 $61 $82 $61 $81 $61. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. A couple of Pibb Xtras later, I finally realized what it was doing: it's exclusive-ORing the low nybble of adjacent metacharacters together so that it recognizes them as continuations (or, if the sequence is over, zero). Because of the specific values used, they won't generate any other valid metacharacter. To encode $81 $82 $83 $84, 1 is XORed with 2 and the high bit restored to yield $83, 2 is XORed with 3 to yield $81, 3 is XORed with 4 to yield $87 and then $84 is the expected terminal delimiter. To decode the resulting $81 $83 $81 $87 $84, $81 is used as the initial delimiter, then 1 is XORed with 3 to yield $82, then this is used as the next low nybble XORed with 1 to yield $83, then 3 is XORed with 7 to yield $84, and then 4 XOR 4 is 0, ending the sequence. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. This is a little complex to model and I didn't need it to convert the family files, so I went with this small Perl script which converted them to RTF, preserving boldface, underline, superscripting and subscripting, and the leading indent. It was also an excuse to learn how to write RTF documents from scratch, though please don't consider its output to be particularly good RTF. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. #!/usr/bin/perl eval 'use bytes'; $crlf = "\015\012"; # magic read from either ARGV or STDIN, set ARGV filehandle # splitting it up into bytes was to analyze the header $/ = \163; @header = map { ord } split(//, <>); # get header die("abnormally short\n") if (scalar(@header) != 163); $/ = "\00"; # lines are null-separated print STDOUT "{\\rtf1\\ansi{\\fonttbl\\f0\\fmodern\\fprq1 Courier;}\\f0\\fs20\\pard${crlf}"; while(<ARGV>) { chop; # not chomp $bold = 0; $under = 0; $bunder = 0; $sup = 0; $sub = 0; # load indent if (s/^\xff([\x00-\xff])//) { $_ = " " x (ord($1)/2) . $_; } # force NBSP because Word thinks it's smarter than we are s/ /\\u160;/g; unless (/[\x80-\xff]/) { print STDOUT "$_\\par$crlf"; next; } foreach (map { ord } split(//, $_)) { unless ($_ & 128) { print STDOUT chr($_); next; } if ($_ == 136) { $bold ^= 1; print STDOUT "\\b$bold "; next; } if ($_ == 144) { $under ^= 1; print STDOUT "\\ul$under "; next; } if ($_ == 152) { $bunder ^= 1; print STDOUT "\\ul$bunder\\b$bunder "; next; } # XXX: sup/sub looks fine in Mac Text Edit, wrong in Word # because it shrinks the font as well if ($_ == 160) { $sup ^= 1; print STDOUT (($sup) ? '{\super ' : '}'); }; if ($_ == 192) { $sub ^= 1; print STDOUT (($sub) ? '{\sub ' : '}'); }; # XXX: accented characters not yet implemented } print STDOUT '\b0' if ($bold || $bunder); print STDOUT '\ul0' if ($under || $bunder); print STDOUT '}' if ($sub || $sup); # shouldn't be nested print STDOUT "\\par$crlf"; } print STDOUT "}$crlf"; I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. I relentlessly tested the output against TextEdit, NeoOffice, LibreOffice and Microsoft Word on the Mac, and Word on my office PC, and concluded there was no good way to make them all happy. Since Janewrite is strictly non-proportional and character-oriented, the resulting document has to be monospace and spaces must be fixed-width to preserve the original formatting. TextEdit was the most flexible about this, accepted nearly anything, and rendered it as expected. Word, however, thought it was smarter than my carefully crafted output and changed the width of spaces even with an explicitly monospace font such that things failed to line up. The solution was to make it use a non-blocking space, which TextEdit also serenely accepts (though it wanted an explicit delimiter, not just a space character), but which shows up as a block character in NeoOffice and LibreOffice. I gave up at that point and declared it good enough. Change the above if you disagree. Maybe I should have done this in HTML because everything renders HTML the same, right? (Right??) A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. A residual problem is that superscript and subscript in Word, NeoOffice and LibreOffice also reduce the font size, which is not consistent with Jane and also messes up alignment, and there didn't seem to be a way to manually specify the vertical baseline in RTF but keep the same font size to get around that. Once again, only TextEdit's output properly resembles Janewrite's. This is another exercise left for the reader since I didn't need that to convert their documents either. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. With our task complete, let's finish the story of Jane. The Atari 8-bit and IBM PC ports likewise never materialized, but Jane was ultimately ported to one more — and, outside its home country of France, rather obscure — system: the 1985 Thomson MO5, manufactured by French electronics company Thomson SA (now Vantiva SA), which had recently been nationalized out of Thomson-Brandt and Thomson-CSF by French president François Mitterand in 1982. The Thomson home computers were all based on a 1MHz Motorola 6809E CPU with various custom video chips and produced from 1982 to around 1989. They broadly divide into the more upmarket TO-class and the entry-level MO-class machines, ostensibly compatible within lines, though I'll demonstrate that this is not always the case. The MO5 was the second of these systems, an enhanced version of the original TO7 with 48K of RAM and an improved colour palette, developed as terminals ("nanomachines") for the French government's Plan Informatique pour Tous ("Computing for All") to introduce computers to French pupils and support domestic industry. It was sold against, and intended to compete directly with, the ZX Spectrum — particularly as initially sold with a Chiclet-style keyboard — and the Commodore 64. These screenshots were taken with the DCMOTO emulator. Not counting the unreleased Commodore 64 version, Jane for the MO5 is the only version of Jane that actually does come as a cartridge-floppy combination, and thus requires the optional CD 90-351 or CQ 90-028 floppy disk interface (only tape is supported by the base unit). Although the cartridge is a whopping 64K in size, MO5 Jane is still a three-disk system (i.e., apps, help and data). The cartridge appears to contain the MO5 Jane kernel and low-level drivers. Similar to Commodore and Jane 128, MO5 Jane was explicitly Thomson-badged and sold. When turned on with the cartridge installed, it immediately prompts (with a blue window) for the application floppy. The main screen. Like the TO7 before it, the MO5 comes with a light pen which Jane uses as its primary pointing device, and this is the only Jane port that officially uses one. It's not clear who (Thomson or Arktronics or a third party) did this port and I don't have a copy of the manual. However, I also strongly believe Howard Marks was personally involved with its development given his country of origin. Jane 128 and MO5 Jane are obviously related to each other, quite clearly more than either is related to the original Apple II version, and as such I'm not exactly sure which one came first — though my suspicion is still Jane 128, since it almost certainly built on already existing work for the 64, and would have been a higher corporate priority due to Commodore's larger install base. Indeed, MO5 Jane uses much the same colour scheme, icons and basic interface as Jane 128, though the STOP (not ARRET?) icon is oddly rendered in orange instead of red and there's no black anywhere despite the EFGJ03L video chip having both colours in its palette. With a single drive there ends up being a lot of disk swapping. A lot of disk swapping. The NEW icon and EXIT button are now NEUF and SORTIR, but the rest of the basic interface (modulo palette) is much the same, even the same lumpy file requester arrows. The online help remains available in bright flaring yellow and as good as it ever was, but that constant floppy cha-cha will dampen your interest to use it. The MO5 does not have hardware sprites, so the pointer is drawn by software and demonstrates that familiar Speccy-style colour clash. Probably because of the limited RAM, all three applications are simplified compared to the Apple and Commodore versions, in some cases drastically. Like Jane 128, there is no multitasking and windows are fixed, but there are other cuts. For example, here in Janewrite, there are no superscripts or subscripts, though accents are kept — it's French, after all — and it even supports umlauts and cedillas. This is done with the MO5's ACCENT key, which you press, release, and then press the desired key (such as ACCENT, E for ë, ACCENT, 6 for é and ACCENT, 9 for ç). Janelist now only supports two templates (plus create your own). Fortunately I can still keep my record collection in it. On the other hand, Janecalc is now just a basic spreadsheet — no templates at all — and the spreadsheet is even more limited to A-O (i.e., just 15 columns) and 25 rows. But probably the biggest limitation in MO5 Jane is that everything is 40 columns, even though the graphics hardware and 320x200 display are absolutely capable of the same "soft 80" display Jane 128 generates. For crying out loud, even the Apple II version had a 64-column option. It really makes you wonder what on earth that 64K of ROM in the cartridge is actually doing. I should mention as a postscript that MO5 Jane is quite finicky about the hardware configuration. Even with the lightly-modified MO5E export model some prompts get garbled, and on the network-enabled MO5 NR (or, presumably, an MO5 with the network upgrade installed) the cartridge is recognized but the machine immediately crashes when selected. It also won't run on the later MO6 and it was never ported to any other Thomson system. Run it only on the original. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. Although it's arguable which of the two is more powerful — the Apple II version is more flexible and more integrated, but the Commodore 128 version has a stronger interface, larger workspace and 80-column output — Jane 128 got similar reviews to Jane on the Apple II and some of the same criticism as well. RUN in March 1987 again approved of the interface, but complained about the sluggish performance — both on-screen and on-paper — and that the 80-column software output was hard to read compared to the VDC's native 80-column output, which the reviewer called "[t]he program's greatest flaw." The review also noted that printing a spreadsheet had to be stopped manually or it would merrily waste paper on empty cells until the entire sheet had been iterated over. Still, reviewer John Premack said it was "a must for beginners of all ages" and gave it a "B" grade overall. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. I don't think Commodore was expecting much from Jane, and it ably occupied the low-end niche that Goheen and Smith wanted it to, so perhaps that was enough. It certainly seems to have been for my Australian 128DCR's previous owners, because the entire family used it (even some brief school papers from their kid) and some documents are dated well into 1990, long after Jane — and for that matter the 128 itself — was off the market. That probably speaks well of its interface and its suitability to basic tasks. Jane was never available on any other systems and Commodore never released any updates, but Arktronics did work on at least one other port for Commodore: the original Textcraft for the Amiga 1000 in 1985. This seems to have been the last product Arktronics was involved in, after which it went under as the new 16-bit systems made its flagship software package obsolete. That same year five employees, including at least two of the original Apple II programmers, sued Arktronics and Marks and Kotick personally (Mantei v. Arktronics) over their now worthless shares, saying they had been misled. In 1989, after protracted litigation, Kotick was ordered to honour the settlement of $17,000 [$44,500 in 2025 dollars] and again in 1998, by then increasing to $49,226 with interest [$96,500]. (In 2022, one of the plaintiffs, John Wiersba, said he was still never paid, an assertion which Kotick's spokesman disputed.) But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. But this was all likely a mere distraction to Marks and particularly Kotick, who in 1987 turned around to make an audacious if unsuccessful attempt to buy Commodore, believing the Amiga could lead a comeback in computer gaming after the 1983 video game crash. Commodore managed to rebuff him and in 1991 Kotick, Marks and their partners executed a hostile takeover of another target instead for just $440,000 [about $1.15 million], an ailing software company called Mediagenic. Mediagenic had a long prior history in video games, but believed the field was unlikely to rebound, and was in the midst of an unsuccessful effort to broaden into productivity software. Kotick, who had just left that market segment, disagreed and reconstituted the company back into its prior business and under its former name: Activision. In the process Kotick didn't forget his previous benefactor and Steve Wynn ended up with a million and a half shares in the new company, which became so successful in its revitalized form that in 2012 Wynn commented in amazement to the New York Times that "[t]he kid [Kotick] was telling me I had $31 million I didn't know about." Despite Activision's stratospheric rebirth, Kotick's leadership became nearly as controversial as it was profitable. Although Marks entered as the new Activision's chairman, by the late 1990s his relationship with his college friend had frayed over what Marks called Kotick's willingness to battle over even trivial sums of money, and he left the company in 1997. After a new business software venture called eMinds failed, in 2004 Marks bought out the trademark of the defunct Acclaim Entertainment to form a new Acclaim Games focusing on the MMO market, which he sold in 2010 and flamed out just months later. Marks subsequently co-founded equity crowdfunding platform StartEngine, where he remains the CEO. Meanwhile, Kotick steered Activision through its 2008 $18.9 billion merger with Vivendi Games and its Blizzard subsidiary, becoming Activision Blizzard and for a time the largest video games publisher in the world, its 2013 split back out from Vivendi, lawsuits over toxic workplace allegations, and Microsoft's 2022 buyout for $68.7 billion under which Kotick left the company at the end of 2023. It isn't clear who retains the rights and IP to Jane today, though at least for the Apple II version they likely remain split between Marks and Kotick personally and possibly Wynn, while Cloanto and Vantiva retain joint rights to the Commodore 128 and Thomson MO5 versions. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. As for Sig Hartmann, arguably the father of Commodore's software division, he passed away in 2014. Post a Comment Comments are subject to moderation. Be nice. Comments are subject to moderation. Be nice.
--------------------------------------------------

Title: After Zuckerberg spent billions on an AI 'dream team,' he has to deliver for Meta shareholders
URL: https://www.cnbc.com/2025/06/21/metas-zuckerberg-has-to-win-ai-after-billions-spent-on-dream-team.html
Time Published: 2025-06-21T10:28:22Z
Description: Meta CEO Mark Zuckerberg has been on a two-week spending binge, hiring the priciest AI developers in an effort to make up for past setbacks.
--------------------------------------------------

Title: Amazon, Microsoft, Meta, Intel and more: List of top US tech giants that have announced mass layoffs in 2025
URL: https://economictimes.indiatimes.com/default-subsec/global-trends/amazon-microsoft-meta-intel-and-more-list-of-top-us-tech-giants-that-have-announced-mass-layoffs-in-2025/articleshow/121989752.cms
Time Published: 2025-06-21T07:59:29Z
Full Content:
(Catch all the Business News, Breaking News, Budget 2025 Events and Latest News Updates on The Economic Times.) Subscribe to The Economic Times Prime and read the ET ePaper online. (Catch all the Business News, Breaking News, Budget 2025 Events and Latest News Updates on The Economic Times.) Subscribe to The Economic Times Prime and read the ET ePaper online. Pentagon threatens Iran as Hegseth spills Op details Us-Iran war: Sareen explains messy geopolitical situation ‘Red line crossed, West betrayed us': Iran Owaisi torches Pakistan after Trump bombs Iran Trump warns Iran of retaliatory action 'Iran's moves on Sea routes will have serious…' India reacts to US bombing Iran nuclear sites ‘US crossed red line by hitting our nukes’: Iran Hegseth, Caine drop bombshells on US strikes in Iran Trump announces bombing of nuclear sites in Iran Hot on Web In Case you missed it Top Searched Companies Top Calculators Top Definitions Top Commodities Top Slideshow Private Companies Top Prime Articles Top Story Listing Latest News Follow us on: Find this comment offensive? Choose your reason below and click on the Report button. This will alert our moderators to take action Reason for reporting: Your Reason has been Reported to the admin. Log In/Connect with: Will be displayed Will not be displayed Will be displayed Worry not. You’re just a step away. It seems like you're already an ETPrime member with Login using your ET Prime credentials to enjoy all member benefits Log out of your current logged-in account and log in again using your ET Prime credentials to enjoy all member benefits. Big Price Drop! Flat 40% Off Offer Exclusively For You Save up to Rs. 700/- ON ET PRIME MEMBERSHIP Offer Exclusively For You Get 1 Year Free With 1 and 2-Year ET prime membership Offer Exclusively For You Get 1 Year Free With 1 and 2-Year ET prime membership Offer Exclusively For You Get Flat 40% Off Then ₹ 1749 for 1 year Offer Exclusively For You ET Prime at ₹ 49 for 1 month Then ₹ 1749 for 1 year Special Offer Get flat 40% off on ETPrime What’s Included with ETPrime Membership Trump temper on H-1B visas is forcing Indians to do these things to stay put in US What Adani’s US indictment means for India Inc’s overseas fundraising Why veterans like Reliance, L&T are on acquisition spree? Aswath Damodaran has an answer. Will China’s dollar bond sale in Saudi Arabia trump the US in financial world? Huawei launches its own OS to compete with Google and Apple. But can it win beyond China? The problem with lab grown diamonds Why a falling rupee is a better option for the economy A list of top 20 momentum stocks that have delivered massive returns in one year Investment Ideas Grow your wealth with stock ideas & sectoral trends. Stock Reports Plus Buy low & sell high with access to Stock Score, Upside potential & more. BigBull Porfolio Get to know where the market bulls are investing to identify the right stocks. Stock Analyzer Check the score based on the company's fundamentals, solvency, growth, risk & ownership to decide the right stocks. Market Mood Analyze the market sentiments & identify the trend reversal for strategic decisions. Stock Talk Live at 9 AM Daily Ask your stock queries & get assured replies by ET appointed, SEBI registered experts. ePaper - Print View Read the PDF version of ET newspaper. Download & access it offline anytime. ePaper - Digital View Read your daily newspaper in Digital View & get it delivered to your inbox everyday. Wealth Edition Manage your money efficiently with this weekly money management guide. TOI ePaper Read the PDF version of TOI newspaper. Download & access it offline anytime. Deep Explainers Explore the In-depth explanation of complex topics for everyday life decisions. Health+ Stories Get fitter with daily health insights committed to your well-being. Personal Finance+ Stories Manage your wealth better with in-depth insights & updates on finance. New York Times Exclusives Stay globally informed with exclusive story from New York Times. TimesPrime Subscription Access 20+ premium subscriptions like Spotify, Youtube & more. Docubay Subscription Stream new documentaries from all across the world every day. Leadership | Entrepreneurship People | Culture Leadership | Entrepreneurship People | Culture Leadership | Entrepreneurship People | Culture Leadership | Entrepreneurship People | Culture Leadership | Entrepreneurship People | Culture Stories you might be interested in
--------------------------------------------------

Title: Report: Apple has held internal discussions about acquiring Perplexity
URL: https://siliconangle.com/2025/06/20/report-apple-held-internal-discussions-acquiring-perplexity/
Time Published: 2025-06-20T23:42:00Z
Full Content:
UPDATED 19:42 EDT / JUNE 20 2025 by Maria Deutscher Apple Inc. executives have held discussions about buying Perplexity AI Inc., Bloomberg reported today. The publication cited sources as saying that the talks are in an early stage and may not lead to an acquisition. Perplexity reportedly received a $14 billion valuation in a recent funding round. To be accepted, any takeout offer made by Apple would likely have to be higher. San Francisco-based Perplexity operates a consumer-focused search engine powered by artificial intelligence models. Rather than returning a list of webpages in response to queries, the service generates a natural language response. It can also visualize stock price changes, analyze user-uploaded files and perform other tasks. Perplexity had more than 15 million monthly users last April, a number that has likely increased significantly since then. The company recently disclosed that it processed 780 million user requests in May. Moreover, the volume of queries that it receives is growing by 20% every month. Perplexity generates revenue by offering two paid editions of its search engine. The first, Perplexity Pro, gives users access to reasoning models from providers such as OpenAI. There’s also an Enterprise Pro plan geared towards large organizations. Perplexity’s other revenue source is its Sonar suite of application programming interfaces for developers. Using the APIs, software teams can embed the core features of the company’s search engine into their custom applications. Adrian Perica, Apple’s vice president of corporate development, has reportedly discussed the idea of buying Perplexity with a number of other executives. It’s believed the search provider wasn’t involved in the talks. However, Apple representatives did meet with Perplexity executives multiple times recently to discuss its technology. Today’s report follows an unsuccessful attempt by Meta Platforms Inc. to acquire Perplexity. According to Bloomberg, the Facebook parent walked away from the deal over disagreements about financial terms. Meta later made a $14.3 billion investment in Scale AI Inc., a startup that supplies training datasets for AI development projects. It’s believed that Apple could eventually decide to partner with Perplexity instead of buying it. Such an arrangement would likely cost significantly less. Additionally, it would have a lower chance of drawing scrutiny from antitrust regulators. The acquisition discussions come against the backdrop of a high-profile antitrust trial over Google LLC’s search business. Currently, the Alphabet unit pays Apple billions of dollars annually to keep its search engine the default option on iOS. The lawsuit could potentially require the companies to end the payments. If that happens, Apple may be more inclined to partner with Google competitors such as Perplexity. Perplexity is not the only AI startup that has drawn takeover interest. According to CNBC, Meta recently tried to buy Safe Superintelligence Inc., a company co-founded by former OpenAI Chief Scientist Ilya Sutskever. After the offer was rebuffed, the Facebook parent reportedly shifted its focus to recruiting the startup’s top executives. THANK YOU Report: Apple has held internal discussions about acquiring Perplexity Meta debuts $399 AI-powered Oakley Meta HSTN smart glasses Agentic AI is the disruption du jour at this year’s TM Forum DTW Ignite conference Andy Jassy says AI will reduce Amazon's workforce, but at least he's honest about it OpenAI exec warns of growing risk that AI could aid in biological weapons development SpaceX competitor Eutelsat raising €1.35B in new funding Report: Apple has held internal discussions about acquiring Perplexity AI - BY MARIA DEUTSCHER . 8 MINS AGO Meta debuts $399 AI-powered Oakley Meta HSTN smart glasses IOT - BY MARIA DEUTSCHER . 4 HOURS AGO Agentic AI is the disruption du jour at this year’s TM Forum DTW Ignite conference AI - BY GUEST AUTHOR . 7 HOURS AGO Andy Jassy says AI will reduce Amazon's workforce, but at least he's honest about it AI - BY ROBERT HOF . 9 HOURS AGO OpenAI exec warns of growing risk that AI could aid in biological weapons development AI - BY MIKE WHEATLEY . 1 DAY AGO SpaceX competitor Eutelsat raising €1.35B in new funding EMERGING TECH - BY MARIA DEUTSCHER . 1 DAY AGO
--------------------------------------------------

Title: isa-model-sdk added to PyPI
URL: https://pypi.org/project/isa-model-sdk/
Time Published: 2025-06-20T22:57:47Z
Full Content:
Please enable JavaScript to proceed.
--------------------------------------------------

Title: Crypto stocks soar after Senate passes stablecoin bill, Circle up over 50%
URL: https://fortune.com/crypto/2025/06/20/crypto-stocks-soar-after-senate-passes-stablecoin-bill-circle-up-over-50/
Time Published: 2025-06-20T15:35:44Z
Full Content:
Catherine McGrath is a crypto fellow at Fortune. Shares of the first publicly-traded stablecoin company Circle continued to surge on Friday after the Senate passed legislation that would establish a regulatory framework for stablecoins, a type of cryptocurrency designed to maintain a value in line with the U.S. dollar, earlier this week. Shares of Circle are up 53%, soaring from $148 to $227, since the market opened on Wednesday after the legislation passed in the Senate on Tuesday night. Shares of other crypto-related companies increased on the news with Coinbase, the leading crypto exchange in the U.S., gaining 20% since Wednesday. The legislation, known as the GENIUS act, is a first-of-its-kind bill that would establish regulations and consumer protections for stablecoin companies, including full reserve backing, monthly audits, and anti-money laundering compliance. After passing in the Senate, it will be sent to the House of Representatives for a vote and potential revisions. Circle issues USDC, the second-largest stablecoin by market cap behind Tether’s USDT. Circle CEO Jeremy Allaire expressed his support for the bill in a post on X after the Senate vote on Tuesday night. “History is being made, as the US Senate passes the GENIUS Act, taking us one step closer to breakthrough legislation being signed into law that will drive U.S. economic and national competitiveness for decades to come,” he wrote. The surge in Circle’s stock price comes weeks after the company’s debut on the stock market under the ticker CRCL. After pricing its shares at $31, CRCL opened on the New York Stock Exchange at $69. Within its first day on the market, the company’s shares soared to a high of $103.75 before closing at $82.23, showcasing strong retail demand for access to the stablecoin industry. Since 2021, stablecoins have become increasingly popular outside of the U.S. as a means to settle cross-border transfers and protect assets against inflation. Crypto firms, however, have long complained that the U.S. stablecoin industry has been hindered by a lack of clear regulations, especially under Biden-era Securities and Exchange Commission (SEC) chair Gary Gensler who initiated dozens of investigations and enforcement actions against crypto companies. The Senate’s passage of the GENIUS act was aided by President Donald Trump’s vocal support of the broader crypto industry. In addition to pushing for Congress to pass the stablecoin bill, Trump has established a national Bitcoin reserve, pardoned crypto criminal Ross Ulbricht and appointed SEC officials that have ended a number of lawsuits against crypto companies. With support from the U.S. president and increasing regulatory clarity, mainstream corporations are considering implementing them into their payment structures, including Meta, Google, AirBnB and X. © 2025 Fortune Media IP Limited. All Rights Reserved. Use of this site constitutes acceptance of our Terms of Use and Privacy Policy | CA Notice at Collection and Privacy Notice | Do Not Sell/Share My Personal Information FORTUNE is a trademark of Fortune Media IP Limited, registered in the U.S. and other countries. FORTUNE may receive compensation for some links to products and services on this website. Offers may be subject to change without notice.
--------------------------------------------------

Title: Why Elon Musk’s US$34 billion loss wasn’t really that – and what it tells us about the philanthropy of the ultra-wealthy
URL: https://theconversation.com/why-elon-musks-us-34-billion-loss-wasnt-really-that-and-what-it-tells-us-about-the-philanthropy-of-the-ultra-wealthy-259176
Time Published: 2025-06-20T12:55:48Z
Full Content:
Professor of Management, University of St Andrews Tobias Jung does not work for, consult, own shares in or receive funding from any company or organization that would benefit from this article, and has disclosed no relevant affiliations beyond their academic appointment. University of St Andrews provides funding as a member of The Conversation UK. View all partners Following a sharp drop in Tesla’s share price, outlets reported that the world’s richest person, Elon Musk, had “lost” US$34 billion (£25 billion) in a single day. That figure exceeds the annual GDP of countries like Iceland, Jamaica or Mauritius. Gaining or losing even 0.001% of that wealth would be life-changing for most people. But, this “loss” is entirely nominal. A decline in share prices means Musk is technically worth less. If prices rebound, so does his net worth. While such volatility can devastate smaller investors reliant on their portfolios, it is a recurring feature of ultra-wealth. Consider the US$100 billion decline in Meta CEO Mark Zuckerberg’s fortune during his Metaverse pivot, or the US$18 billion drop Microsoft founder Bill Gates experienced during the 2008 financial crisis. These share price shifts may reduce billionaires’ net worth on paper, but they rarely affect their lifestyle. Where they do matter however is in philanthropy. Here, timing is everything. The higher the share price at the point of donation, the greater the tax benefit, and the more reputational capital to be locked in. This raises deeper questions about how philanthropic incentives are structured, and who ultimately benefits. Get your news from actual experts, straight to your inbox. Sign up to our daily newsletter to receive all The Conversation UK’s latest coverage of news and research, from politics and business to the arts and sciences. Although philanthropy is often associated with generosity, legacy or moral responsibility, these are only part of the picture. This is particularly true when it comes to major giving by the ultra-wealthy. Instead, from a wealth advisory perspective, one of the most strategically valuable (yet less publicly discussed) motivations is tax management. And, while many assume that philanthropy means donating money, tax systems often encourage the donation of appreciated assets, particularly shares, instead. As a worked example by the Bank of America illustrates, a US$50,000 donation in appreciated stock might easily present a tax benefit of almost US$10,000 over and above the tax benefits of donating the same amount in cash. Why is that? First of all, there is the potential of a tax deduction equal to the fair market value at the point of donation. The value of the asset at the point of donation is important for your tax deduction, not what you actually paid for it or whether its value is going to plunge in future. On top of that, there are opportunities to reduce other taxes too. This includes capital gains or inheritance taxes, the latter illustrated in the establishment of one of the world’s largest foundations, the Ford Foundation and its use as a vehicle to manage both inheritance tax and maintain corporate control. But the benefits of donating shares and other appreciated assets are not just financial. For high-profile donors, philanthropy also serves as a powerful tool for shaping public perceptions, projecting images of civic virtue, moral leadership, and social responsibility. It allows them to convert one form of capital, such as financial wealth, into others – social status, cultural influence or symbolic legitimacy. Volatile, appreciated and often bound-up assets can be unlocked and transformed into something far more enduring – a philanthropic legacy. Even if share prices plunge after the donation, the donor has already secured both a substantial tax benefit and a lasting philanthropic image. Tax management is a longstanding concern in philanthropy, particularly in relation to philanthropic foundations. But it really is donor advised funds (DAFs) that now warrant closer scrutiny as the real “warehouses of wealth”. Constituting one of the fastest-growing vehicles for philanthropy, DAFs act as “giving accounts”. They allow donors to claim charitable contributions and receive immediate tax deductions but without actually making an immediate charitable contribution to society. While donors technically give up ownership of these assets, they retain advisory privileges over whether and when resources are granted, to whom, and in what amounts. DAFs have no legal requirement to disburse funds within a specific timeframe. That means that any charitable spending can be delayed, potentially indefinitely, despite the upfront public subsidy via tax relief. All of these issues raise serious questions as to whether philanthropic architecture is ripe for reform. When donors can receive substantial tax and social benefits by donating volatile assets, regardless of whether or when they benefit the public, it seems that both society and the philanthropy field are shortchanged. First, significant resources are diverted from the public purse into privately controlled channels, often with limited oversight. Second, charitable giving is decoupled from charitable action or impact. Third, influence is consolidated – decisions about how public-subsidised funds are used are made not through democratic processes, but through private choice. The most corrosive effect, however, may be on philanthropy itself. As financial incentives and personal benefits are recast and presented as altruistic, the perception, purposes and potential of philanthropy for the public good risk being eroded and replaced by cynicism. This brings us back to Musk’s US$34 billion “loss”. While headlines framed it as a dramatic reversal of fortune, the real story lies not in the number but in the system behind it. For those whose wealth is held in stock, market volatility presents a tool for tax planning, image-making, strategic giving and long-term influence. What looks like loss may in fact be leverage. Write an article and join a growing community of more than 206,000 academics and researchers from 5,231 institutions. Register now Copyright © 2010–2025, The Conversation US, Inc.
--------------------------------------------------

Title: Bitcoin as corporate treasury: Why Meta, Amazon and Microsoft all said no
URL: https://cointelegraph.com/explained/bitcoin-as-corporate-treasury-why-meta-amazon-and-microsoft-all-said-no
Time Published: 2025-06-20T12:05:00Z
Description: Despite Bitcoin’s rise, major corporations like Meta, Amazon and Microsoft are steering clear of holding it in their treasuries, favoring stability over crypto risk.
--------------------------------------------------

Title: S&P To Crash 50%? Trump Calls Jerome Powell “Dumbest”
URL: https://www.forbes.com/sites/greatspeculations/2025/06/20/sp-to-crash-50-trump-calls-jerome-powell-dumbest/
Time Published: 2025-06-20T10:54:36Z
Full Content:
ByTrefis Team ByTrefis Team, Contributor. President Donald Trump reignited his long-standing feud with Federal Reserve Chair Jerome Powell on Thursday, calling him "one of the dumbest, and most destructive, people in Government [sic]". This is new territory. President Trump had mostly resisted from hurling direct insults against Fed Chair Powell in his second term. Not any more. Could this escalate into Trump firing Chair Powell over the next few months? The comment on social media followed the Fed’s decision to hold interest rates steady, with the Federal Open Market Committee maintaining its target range at 4.25% to 4.5% - unchanged since December. Trump has been calling for lower rates, noting that the Fed was costing the country billions in interest payments. Facade of the Marriner S Eccles building of the United States Federal Reserve, on a bright and sunny ... More day in Washington, DC, United States, July 24, 2017. (Photo by Smith Collection/Gado/Getty Images) Trump’s rhetoric sure does make headlines, but the real danger for investors is the Fed buckling under political pressure and cutting rates too soon. That could unleash a second wave of inflation, which might be more entrenched than the post-Covid surge. If that happens, expect a sharp reset in valuations, a spike in bond yields, and a steep correction in the S&P 500. Cutting interest rates before inflation is fully tamed risks igniting a more persistent cycle of price increases, forcing the Fed to respond later with even more aggressive hikes, just as it did in the 1970s, when inflation spiraled out of control. Is 50% drop in S&P possible? Consider this. Back then, the Fed’s delayed tightening led to stagflation and a severe equity downturn: the S&P 500 fell nearly 50% between 1972 and 1974. What’s more, higher valuations today, coupled with policy uncertainty, might actually make things worse. For investors seeking upside with less volatility than individual stocks, the Trefis High Quality portfolio offers an alternative. This portfolio has outperformed the S&P 500 and delivered cumulative returns of over 91% since inception. Trump's Policies Create The Perfect Storm? This time around, there is a risk of persistent supply-side inflation driven by policy. Trump’s policy agenda, which includes 3 things [1] tariffs, [2] mass deportations, and [3] tax cuts, could create a perfect storm of sorts. First, tariffs are a supply shock. They raise input costs and consumer prices by removing cheaper imports from the market. Second, mass deportations of immigrants who entered the country illegally sounds reasonable - after all, they’re illegal immigrants - except that it will make cheaper labor unavailable. On average, the price of services will go up. This could be a big factor driving inflation higher. Third, there are the tax cuts under Trump’s Big Beautiful Bill, under which most taxpayers are expected to see a tax cut, with all income groups reportedly likely to benefit. Now, while tariffs and deportations constrain the supply of goods and services to increase prices, reduction in taxes makes more cash available to consumers. So people can spend more while prices are higher. The result would be spiking inflation, and this would make the Fed’s job a lot harder. A Replay of the 1970s? The Fed will likely pull out its 2022 playbook: it’ll have no choice but to increase interest rates - not just reverting some of the recent cuts, but in fact, going beyond, to rates above 6% and even 7% or higher for short-term treasuries. Now, if you can get a guaranteed 6% on a 1-year Treasury bill, or bank savings - risk-free investments - won’t you demand higher earnings and returns from stocks as well? There will be an exodus - a massive outflow from the S&P and overall markets from risky equities into treasuries, CDs, and savings accounts. It happened in 2022 - within months, the S&P 500 tumbled by 20%. It’s easy to forget that stocks including Nvidia (NASDAQ:NVDA) and Meta (NASDAQ:META) had lost more than 50% in the 2022 rate cycle alone (Can Nvidia Stock Lose 50%?). Smaller companies, with less cash on their balance sheets, fared even worse. That said, in 2022, inflation was largely transitory, and the Fed was able to bring it under control. This time, it could be entrenched. Covid-related stimulus money was a transient cause of 2022 inflation. This time, tariffs, tax cuts, and deportations, together, are likely to prove a stronger and perhaps much more persistent force. A replaying of the 1970s crisis is very much possible, taking the S&P 500 down. Higher rates don’t just hurt stocks - they make U.S. debt less sustainable. Annual interest payments now already exceed $1 trillion, and JPMorgan CEO Jamie Dimon has called it a red flag. If bond markets start to question the government’s fiscal path, yields could spike, deepening the equity selloff. On top of that, loan defaults are rising both in the commercial real estate sector and across consumer debt, like credit cards and auto loans. Big lenders like JPMorgan, BofA, and Citigroup are especially exposed. So, how much would that hurt? Well, the combined market cap of S&P 500 constituents is roughly $47 trillion. So a 50% decline in the index would mean a loss of more than $23 trillion in value. And you thought the $5 trillion-plus wipeout the benchmark index witnessed in the first few days of April 2025 was bad! How Low Can JPMorgan Stock Go In A Market Crash? A Question When things are bad, what do you expect Trump to do? Blame everyone else, or change his course on taxes, deportation, and tariffs? There’s certainly hope that his cabinet and loyalists will be able to sway his view into easing inflationary policies in the event they create spiking inflation before the U.S. economy plunges into a recession. But if the easing does not materialize or comes into play too late, how bad can things get if there is another recession? Our dashboard How Low Can Stocks Go During A Market Crash captures how key stocks fared during and after the last seven market crashes. Invest with Trefis Market Beating Portfolios See all Trefis Price Estimates
--------------------------------------------------

Title: Article: Analyzing Apache Kafka Stretch Clusters: WAN Disruptions, Failure Scenarios, and DR Strategies
URL: https://www.infoq.com/articles/apache-kafka-stretch-cluster-failures/
Time Published: 2025-06-20T09:00:00Z
Full Content:
A monthly overview of things you need to know as an architect or aspiring architect. View an example We protect your privacy. Facilitating the Spread of Knowledge and Innovation in Professional Software Development Back to login Back to login Jordan Miller discusses the evolution of the Clojure ecosystem, from Rich Hickey's initial vision tackling complexity to its current status as a mature enterprise solution. He explains key philosophies, highlights pivotal moments like the "Simple Made Easy" talk, and showcases the vibrant Clojure community and its innovative tools. Architectural success in decentralized systems depends more on how decisions are made than on system design alone. Replacing control with trust requires visible, structured practices—such as ADRs and advice forums—to build confidence and clarity. David Berg and Romain Cledat discuss Metaflow, Netflix's machine learning infrastructure. They cover its use cases - from content recommendations to intelligent infrastructure - and delve into design principles that minimize cognitive load for developers, emphasizing productivity and efficient scaling. In this podcast, Shane Hastie, Lead Editor for Culture & Methods, spoke to Holly Cummins about productivity in creative knowledge work like software engineering. She talks about how "messing around and having fun" actually enhances problem-solving, while exploring the shift from coding to code management with AI tools and the importance of managing cognitive load in modern development practices. Proficient in analyzing the dynamics of Apache Kafka Stretch Clusters, I assess WAN disruptions and devise effective Disaster Recovery (DR) strategies. With deep expertise, I ensure high availability and data integrity across multi-region deployments. My insights optimize operational resilience, safeguarding vital services against service level agreement violations. Learn practical solutions to today's most pressing software challenges. Register now with early bird tickets. Explore insights, real-world best practices and solutions in software development & leadership. Register now. Learn how leading engineering teams run AI in production-reliably, securely, and at scale. Register now. InfoQ Homepage Articles Analyzing Apache Kafka Stretch Clusters: WAN Disruptions, Failure Scenarios, and DR Strategies Jun 20, 2025 31 min read by Srikanth Daggumalli Nishchai Jayanna Manjula reviewed by Steef-Jan Wiggers Apache Kafka is a well-known publish-subscribe distributed system widely used across industries for use cases such as log analytics, observability, event-driven architectures, and real-time streaming. Its distribution allows it to become the critical piece or backbone of modern streaming architecture, offering many integrations and supporting near-real-time or real-time latency requirements. Today, Kafka has been offered by major companies as a service, including Confluent Kafka as well as cloud offerings such as Confluent Cloud, AWS Managed Streaming Kafka , Google Cloud Managed Service for Apache Kafka, Azure Event Hub for Apache Kafka, etc. Additionally, Kafka has been deployed across over one-hundred-thousand companies, including Fortune 100 across various industry segments such as enterprise, financials, healthcare, automobile, startups, independent software vendors, and retail sectors. The value of the data diminishes over time. Many businesses these days compete in time and demand real-time data processing with millisecond responses to power mission-critical applications. Financial services, e-commerce, IoT, and other latency-sensitive industries require highly available and resilient architectures that can withstand infrastructure failures without impacting business continuity. Companies operating across multiple geographic locations need solutions that provide seamless failover, data consistency, and disaster recovery (DR) capabilities while minimizing operational complexity and cost. One of the common architectural patterns that companies often consider using is a single Kafka cluster spanning multiple data center locations on WAN (Wide Area Network). It is called Stretch Cluster. This pattern is commonly considered by companies for disaster recovery (DR) and high availability (HA). Stretch Cluster can theoretically provide data redundancy across regions and minimize data loss in the event of a region-wide failure. However, this approach comes with several challenges and trade-offs due to the inherent nature of Kafka and its dependency on network latency, consistency, and partition tolerance in a multi-region setup. In this article, we are going to focus on the stretch cluster architectural pattern for DR or HA-related implications and considerations. The following testing has been conducted, and the cluster behavior has been documented. Below is the high-level view of a single stretch cluster setup that spans across the London and Frankfurt regions with In this use case, we have used a producer written in Java that consistently produces defined (K) Transactions Per Second (aka TPS), which can be controlled using properties files. Sample snippets using Kafka performance test api. In this use case, we have used consumers written in Java that consistently consume defined (K) transactions per second (TPS), which can be controlled using properties files. Before diving into further discussions and scenario executions, it's crucial to understand the fundamental algorithms of distributed systems. This foundational knowledge will help you better correlate WAN disruptions with their impact on system behavior. CAP Theorem (i.e., Consistency, Availability, and Partition tolerance) applies to all the distributed systems like Kafka, Hadoop, Elasticsearch, and many others, where data is being distributed across nodes to: Consistency (C) Every read gets the latest write or an error. Availability (A) Every request gets a response, even if some nodes fail. Partition Tolerance (P) The system keeps working despite network issues. Kafka is an AP system; it prioritizes Availability and Partition Tolerance, while consistency is eventual and tunable via settings. Now, let's get into the scenarios. Before going in-depth into scenarios, let's understand the key components and terminology of Kafka internals. As discussed in earlier sections, in a distributed network setup across geographic locations, network service interruptions can occur because no service guarantees 100% availability. This scenario focuses on WAN disruption between two regions, causing Kafka service unavailability, leaving the cluster with zero active controllers and no self-recovery, even after hours of waiting. Kafka is unavailable and can't be recovered on its own upon WAN service disruption and reestablishment and shows active controllers as '0' It's a "brain-dead" scenario. Upon WAN disruption, a single 4-node cluster becomes 2 independent clusters, each with 2 nodes. WAN disruption can be done by deleting or modifying route tables. Warning: Deleting a route table may disrupt all traffic in the associated subnets. Instead, consider modifying or detaching the route table. You may need to shut down firewalls Firewall status: systemctl status firewalld Firewall stop: service firewalld stop ZK Server start: bin/zookeeper-server-start etc/kafka/zookeeper.properties ZK Server stop: zookeeper-server-stop ZK Shell commands: bin/zookeeper-shell.sh <zookeeper host>:2181 Active controllers check: get /controller or ls /controller Brokers list: /home/opc/kafka/bin/zookeeper-shell kafkabrokeraddress:2181 <<<"ls /brokers/ids" Alternative to check controllers and brokers in a cluster. Available from kafka 3.7.x bin/kafka-metadata-shell.sh --bootstrap-server <KAFKA_BROKER>:9092 --describe-cluster Kafka is not available and can't be recovered on its own upon WAN service disruption and re-establishment and shows active controllers as '2' Kafka is not available and couldn't be recovered on its own upon and showed active controllers as '0' From the logs, observed disk-related errors and exceptions Logs show that the controller moved the exception from one broker to another broker, but no exit or hang was reported in the logs Controllers '0' behavior is equal to the brain-dead scenario explained in scenario 2. Killing broker and ZK processes (an uncontrolled shutdown can be comparable with machine abrupt reboot) and restarting brokers lead to corrupted indices, rebuilding indices doesn't work even after hours of waiting. This scenario is comparable to an ungraceful shutdown during an environment upgrade or to a poor security posture, where an unauthorized person could terminate the service. Kafka is not available and couldn't be recovered on its own. From the logs, 'index corrupted' logs for partitions are shown, and also 'rebuilding indices logs'. Rebuilding indices didn't work and doesn't show any related logs on progress. The resulting cluster is in unavailable status even after 1 hour. Also, it is recommended to do graceful shutdowns instead of using the kill switch or doing abrupt shutdowns so the data in the Kafka local cache will be flushed to the disks by maintaining meta data information and also committing offsets. Deploying on-premise stretch clusters requires a deep understanding of failure scenarios, particularly during network disruptions. Unlike cloud environments, on-premises setups may lack highly available network infrastructure, fault tolerance mechanisms, or dedicated fiber lines, making them more susceptible to outages. In such cases, a Kafka cluster may experience downtime if network connectivity is disrupted. Cloud providers, on the other hand, offer high-bandwidth, low-latency networking over fully redundant, dedicated metro fiber connections between regions and data centers. Their managed Kafka services are designed for high availability, typically recommending deployment across multiple zones or regions to withstand zonal failures. Additionally, these services incorporate zone-awareness features, ensuring Kafka data replication occurs across multiple zones, rather than being confined to a single one. It is also important to understand and emphasize the latency impact on a stretch cluster deployed in two different Geo locations with a WAN connection. We can not escape physics; in our case, as per WonderNetwork, the average latency between London and Frankfurt is 14.88 milliseconds for a distance of 636km. So, for mission-critical applications, the setup of a stretch cluster driven by latencies, through testing, is needed to determine how the data is being replicated and consumed across. By understanding these differences, organizations can make informed decisions about whether an on-premise stretch cluster aligns with their availability and resilience requirements or if a cloud-native Kafka deployment is a more suitable alternative. A Business Continuity Plan (BCP) is essential for any business to maintain its brand and reputation. Almost all the companies think of High Availability (HA) and Disaster recovery (DR) strategies to meet their BCP. Below are the popular DR Strategies for Kafka. Before we dive deep into DR strategies further, let's understand that the Kafka Mirror Maker 2.0 we are using in the following architectural patterns. There are other components like Kafka Connect, Replicator, etc., offered by Confluent and other cloud services, but they are out of scope for this article. DNS Redirection in Apache Kafka is a cross-cluster replication tool that uses the Kafka Connect framework to replicate topics between clusters, supporting active-active and active-passive setups. It provides automatic consumer group synchronization, offset translation, and failover support for disaster recovery and multi-region architectures. This is a popular DR strategy pattern where there will be two different Kafka clusters, which are of identical size & configuration, deployed in two different Geo regions or Data centers. In this case, it's the London and Frankfurt regions. Usually, Geo location choice depends upon Earth's different tectonic plates, company or country compliance and regulations requirements, and other factors. Out of which only one cluster is active at a given point of time, which receives and serves the clients. As shown in the following picture, Kafka cluster one (KC1) is located in the London region and Kafka cluster two (KC2) is located in the Frankfurt region with the same size and configuration. All the producers are producing data to KC1 (London region cluster), and all consumers are consuming the data from the same cluster. KC2 (Frankfurt region cluster) receives the data from the KC1 cluster through Mirror Maker as shown in Figure 1. Figure 1: Kafka Active Standby (aka Active Passive) cluster setup with Mirror role In simple terms, we can treat the mirror maker as a combination of producer and consumer, where it consumes the topics from the source cluster KC1 (London region) and produces the data to the destination cluster KC2 (Frankfurt region). During the disaster to the primary/active cluster KC1 (London region), the standby cluster (Frankfurt region) will become active, and all the producers and consumers' traffic redirected to the standby cluster. This can be achieved through DNS redirection via a load balancer in front of Kafka clusters. Fig 2 shows this scenario. Figure 2: Kafka Active Standby setup - Standby cluster becomes active When the London Region KC1 cluster becomes active, we need to set up a mirror maker instance to consume the data from the Frankfurt region cluster and produce back to it to the London region KC1 cluster. This scenario is shown in Fig. 3. It's up to the business to keep the Frankfurt region (KC2) active or promote the London region cluster (KC1) back to primary once the data is fully synced/hydrated to the current state. In some cases, the standby cluster, i.e., the Frankfurt region cluster (KC2), continues to function like an active cluster and the London region cluster (KC1) becomes the standby as well. It is essential to note that RTO (Recovery Time Objective) and RPO (Recovery Point Objective) values are high compared to the Active-Active setup. Active-standby setup cost is medium to high as we need to maintain the same Kafka clusters in both regions. Figure 3: Kafka Active Standby setup – Standby cluster data sync happening to the KC1 Kafka Mirror Maker Replication Lag (Δ): Let's take a scenario, and it might happen very rarely, where we lose all the cluster completely, including nodes and disks, etc. Where the Active Kafka Cluster (London region - KC1) has 'm' messages, and the mirror maker is consuming and producing to the standby cluster. Due to network latency or consumers & producing process with acknowledgements, the standby cluster (i.e., Frankfurt region - KC2) lags behind and holds only 'n' messages. Which means the delta(\(\Delta\)) is m minus n. \(\Delta = m - n\) where: Due to this replication lag (\(\Delta\)), it will have the following impact on mission-critical applications Potential Message Loss: If a failover occurs before the Standby cluster catches up, some messages (\(\Delta\)) may be missing. Inconsistent Data: Consumers relying on the Standby cluster may process incomplete or outdated data. Delayed Processing: Applications depending on real-time replication may experience latency in data availability. The replication lag concern can be overcome with the Active-Active setup. Just like the Active standby setup, we will have the same Kafka clusters deployed in the London and Frankfurt regions. The producers of the ingestion pipeline will write the data to both clusters at any given point in time. Which is also known as Dual Writes. So, both clusters' data is in sync as shown in Fig. 4. Please note that the ingestion pipeline or producers should have the capability to support dual writes. It is also important to note that these write pipelines should be isolated so that any issue with one cluster should not impact other pipelines or create back pressure and producer latencies. For example, if your use case is log analytics or observability, considering Logstash in your ingestion and creating two separate pipelines within a single or more Logstash instances will act as an isolated pipeline. But only one cluster is active for the consumers at any given point of time. Figure 4: Active-Active setup or Dual writes. In case, as shown in Figure 5, any issues with the one cluster the consumers need to be redirected with DNS redirect and RTO and RPO or SLAs are near zero. Figure 5: Active-Active setup, one cluster is unavailable Once the London cluster is available and becomes active, data can sync back to the London cluster from the Frankfurt cluster using Mirror Maker. As shown in Fig. 6, consumers can be switched back to the London cluster using DNS redirect. Also, it is important to configure consumer groups to start where they left off. During this setup, during the failover, it is important to configure consumers' offset to read the messages from a particular point in time, like reply messages from the last current time minus 15 mins, or set up a mirror maker between active clusters to read 'only' consumer offset topics from the London region cluster and replicate to the Frankfurt region cluster. And during the failure, you can use source.auto.offset.reset=latest to read the data from the latest offsets in the Frankfurt region cluster. If the consumer groups are not properly configured, you may see duplicate messages in your downstream system. So, it's essential to design the downstream to handle duplicate records. For example, if it's an observability use case and if the downstream is OpenSearch, it's good practice to design a unique ID depending on the message timestamp and other parameters like session IDs, etc. So, that duplicate message will overwrite the existing duplicate record and maintain only one record. Figure 6: Active-Active setup cluster syncing data with MirrorMaker Message ordering challenges occur when writing to two clusters simultaneously, messages may arrive in different orders due to network delays between regions. This can be particularly problematic for applications that require strict message ordering. So, it needs to be handled in the data processing time or downstream systems. For example, defining a primary key within the message body timestamp field would order the messages based on timestamps. Data Consistency Issues can occur while establishing dual writes to two different clusters. It requires robust monitoring and reconciliation processes to ensure data integrity across clusters. Because there might be conditions where data might successfully write to one cluster but fail in another, resulting in data inconsistency. Producer complexity is an issue in this active-active setup. Producers need to handle writing to two clusters and manage failures independently for each cluster, so isolation of each pipeline is important. This setup might increase the complexity of the producer applications and require more resources to manage dual writes effectively. There are some agents or tools in the market also as open-source offerings that will provide dual pipeline options such as Elastic Logstash. Consumer group management is complex. Managing consumer offsets across multiple clusters could be challenging, especially during failover scenarios, and can lead to message duplication. Consumer applications or downstream systems need to be designed to handle duplicate messages or implement deduplication logic. Operational Overhead - Running active-active clusters requires sophisticated monitoring tools and increases operational costs significantly. Teams need to maintain detailed runbooks and conduct regular disaster recovery drills to ensure smooth failover processes. Network Latency Considerations- Cross-region network latency and bandwidth costs become critical factors in active-active setups. Reliable network connectivity between regions is essential for maintaining data consistency and managing replication effectively. Backup and restore is a cost-effective architectural pattern compared to Active Standby(AP) or Active Active(AA) DR architectural patterns. It is suitable for non-critical applications with higher RTO and RPO values compared to AA or AP patterns. Backup and restore is a cost-effective option because we need only one Kafka cluster. In case the Kafka cluster is unavailable, the data from the centralized repository can be replayed/restored to the Kafka cluster once it becomes available. In this architectural pattern, shown in Figure 7, all the data will be saved to a persistent location like Amazon S3 or another data lake, where the data can be restored/replayed to the Kafka cluster when the Kafka cluster is available. It is also common to see a new environment of Kafka clusters built together using terraform templates and build a new Kafka cluster and replay data. Figure 7: Backup and restore architectural pattern Recovery time impact is a major consideration; Restoring (aka replaying) large volumes of data to Kafka can take significant time, resulting in a higher RTO. This makes it suitable only for applications that can tolerate longer downtimes. Data consistency challenges are also an issue. When restoring data from backup storage like Amazon S3, maintaining the exact message ordering and partitioning as the original cluster can be challenging. Special attention is needed to ensure data consistency during restoration. Backup performance overhead is a further consideration. Regular backups to external storage can impact the performance of the production cluster. The backup process needs careful scheduling and resource management to minimize impact on production workloads. Storage is key. Managing large volumes of backup data requires effective storage lifecycle policies and controlling costs. Regular cleanup of old backups and efficient storage utilization strategies are essential. Coordination during recovery is mandatory. The recovery process requires careful coordination between backing up offset information and actual messages. Missing either can lead to message loss or duplication during restoration. As we explored earlier, choosing a DR strategy isn't one-size-fits-all, it comes with trade-offs. It often boils down to finding the right balance between what the business needs and what it can afford. The decision usually depends on several factors. SLAs (e.g., 99.99%+ uptime) are pre-defined commitments to uptime and availability. An SLA requiring 99.99% uptime allows only 52.56 minutes of downtime per year. The RTO metric is used to define the maximum acceptable downtime for a system or application after a failure before it causes unacceptable business harm. Knowledge/content/training systems, for example, can expect one hour or more downtime because they are not mission critical. For banking applications, on the other hand, downtime acceptance could be none or a couple of minutes. The RPO metric is used to define the maximum acceptable amount of data loss during a disruptive event, measured in time from the most recent backup. For example, an observability/monitoring application can have the acceptability for losing the past hour whereas a financial application can not tolerate losing a single record of transaction data. Associated costs vary. Higher availability and faster recovery typically come at a higher price. Organizations must weigh their need for uptime and data protection against the financial investment required. References: A round-up of last week’s content on InfoQ sent out every Tuesday. Join a community of over 250,000 senior developers. View an example We protect your privacy. A round-up of last week’s content on InfoQ sent out every Tuesday. Join a community of over 250,000 senior developers. View an example We protect your privacy. Join senior software developers for two days of real-world insights into today’s critical engineering priorities. With 25+ technical talks, uncover practical strategies for AI-native development, resilient and secure architectures, serverless adoption, platform engineering, and more. Learn from active senior practitioners at companies like Deutsche Telekom, Shopify, DKB, AWS, Zalando, and more, sharing actionable solutions. Register Now InfoQ.com and all content copyright © 2006-2025 C4Media Inc. Privacy Notice, Terms And Conditions, Cookie Policy
--------------------------------------------------

Title: Mark Zuckerberg Is ‘Doubling Down’ on AI and That’s Great News for META Stock
URL: https://www.barchart.com/story/news/32957565/mark-zuckerberg-is-doubling-down-on-ai-and-thats-great-news-for-meta-stock
Time Published: 2025-06-19T13:00:02Z
Description: Meta’s aggressive AI push is winning over Wall Street and putting shares firmly back in the tech spotlight.
--------------------------------------------------

Title: The 2025 Forbes World’s Most Influential CMOs List
URL: https://www.forbes.com/sites/sethmatlins/2025/06/19/the-2025-forbes-worlds-most-influential-cmos-list/
Time Published: 2025-06-19T10:30:00Z
Full Content:
BySeth Matlins, Forbes Staff. Not ha-ha funny but rather the hard-to-define, hard-to-precisely-quantify, kind of funny, like how the Heisenberg Uncertainty Principle is funny. In our world, which is to say the world of business globally and marketing specifically, influence often hides-in-plain-sight, and can be confused with visibility, or a type of popularity measured by follower counts, “likes”, or the stuff of performative thought leadership. And while these can provide and be platform for the exercise of influence, in and of themselves, they’re not proof of it. They’re optics, and as the unreliable testimony of an eye-witness proves, optics can distort. The most influential CMOs are not necessarily those posting or speaking on panels most often. Theirs often isn’t the loudest voice in the room, because sometimes like that not done that not said speaks volumes. As we at Forbes consider the evolving nature, impact, and measurement of influence, we offer that nothing is as influential as impact. We are certain that the ultimate measure of influence is not about the spotlight but a CMO’s commercial impact on the business and brands they help steward, and the marketing community globally. We are certain the most effective exercise of a CMO’s influence lies in their ability to change the attitudes and behaviors of others—the “consumers” and “customers” they court externally and, as surely, their C-suite colleagues and teams internally. We know that not every job brilliantly done necessarily gets recognition, and that the measure and impact of a CMO’s influence amongst their global peers—the kind that moves markets, companies, culture, and behaviors in service of commercial returns—doesn’t always announce itself. Which is why, in partnership with Sprinklr and with supplemental data provided by LinkedIn, we take a broad, multifaceted, rigorous, and data-led approach to our evaluation. Beginning with an eligible universe of over 1500 CMOs from industries around the world, using 20 proxies for it, and through an analysis of 10 billion data points (up from 9 billion YoY), we concern ourselves with what can be seen, understood, and evaluated. (For more detail on the methodology—including our 20+ indicators of influence, the data sources and scoring frameworks—see Sprinklr’s companion report here.) Of course, like the job of the CMO itself, the nature of influence itself continues evolving. As marketing authority becomes ever more decentralized, distributed, and democratized, so too does CMO influence. That which once flowed top-down, is now networked, lateral, circular, ambient. The tools of marketing influence are now in everyone’s hands, sentient and not. Brand-building and, sometimes brand-tearing-down, has become a shared exercise among stakeholders inside and outside any given company—across the C-suite, business units, customer support, comms, operations, employee advocacy, and every keyboard with or without a corporate login. All of this and the shifting sands of consumer sentiment, tech acceleration, geopolitical unrest, economic uncertainty, the absence of understanding of what marketing truly is and does from CEOs and CFOs without experience in the practice, cultural fragmentation and 1000 other things, makes the effective deployment of a CMO’s influence more complex than ever. It also makes the achievement of being recognized on a list measuring it even more meaningful. The 50 chief marketers on the 2025 Forbes World’s Most Influential CMOs list, along with the six 2025 Forbes CMO Hall of Fame inductees, are shaping the companies they serve, the character and destiny of industry, and in ways that might not yet be recognizable, the world itself. They are influencing others through word, work, actions, inactions, culture, peers, platforms, partnerships, and impacts—not hierarchy. They aren’t just influencing what a brand says but shaping how a company thinks, what it does, and when, why, and how often others buy. They aren’t just steering creative—they’re stewarding growth. They’re leading from the center, even if their titles—and/or CEOs and Boards—don’t always put them there. Individually and collectively, their influence and impact deserve our appreciation, and their examples our consideration. The Forbes CMO Hall of Fame The 2025 Forbes CMO Hall of Fame inductees represent the fourth class since the Hall’s inaugural one in 2022. Created to recognize those chief marketers who, in 2022, had or in all subsequent years, would have, appeared on our World’s Most Influential CMOs list five times. Given the massive changes to the landscape in which these CMOs compete and operate, being recognized on this Forbes list five times is an extraordinary achievement and testimony to their talents and contributions. Entering 2025, ten chief marketers had been recognized on the list four times previously and were thus eligible for induction. Of these ten, it is our privilege to induct six into the Forbes CMO Hall of Fame Class of 2025. These six join the 20 chief marketers inducted previously, each and all of whom are recognized for the enduring influence and impact they’ve had on the brands and businesses they’ve led, on our industry, commerce, and, often, on the cultural landscape itself. Read more about this year’s Forbes CMO Hall of Fame inductees, as well as those from prior years, here. The Forbes World’s Most Influential CMOs List: 2025 Marian Lee CMO of one of the world’s most culturally influential brands, and the largest entertainment company by market cap, Lee’s work has global visibility and influence. The breadth of her remit includes full responsibility across the streamer’s global and local campaigns, experiential activations, social storytelling, and brand partnerships in support of Netflix’s scaling advertising business. With a nearly $2 billion annual advertising budget, Lee’s work plays a pivotal role in shaping how and where Netflix shows up for the audiences of its TV series, films, reality competitions, sports, and gaming efforts. No longer just a content platform, Netflix has become a brand with massive influence over how people’s time, attention and conversation is focused. Over the past year, Lee and her team launched massive integrated campaigns for the NFL including “The Beyonce Bowl,” returning mega-franchises like “Squid Game” and multi-national favorites including “Bad Influence.” Lee’s conviction that one size does not fit all and that “fans don’t just want to watch a show, they want to live it,” drives a strategy designed to blur the boundary between viewer and participant; as a result, Netflix’s marketing events, from immersive fan experiences to location takeovers, including their tentpole Tudum fan-festival, have become cultural moments in their own right. Her fan-first, culture-forward approach is helping drive not just tune-in but momentum across Netflix’s advertising business, which now has 94 million monthly active users, an increase of 20 million since just November. Lee is only the third CMO to be recognized as number one on this list in consecutive years. As of June 6th, the company’s stock was up over 93% year-over-year (YoY). New Balance Davis’s influence is shaping more than a brand but also a category in flux. Responsible for New Balance’s brand strategy, product and demand creation initiatives around the globe, Davis is driving the company’s cultural relevance and commercial returns by elevating the brand’s appeal and affinity through global creative, unexpected partnerships, and consumer-focused commercial strategies. The privately held company’s brand ascension and approach have become a case study across the broader marketing community, as Davis has positioned New Balance as a global challenger brand—one equally credible on the runway, in the locker room, and on the street. Davis’s marketing framework prioritizes long-term cultural resonance over short-term hype: In the past year, the brand expanded its global footprint with talent and storytelling that span both performance and lifestyle. A mix of collaborations both short and long-term—from Shohei Ohtani to Loro Piana, Miu Miu, Coco Gauff, Bayer Leverkusen, and number one NBA draft choice Cooper Flagg—demonstrate a values-based approach to partners and the diverse audiences they reach while reinforcing New Balance’s selective distribution strategy, all of which serve to elevate brand perception globally. In FY2024, New Balance reported a record $7.8 billion in revenue, marking its fourth consecutive year of 20%+ growth. Asmita Dubey Dubey leads brand strategy, digital innovation and consumer engagement globally for the world’s largest beauty company and its portfolio of brands, including category icons like L’Oréal Paris, Maybelline and Lancôme. Overseeing a marketing budget exceeding €13 billion annually, Dubey has deepened L’Oréal’s commitment to “beauty tech” by integrating AI-powered diagnostics, virtual try-ons and personalized routines across key brands. Such tools have significantly enhanced customer engagement, with the company reporting over one billion virtual try-ons across its portfolio. Dubey’s influence is evident not just in the growth of the French conglomerate, but the behaviors of the category worldwide. In the past year, L’Oréal launched CREAITECH, an in-house generative AI beauty content lab, announcing a partnership with Nvidia to super-charge it with never seen before beauty experiences, just last week. Dubey has also partnered with Google to integrate its Imagen 3, Gemini and Veo 2 AI models into CREAITECH, creating some 50,000 images and 500 videos monthly, streamlining content production and allowing for rapid localization of marketing materials. Dubey has also transformed L’Oréal’s influencer marketing strategy, expanding collaborations to over 60,000 creators: The extensive network has contributed to L’Oréal achieving a 30% share of global beauty influence. L’Oréal Paris was again the leading beauty brand on social media last year and closedQ1 2025 with a 4.4% increase in sales YoY. Marcel Marcondes Marcondes has influence and oversight over the world’s largest brewer—parent to eight of the 10 most valuable beer brands worldwide, including Corona, Budweiser, and Michelob Ultra—spanning more than 500 brands sold in over 150 countries. With a conviction that creativity is most impactful when applied to solving business and consumer problems, Marcondes ensures the company’s marketing engine drives volume through brand equity, creativity and culture amidst changing consumer attitudes and behaviors. While the company’s portfolio is huge, Marcondes focuses on a “megabrand” strategy, which concentrates marketing investments behind a select group of scalable, emotionally resonant labels in order to build premium stature and global brand consistency. As but one illustration, over the past year, Marcondes’s vision has materialized in the global rollout of Corona Cero, the company’s alcohol-free variant, in more than 40 markets ahead of the Paris Olympics. Marcondes has also broadened the reach of AB InBev’s CreativeX system, a Cannes-modeled internal training and recognition platform that is reported to have measurably improved marketing quality, effectiveness, and creative confidence across regional teams. In June, and for an unprecedented fourth consecutive year, AB InBev was named the world’s most effective marketer by The Effies. As of June 6, the company’s stock was up more than 42% YTD. David Sandstrom Sandström is rewriting the rules of marketing and marketing organization design in the AI era for the Swedish fintech giant, which serves over 150 million users in some 45 countries around the world. With oversight of Klarna’s global brand, creative and consumer strategy, Sandström’s remit also extends into full-stack operational reinvention. Sandström isn’t just using AI to optimize workflows; he’s building an entirely new model for how marketing teams think, create and move at scale, and the broader marketing world is paying attention. Under his leadership, Klarna has embedded generative AI across every stage of its marketing process—what Sandström calls “AI copilots”—with more than 300 custom GPT-powered tools for everything from ideation to insight generation, enabling Klarna’s marketers to function like engineers—faster, leaner, and more iterative than ever before. Through such innovations, Sandström and his team have reduced image production costs by 50% and cut campaign development timelines from six weeks to days, helping save millions annually in sales and marketing spend, while transforming a transactional payments platform into one of the most culturally agile and technologically advanced brands in finance. Sandström’s work has also helped shift the brand from financial utility to cultural relevance. This past March, Klarna partnered with DoorDash to bring its flexible payment tools to everyday categories like grocery and meal delivery, reframing buy now, pay later as a convenience driver, not just a credit alternative. Sandström has helped Klarna become a brand that moves with culture, not behind it. In 2024, the company reported revenues had increased 24% YoY. Asad Ayaz With three titles and three distinct but integrated remits, Ayaz holds one of the most influential marketing roles in entertainment, and shapes how Disney shows up across culture, commerce and marketing storytelling. With oversight spanning global brand strategy, digital engagement, franchise synergy and marketing across Disney’s core content engines—including Pixar, Marvel, Lucasfilm, 20th Century Studios, and Disney+, in the past year, Ayaz brought together Disney’s two internal creative agencies, Yellow Shoes and The Hive to unify brand and experiences campaigns across parks, streaming, and theatrical content—just as Disneyland enters its 70th anniversary year. He also led the buzz-heavy campaign for “Deadpool & Wolverine,” reframing the R-rated entry as a cultural reset for Marvel with Comic-Con stunts, K-pop integrations, and irreverent global storytelling. Other standout moments include the viral “Apes on Horses” activation for “Kingdom of the Planet of the Apes,” the integrated Hulu-on-Disney+ campaign that merged iconic franchise quotes with surprise character crossovers, and a reimagined D23 fan event that expanded into Fortnite and debuted globally in Brazil. With three billion-dollar films and over $5 billion in global box office, as of June 6, Disney stock was up more than 12% YoY. Tim Ellis With oversight of brand strategy, fan engagement, content and international growth, Ellis leads marketing for one of the world's most influential sports leagues, and the most dominant sports and media property in the U.S. Overseeing a cross-functional team spanning marketing, social, partnerships, media and international, Ellis is focused on bringing new audiences to the game, growing the league’s global reach and ensuring its continued cultural relevance. In the past year, his influence extends across marketing for the NFL's most ambitious international slate to date, as international outreach included regular-season games in São Paulo, Madrid, Dublin, Berlin and London. To recruit, retain and engage fans, Ellis deploys a “helmets off” strategy, one that has been emulated by other leagues, in order to humanize and personalize the game’s biggest names. Under his influence, campaigns have gone beyond the game and sport itself and have included those spotlighting mental health and youth empowerment. The League’s “Every Kid Can Be Somebody” campaign aired during the AFC and NFC Championships and Super Bowl LIX and was one the showcase’s best received and reviewed spots. These efforts, along with others like growing category interest and participation by championing flag football, support the league’s push to build emotional resonance with fans across generations and geographies. Just weeks ago, the League announced NFL players could play in Flag Football’s Olympic Games debut in 2028. The business results speak volumes: for the 2024 fiscal year, the NFL’s total revenue is reported to have grown 13% YoY. Kofi-Amoo-Gottfried Amoo-Gottfried’s influence is reshaping DoorDash—which currently has a dominant 60% share in the U.S. meal delivery market and is aggressively expanding international operations—into a cultural and commercial powerhouse. With an expansive remit leading the company’s brand strategy, creative, media and customer engagement, expanding category awareness and brand affinity are among the areas where Amoo-Gottfried’s influence is most visible. His approach blends cultural fluency with performance rigor and reflects a conviction that "a brand is the sum of all interactions and associations that people have with your product, service, company.” Focused on redefining how the company’s three principal constituencies—consumers, providers and delivery Dashers—think about the brand he stewards, Amoo-Gottfried has helped embed DoorDash as a part of daily life for tens of millions around the world. For the twelve months ending March 31, 2025, the company handled over 2.6 billion orders, reflecting YoY growth of 19%; and in May, DoorDash announced its agreement to acquire U.K.-based Deliveroo for £2.9 billion ($3.86 billion USD), expanding its reach to over 40 countries. As of the close of markets on June 6, the company’s stock was up over 92% YoY. Colin Fleming Fleming is responsible for the global marketing strategy and growing brand recognition worldwide for the $230 billion enterprise software behemoth, with a global remit spanning brand, demand, content, and events. Over the past year and since becoming CMO, Fleming has overhauled the company’s marketing engine, driving a shift from a product-first mindset to a bold, brand-led strategy, elevating storytelling, cultural relevance and emotional resonance in a category not traditionally known for the same. This repositioning, and the approach surrounding it, has included halving the company’s agency roster (an initiative named internally after Marie Kondo to reinforce the joy and efficacy of less) while doubling down on global activations with audience-relevant cultural currency. Under his leadership, marketing has become a strategic partner to the sales organization, rather than the lead factory it had long been. Fleming is helping position ServiceNow as not just a category leader, but a cultural force. His influence extends beyond the company and is found in his recent provocation to the B2B marketing world at large, arguing that it is time enterprise marketers stop marketing with fact-deficient, obfuscating generalities and attribution models and start marketing to humans again, including ditching acronym-heavy language in favor of customer clarity. Kantar recently named Service Now the 41st most valuable brand globally, representing a 57% increase in brand value YoY. As of June 6, the company’s stock was up over 47% in the past year. Lennard Hoornik Over the past year, Hoornik orchestrated one of the most attention-getting brand refreshes globally and is steering both Jaguar and Land Rover through high-stakes transformations. With oversight of the British multi-national company’s global sales, marketing, brand positioning and customer experience, Hoornik’s remit is central to JLR's "Reimagine" strategy, which aims to redefine modern luxury in an automotive category being reshaped by electrification. Hoornik led the much-discussed rebranding of Jaguar, signaling a clean break from the brand’s heritage cues and launching the provocative “Copy Nothing” platform. The campaign, which debuted in two phases with a teaser trailer, immersive installations at Miami Art Week, strategic influencer drops, and a media buy spanning art, design, and tech publications, introduced the company’s Type 00 concept car: a low-slung, all-electric grand tourer embodying Jaguar’s new design philosophy. The rebranding sparked controversy and ignited global discourse, nowhere more than in the marketing world. Discourse aside, the move anchors Jaguar’s plan to go fully electric by 2026 and recalibrate toward design-led, next-gen luxury. Under Hoornik’s marketing leadership, and driven by strong demand and sharper brand differentiation, in FY25 JLR posted record Q3 results, its ninth successive profitable quarter. Claudine Cheever At the helm of marketing for the world’s largest retailer, Cheever oversees 11 global functional teams spanning brand, media, measurement, creative and insights, powering Amazon’s connection with hundreds of millions of customers across an increasingly diversified portfolio, from Prime and retail to healthcare and AI. Cheever has continued pushing Amazon’s massive owned ecosystem—boxes, trucks, devices—as a media platform, creating one of the largest and most efficient out-of-home networks on the planet. Under her marketing influence and leadership, Amazon’s in-house agency was named Ad Age’s 2024 In-House Agency of the Year, reflecting work that balances performance rigor with scaled brand storytelling. This includes emotionally led campaigns like 2024’s “Midnight Opus,” which aired across the U.S., U.K., Germany, and Japan. Cheever is also steering brand expansion into sectors like pharmacy and telehealth, where trust and clarity are critical to adoption. With an annual budget in the billions, she’s building a high-impact global marketing engine that flexes to local markets. Amazon’s brand value rose 50% year-over-year in Kantar’s latest rankings, making it the fourth most valuable brand globally; as of the close of markets on June 3, Amazon’s stock was up nearly 17% YoY. Pinteres With a remit spanning marketing, communications, insights and product design, Mallard is shaping Pinterest, one of the world’s most popular social media brands, into the rarest kind of platform: one that grows by making the internet feel better, not louder. Mallard’s remit is unusually broad and deep, as she leads an integrated product, design, research & insights, marketing, communications and creative team to deliver exceptional end-to-end customer experiences. Her influence across the company and category is equally expansive, helping Pinterest become a case study in how to scale without compromising trust or values: With some 570 million global monthly active users, the platform has had so great a surge in Gen Z engagement that the user segment is now the fastest growing and most active in Pinterest’s history. Over the past year, Mallard has advanced Pinterest’s “positive personalization” strategy, leveraging AI and design to surface relevant content tailored for individual users without triggering the social comparison loops that plague much of social media. This ethos of prioritizing utility over virality continues setting Pinterest apart as other social platforms face heightened scrutiny over mental health impacts, misinformation and aggressive monetization tactics. Mallard also continued to evolve Pinterest Predicts, transforming it from an annual trend report into a dynamic business intelligence tool that not only forecasts but increasingly fuels advertiser strategy across fashion, beauty, home and retail sectors. The result: marketers are using Pinterest not just to see what’s coming next, but to act on it. In Q1 2025, Pinterest reported a 16% YoY revenue increase. Frank-Cooper Cooper is redefining the role of marketing at Visa—the world’s largest payments network, facilitating over $12 trillion in annual volume—and the financial services sector broadly. Overseeing brand strategy, global campaigns and customer engagement across more than 200 countries, Cooper’s influence is witnessed in his work to evolve the positioning of the iconic brand from a transaction facilitator to a catalyst for economic empowerment. In the past year, Cooper used the high-profile Oscars telecast to launch Visa’s global Typewriter campaign, a narrative-driven initiative that reimagines Visa’s role in enabling personal growth and opportunity—aligning with the brand’s “Everywhere You Want To Be” ethos by positioning Visa as a partner not just in purchases but in the milestones, ambitions and life moments those purchases make possible. The campaign marked new territory for Visa by leaning into emotionally resonant storytelling that shows how its products, including Visa Direct and Visa Installments, can help people reach personal goals. And while the company’s product teams developed innovations like Visa Intelligent Commerce and Flexible Credential, Cooper has shaped how they’re positioned and marketed globally, framing them as tools that make everyday commerce more personal, intelligent and secure. These strategic efforts have reinforced Visa’s category dominance, and its global market share is nearly double that of its nearest traditional competitor. In Q2 2025, the company reported a 9% YoY revenue increase, and as of June 6, the company’s stock is up more than 32% YoY. Zach Kitschke Instrumental in steering Canva’s evolution from a consumer-first platform to an enterprise-grade design and productivity suite, Kitschke has helped lead the company’s shift into its next growth frontier: B2B and enterprise teams. Since joining the Australian company as its fifth employee, Kitschke has overseen brand, communications, product marketing and go-to-market efforts, shaping how Canva promotes a design-led ethos and scales its influence globally. Over the past year, he drove the launch of Canva’s largest brand campaign to date, “Love Your Work,” reframing design as a daily advantage for any professional, not just creative ones. Timed to coincide with a major platform overhaul and the introduction of new collaboration and brand management features for business teams across marketing, HR, and sales, Kitschke has also led Canva's expansion into non-traditional sectors including education and nonprofits, all supporting a broader community-led growth strategy, and has influenced company efforts to ensure product storytelling and customer insights are aligned. The privately-held company with a valuation near $50 billion, now has 170 million users across 190 countries. Over the past year, the company passed $3B in revenues for the first time, and Kitschke’s influence helped contribute to Canva’s reported 35% revenue increase YoY. Noel Mack Mack isn’t just steering Gymshark’s growth; he is helping architect it. A driving force behind one of the world’s most dynamic apparel brands and one of the U.K.’s only “unicorns,” Mack is helping transform Gymshark into a global brand and business by blending cultural and consumer savvy with an approach redefining the balance and interplay between the digital and physical. While other brands chase broad lifestyle relevance, under Mack’s lead, Gymshark remains unapologetically focused on just one thing: the gym. With a community-and-social-first mindset, Mack’s work finds the brand becoming something of a movement among Gen Z and Millennial consumers for whom going to the gym is not just a routine but an identity. With influence over all brand, marketing, creative and consumer-facing strategies, Mack has been building both the brand and business on social media and with creator partnerships long before they became industry standards. His early embrace of digital community-building wasn’t just a marketing decision; it was and is a business engine. When the brand’s recent release of its cult-status Onyx collection was hijacked by bots, Mack led Gymshark’s response with nothing but the consumer in mind, turning what could have been a crisis into another chapter in its storied community-building work. Gymshark’s "We Do Gym" platform reflects Mack’s laser-focused brand philosophy; while competitors expand laterally into lifestyle categories, Mack keeps Gymshark's identity ruthlessly specific, making it more resonant, not less. That clarity, paired with grassroots digital storytelling, has set a new standard for how brands build relevance without traditional advertising. In FY2025, the privately held company reported a revenue increase of over 9% YoY, and a bootstrapped valuation now exceeding $1.5 billion. Michelle Graham Clare With oversight of the iconic brand’s international marketing (i.e., outside the U.S.), Graham-Clare’s influence and remit extend across creative strategy, brand development and customer engagement for the world’s largest QSR company by market valuation. Over the past year, Graham-Clare has launched another chapter in the company’s fan-first strategy and platform, “Only at McDonald’s,” the global evolution of a U.K. campaign celebrating real customer rituals, and which has since inspired activations in Canada, Germany, and Australia. Under her marketing leadership, culturally attuned work like the U.K.’s “Gift of McDonald’s” holiday spot—directed by Gold Lion award-winner and Danish film-maker Nicolai Fuglsig—was named one of best campaigns of the year, showcasing how locally rooted storytelling can elevate brand meaning and emotional connection at scale. Beyond brand building, Graham-Clare is scaling loyalty and digital engagement through app-based experiences, limited-edition merch drops, and real-time activations meeting customers where they are. Graham-Clare is helping ensure that the iconic global brand stays emotionally relevant, digitally fluent, and locally loved. As of June 6, the company’s stock is up nearly 20% YoY. Charlie Smith Smith’s influence is redefining what luxury marketing looks and sounds like in the modern age—and how luxury brands behave across culture. In steering the LVMH-owned Spanish fashion house (and one of the world’s oldest luxury brands) into a new era, Smith is elevating Loewe’s profile and creating a new playbook for luxury storytelling, blending high-craft heritage with an internet-native wit not typical for luxury brands. Under his marketing leadership, Loewe has become one of fashion’s most digitally fluent and culturally resonant brands, known as much for its ironic tone and sharp social media presence as for its meticulous craftsmanship and bold creative direction. Smith oversees all aspects of Loewe’s brand and consumer communication, leading a global team across marketing, digital, PR, events and celebrity/influencer strategy. His remit spans traditional brand building and future-facing cultural invention — from the recent Crafted World exhibition in Tokyo (a multi-sensory showcase of Loewe’s craftsmanship that drew tens of thousands of reservations in days) to the brand’s viral TikTok strategy, which has attracted a new generation of fans. Loewe’s campaigns now regularly feature a mix of high-fashion polish and unexpected levity, including casting creators and memes alongside red-carpet celebrities, resulting in both virality and brand heat. The impact has been both reputational and financial: Loewe is one of the fastest-growing brands in the LVMH portfolio and, in the first quarter of 2025, sat atop the influential Lyst Index. Cristina Diezhandino With global oversight of marketing, innovation and digital transformation for the world’s fourth-largest alcohol and spirits company (based on market capitalization), Diezhandino’s influence is shaping the trajectory of over 200 brands sold in over 180 countries across the company’s portfolio. Over the past year, and as the category continues to shift and respond to forces ranging from changing consumption behaviors amongst younger generations to tariffs, Diezhandino has reorganized her global team into agile brand communities built for experimentation and speed. Over the past year, to accelerate brand and volume growth in the premium sector, Diezhandino has launched the Diageo Luxury Group to unify its high-end spirits portfolio and drive brand and strategic consistency globally. She has also introduced a virtual studio to better scale content and creative production, while also leading Diageo’s largest-ever consumer data initiative and establishing a global partnerships lab to unlock untapped growth through cultural collaborations. Guided by a mindset of possibility and a belief in progress over perfection, Diezhandino is reshaping how her teams understand and influence the future of socializing, long a category reference point, placing celebrations and cultural relevance at the center of every brand experience. Under her marketing leadership, inclusivity has become a hallmark of brand storytelling so to better reflect a more representative vision of modern drinkers. Nicole-Hubbard-Graham Since rejoining Nike in early 2024, Graham has led the brand’s marketing revival at a moment of existential reckoning. After years of revenue declines, stalled innovation, and an overcorrection toward direct-to-consumer sales and performance marketing, Nike is reorienting around brand storytelling, and Graham has been central to that pivot. She helped conceive and lead the “Winning Isn’t for Everyone” campaign, a bold return to high-impact, athlete-driven storytelling that launched around the Summer Olympics and culminated in Nike’s first Super Bowl appearance in 27 years. The work marked a decisive shift back to the brand’s competitive DNA, earning widespread acclaim and restoring creative credibility. In May, Graham was promoted to EVP and CMO, expanding her remit to include oversight of storytelling across the Nike, Jordan, and Converse brands. She’s also deepening integration with product and design teams to reestablish cultural heat across categories. While Nike continues to face headwinds, recent campaigns have fueled renewed consumer engagement and helped slow its stock’s decline following years of erosion under previous leadership. In Q2 FY25, the company beat earnings expectations and maintained strong margins, signaling early momentum in its turnaround strategy. Manuel Arroyo Arroyo steers one of the world’s most iconic—and valuable—CPG brand portfolios at The Coca-Cola Company, the largest non-alcoholic beverage business globally, with more than 200 brands sold in over 200 countries. He oversees marketing for all five beverage categories, along with Human Insights, Integrated Marketing Experience (IMX), Marketing Operations & Capabilities, and Marketing Performance. Over the past year, Arroyo has accelerated Coca-Cola’s transformation into a data-powered, AI-enabled marketing engine designed for speed, scale and connection with modern consumers. Focused on driving increased brand strength and creative innovation, the company now delivers personalized, real-time content, powering global efforts like the 2025 return of “Share a Coke,” refreshed for Gen Z, and large-scale activations across Asia-Pacific for Lunar New Year. Campaigns like “Shades of Red” in Mexico—honoring Coca-Cola’s century-long partnership with local small businesses—and Powerade’s “Pause is Power” films, starring Spanish and Brazilian soccer stars Lamine Yamal and Rodrygo Goes, reflect Arroyo’s emphasis on human-centered storytelling that connects globally and hyper-locally. As of June 6, The Coca-Cola Company’s stock was up over 15% YTD. Mathilde DelHoume Delhoume-Debreu holds one of luxury's most culturally consequential marketing roles, stewarding marketing excellence for a portfolio of more than 75 maisons spanning fashion, jewelry, beauty, and spirits at the world’s most valuable luxury group. Her remit encompasses global brand image, content, media strategy and consumer insight, all funneled through a central “maison of expertise” that helps each LVMH brand—including globally resonant and iconic ones like Louis Vuitton, Moet, Hennessy, and Celine, and Sephora— translate heritage into contemporary and cultural resonance and relevance. Over the past year, Delhoume-Debreu played a pivotal role in activating the Group’s unexpected and pioneering Paris 2024 Olympics sponsorship, transforming the Olympics into a global luxury showcase and bringing its “Art of Crafting Dreams” ethos to life through headline-making moments like Dior-designed performance outfits, Louis Vuitton-crafted medal trays, and Moët Hennessy activations across hospitality spaces. Just as influential is her commitment to innovation and sustainability, and her leadership of the LVMH Innovation Award. She is also helping shape how LVMH’s maisons respond to macroeconomic turbulence, empowering each brand to lean into creating desirability and distinction and never discounting. Her work is less about uniformity and more about cultivating excellence through shared creative intelligence, enabling legacy brands like Dior and established acquisitions like Tiffany & Co. to evolve without losing their identity. Esi Eggleston Bracey Eggleston Bracey oversees marketing for a global portfolio of more than 400 brands—including icons like Dove, Hellmann’s, and Magnum—for the world’s fourth-largest fast-moving consumer goods company. With a remit spanning marketing, innovation and category growth, Eggleston Bracey’s influence is central to Unilever’s shift toward building brands that sit at the intersection of personal care, wellness and sustainability. Bracey’s helped accelerate Unilever’s adoption of AI-powered “digital twins”—virtual replicas of products used to simulate packaging, claims, and creative in-market before launch—cutting production costs by up to 55% and slashing campaign development timelines by 65%. This tech-forward pivot is freeing creative teams to focus on high-impact storytelling while ensuring consistency, speed and cost-efficiency at scale. Bracey also introduced and scaled Unilever’s new “Culture to Cart” strategy—an end-to-end approach that fuses brand storytelling with frictionless commerce. The model is designed to convert cultural moments directly into sales by linking campaigns to omnichannel buying paths. Recent executions include Dove’s Serum Shower launch, which paired wellness influencers with live-streamed tutorials and one-click product links; and Hellmann’s 2025 U.S. Super Bowl campaign, extending a broadcast ad to interactive recipe content, TikTok partnerships and integrations on Instacart, Walmart and Amazon. By collapsing the gap between culture and conversion, Bracey is reshaping how Unilever brands show up in the world—and in the shopping cart. As of June 6, the company’s stock was up over 13% YoY. Mark Weinstein A driving force at the helm of Hilton’s global marketing, brand, partnerships, digital innovation and loyalty strategy, Weinstein’s influence is shaping the future of hospitality for the world’s second-largest hotel company by market capitalization. With 24 distinct brands in its hotel management portfolio—including Hilton, Waldorf Astoria, Conrad, and Motto—and with more than 8,600 properties operating across 139 countries and territories, Hilton plays a central role in the travel experience for millions of consumers. Weinstein has continued building equity in Hilton’s “For the Stay” platform, evolving it through culturally resonant campaigns, including a wellness-focused integration with Calm and a new partnership with The Football Association that positioned Hilton as the official partner of Wembley Stadium and the England national teams. Weinstein has also expanded Hilton Honors into a cross-market growth engine, launching a first-of-its-kind integration with China’s DiDi Mileage to offer reciprocal status benefits and seamless travel experiences across platforms. Now totaling over 200 million members, Honors saw double-digit year-over-year growth in 2024. Hilton was just named one of Kantar’s 100 most valuable brands in the world, the only hotel brand to make the list—recognition driven by the consistent stay experience across its portfolio and Weinstein’s global storytelling. Hilton closed 2024 with record system-wide revenues, up 12% YoY. As of June 6, the company’s stock was up more than 25% YoY. Sumit Virmani Virmani’s influence extends across oversight of brand, communications, digital experience and strategic partnerships in 56 countries for the IT behemoth, recently ranked one of the world’s most valuable IT service brands globally. With a focus on ensuring marketing and reputation align with and drive business growth, Virmani has helped solidify Infosys’s identity as an “AI-first, always ethical” partner. A new global brand platform, and the work of bringing it to life, emphasize the Indian multinational’s commitment to trustworthy, responsible innovation. This is an especially pointed stance as generative AI continues to shake industries, practices and, in some instances, confidence across sectors. Beyond positioning the enterprise for growth, Virmani is scaling the company’s presence in cultural arenas that intersect with its tech-forward ethos. He expanded Infosys’s high-profile sports-marketing footprint, deepening data-driven fan engagement strategies through partnerships with the ATP and the Mercedes AMG Petronas F1 team, including metaverse activations and AI-powered analytics dashboards. In the past year, he’s also elevated the Infosys Springboard learning platform, embedding it into the brand’s narrative as a global commitment to digital upskilling, with measurable impact across India, Africa, and the U.S. This multi-pronged strategy has helped Infosys maintain relevance and trust in a volatile tech landscape. Marc Speichert Speichert leads global marketing, sales, revenue management and brand strategy for one of the world’s most storied luxury brands, overseeing nearly every touchpoint of the Four Seasons guest journey. As the brand evolves from hotelier to holistic luxury ecosystem, Speichert is helping shape that future, not just marketing new offerings but driving the commercial strategy behind them. This includes improving the performance of the brand’s 128 hotels and resorts. In the past year, Speichert and his team overhauled commercial operations to better support hotel growth, introducing a “mirror organization” model that embedded subject-matter experts regionally and empowered local teams to act with agility. At the same time, Speichert is expanding Four Seasons into new territory. in 2025, their Private Jet Experience is pacing ahead of 2024 bookings, buoyed by high repeat rates and 100% guest satisfaction. Speichert is also leading the launch of Four Seasons's first luxury yachts, redefining ultra-luxury cruising with residential-style suites. Culturally, what began as a COVID-era location deal with White Lotus has grown into a three-year, business-driving platform, with triple-digit spikes in web traffic, increased occupancy in suites featured on-screen, and high-profile activations. This past season was also the first where Four Seasons secured the rights to use the fictional brand name for its own marketing. With a robust development pipeline, Four Seasons plans to solidify its position as the world's largest operator of luxury properties under a single brand. In the past year, the privately held company reported record financial performance, with continued gains in occupancy, average daily rate (ADR), and brand preference—especially among top-tier travelers. Vineet Mehra At Chime, one of America’s fastest-growing fintechs, Mehra is leading a marketing transformation in a category long constrained by regulation and sameness. The veteran of Walgreens, Johnson & Johnson and Ancestry, Mehra has rebuilt Chime’s marketing organization into a performance storytelling engine—dismantling silos between brand and growth, embedding data science and AI fluency across teams, and designing cross-functional squads that align marketing, product and finance against shared business outcomes. At the heart of his strategy is an unapologetically commercial view of brand: one that treats marketing as capital allocation and measures ROI with the same rigor as R&D. Under his influence, The privately held company has ramped up creative output in the past year, launching a stream of social-first campaigns tailored to Chime’s digitally native, youth-skewing audience. That strategy has made Chime not only Instagram’s most-followed U.S. banking brand but also one of the best-loved across categories, with a referral rate 5x the national average and 1.5x higher than fintech peers. As Chime files an IPO estimated to be worth more than $20 billion, the company reported a 38% year-over-year revenue increase, driven by strong customer acquisition, high engagement, and sustained LTV-to-CAC efficiency. Ariel Kelman Kelman is shaping the next era of intelligent, trust-first marketing at Salesforce, the world’s #1 AI CRM platform and one of the most valuable enterprise software companies globally. Since rejoining the company in 2023, Kelman leads global marketing strategy, brand positioning and go-to-market efforts combining Salesforce’s cloud, data and AI innovations across industries. He has driven a comprehensive overhaul of Salesforce's marketing attribution model, transitioning from a traditional last-touch approach to a deep learning–based system. This new model assigns weighted credit across multiple marketing and sales interactions, providing a more accurate representation of marketing's contribution to pipeline and revenue growth. Kelman’s focus includes accelerating adoption of AgentForce, the Einstein 1 Platform and Data Cloud, three pillars of Salesforce’s strategy to deliver real-time personalization through unified customer data. Kelman’s marketing organization has placed sharp focus on differentiating Salesforce’s AI as natively integrated and context-aware, contrasting it with generic, standalone AI tools in competitor platforms. These strategic and operational shifts have revitalized Salesforce’s go-to-market engine and elevated its brand positioning as the leader in AI-powered CRM. In Q1FY25, Salesforce reported an 11% revenue increase YoY, and as of June 6, the company’s stock was up over 13% in the past year. Nikki Neuburger Neuburger has been instrumental in evolving Lululemon from a yoga-focused brand into a global performance powerhouse. With influence and oversight of the iconic brand’s global marketing, creative, communications and sustainability, Neuburger is driving the company’s storytelling and elevating its brand efforts across more than 700 stores and a growing international footprint, as its competitive set expands to compete increasingly with giants like Nike and Adidas across running, training, tennis, golf and footwear. Over the past year, the former Nike Global VP and Uber Eats marketer has pushed to build deeper brand intimacy and broader cultural traction across global markets. Her team’s “Live Like You Are Alive” platform framed 2025’s brand voice around purposeful, joy-driven movement, creating connective tissue between product, ambassadors and campaigns. In China, Neuburger helped guide the brand’s important Lunar New Year activation, featuring top regional talent to increase local affinity and spotlight limited-edition collections that blend traditional aesthetics with modern performance. Neuburger’s approach has helped Lululemon scale with intention expanding the brand’s reach while preserving its premium, community-first positioning. Don McGuire McGuire’s remit spans global brand strategy, product marketing, creative and partnerships for both Qualcomm, the $168 billion wireless technology giant, and its consumer-facing semiconductor brand, Snapdragon. With a focus on driving growth by elevating Qualcomm from a behind-the-scenes chipmaker to a visible force shaping the future of tech broadly and on-device AI specifically, McGuire’s influence extends to reimagining how the company’s B2B and B2C brands drive resonance, relevance and growth. Over the past year, these efforts are seen in his marketing of the consumer-facing Snapdragon brand, Qualcomm’s premium system-on-chip used in flagship smartphones, next-gen PCs, XR headsets and, increasingly, connected vehicles. While Snapdragon is technically a product line, McGuire has positioned it as an aspirational platform for AI innovation, debuting features like offline voice translation and generative image tools. His marketing has brought these capabilities to life through strategic integrations with Microsoft and Meta and expressive brand work, including a new sonic identity and CES activations with BMW and Louis Vuitton. Recently, McGuire has doubled down on Snapdragon’s luxury-meets-tech positioning, launching campaigns that merge AI storytelling with high-performance experiences. Under McGuire’s marketing influence, Qualcomm isn’t just marketing technology—it’s shaping two connected but distinct brands for the AI era. For the quarter ending March 2025, the company reported revenue growth of over 16% YoY. Eduardo Parra/Europa Press/Getty Images The largest bank in continental Europe and the 18th largest globally as measured by market capitalization, and under Cendoya’s leadership, the Spanish financial services brand has evolved from that of a regionally recognized retail bank to a unified, innovation-forward global financial institution. Cendoya has been instrumental in this shift, aiming to position Santander not just as a banking giant by size, but as a modern, digitally driven brand aligned with global growth ambitions. Over the past year, he consolidated the bank’s media and creative operations under a single holding company to streamline messaging and accelerate transformation. He also spearheaded a global partnership with Formula 1’s Williams Racing, a strategic move to raise visibility among younger, digitally native audiences, especially in the U.S. market. These efforts helped Santander attract nine million new customers, bringing its global total to 175 million. As of June 6, Banco Santander’s stock was up over 84% YoY. jim Mollica Mollica oversees the iconic audio brand’s strategic and creative direction, as well as its connection to consumers across all platforms and touch points. In the past year, he has also added oversight of the company’s Luxury Audio group—which includes prestige brands like McIntosh, Sonus faber, and Classé—to his remit, stepping into the dual role of CMO and President of Luxury Audio. Mollica drives Bose’s cultural and commercial relevance through noteworthy partnerships that fuse product innovation with cultural cachet, from diamond-studded earbuds with Maggi Simpkins, which were spotted on Travis Scott and NBA All-Stars, to a reimagining of the iconic 901 speakers with Kith’s Ronnie Fieg. By debuting Bose Luxury Audio at High End Munich and amplifying the brand’s automotive presence with Porsche and Lamborghini at CES, Mollica positioned Bose as a serious player in the ultra-premium sound space, bridging its consumer and luxury lines while expanding its influence in lifestyle-driven innovation. Across both mass and luxury channels, Mollica is scaling AI-driven content creation to deliver over 10,000 personalized assets monthly, fueling a surge in younger consumers and creator-led storytelling across platforms like YouTube and TikTok. Mollica has driven the brand’s fastest growth among 18–24-year-olds and increased brand consideration by a reported 32% YoY. Kellyn Smith Kenny Smith Kenny has been pivotal in reshaping how the U.S.’s largest telecommunications company shows up for and connects with consumers. With a broad remit and influence across brand, media, performance and retail, Smith Kenny is positioning AT&T as a culturally fluent brand in a historically transactional category. In January 2025, she led the launch of the AT&T Guarantee, a bold shift toward radical transparency and accountability, and the first program in the telecom category to proactively offer bill credits for service disruptions across both wireless and fiber. By reinforcing reliability as a core brand promise rather than a reactive customer service measure, the AT&T Guarantee is a strategic shift in a sector long plagued by fine print, opaque pricing and churn driven by dissatisfaction. Backed by omnichannel marketing and frontline integration, the platform is designed to create differentiation in a category that has historically competed on the same terms, while building trust at scale. Smith Kenny’s influence has also advanced purpose-driven work for the iconic brand, through projects like “Route to Connection,” a short documentary on the digital divide in Amarillo, Texas, and Shine Away, a multiplatform collaboration with Hello Sunshine spotlighting women in technology. as of June 6, AT&T’s stock was up more than 55% YoY. Shubhranshu Singh Singh is proving that even utility-first commercial vehicles can achieve cultural relevance, emotional storytelling and digital scale. Overseeing the Indian company’s Commercial Vehicles Business Unit, Singh has re-architected the group’s marketing engine around constant iteration, real-time responsiveness and regional resonance. Over the past year, Singh has championed a shift from campaign bursts to an always-on model powered by AI, influencer-led content in 11 languages, and a Salesforce-backed customer-data platform that ingests over 80 core data points to generate more than 150,000 unique customer profiles. Singh has also overseen a YouTube strategy that succeeded in driving more than a million subscribers and 450 million views, using micro and regional creators to humanize vehicles and spotlight the communities they serve. Singh has led the rebranding of Tata’s EV arm as Tata.ev, helping the brand command 70% of India’s EV market and make electrification both aspirational and accessible. From blockchain-based fraud prevention to a fixed-ratio programmatic buying model split evenly across Meta, Google and aggregator platforms, Singh is building a marketing infrastructure that’s transparent, traceable and engineered for performance. In FY2024, Tata Motors's Commercial Vehicles Business Unit saw revenue growth of over 11% YoY. Phil Cook Cook is helping drive one of the most dramatic brand transformations in modern sports: Shifting the WNBA from a purpose-first property into a culturally resonant, commercially scaled sports and entertainment brand. With deep roots in storytelling and athlete-first brand-building from his time at Nike, Cook brings a global mindset and a sharp commercial edge to the WNBA’s next chapter. With a remit spanning brand strategy, fan experience, content and revenue-generating partnerships, Cook is helping position the league as both a business force and a cultural bellwether. In the past year, he has harnessed the momentum of breakout stars like Caitlin Clark, Angel Reese and A’ja Wilson to craft narratives extending far beyond the court, redefining how fans engage with the league—which has witnessed a 93% increase in ticket sales and a 500% surge in merchandise sales. In order to energize younger and more diverse audiences, Through cross-platform campaigns, including the recent “More Than Game” and “Viewer Discretion” initiatives, Cook has exerted significant influence, not just on the WNBA but far beyond: As the architect of the league’s broader visibility surge, he’s become a central player in the rise of women’s sports fandom by converting cultural relevance into commercial growth across the sports ecosystem. In the past year, the league secured a landmark $2.2B media rights deal—its most lucrative to date—and league revenues reached a record high. Lorenzo Bertelli At Prada, one of the most influential fashion houses in the world and a cornerstone of Italian luxury, Bertelli oversees global brand strategy, media, digital and sustainability initiatives, positioning Prada at the vanguard of creative innovation and ethical leadership. Bertelli is reimagining what a legacy brand can look like in the age of conscious consumerism and digital acceleration, leading the brand’s continued push into immersive digital storytelling—amplified through Prada’s dynamic Milan runway shows and content-rich campaigns—and reinforcing its appeal to the Gen Zers and millennials central to its future growth. At the same time, Bertelli advanced Prada’s ESG commitments, including expanded traceability in its Re-Nylon collection and the launch of the Group’s DE&I advisory council. Under his stewardship, Prada has deepened its already rich cultural cachet through high-profile collaborations, such as its ongoing partnership with the America’s Cup and an acclaimed art film initiative during the Venice Biennale. Despite difficult times for many in the luxury business, in Q1 25, the Group reported a 16% YoY revenue increase, with Asia and the Americas driving growth. Microsoft Numoto leads end-to-end marketing for Microsoft’s $270 billion business, overseeing global brand, product marketing, commercial go-to-market and customer engagement across a portfolio that includes Azure, Windows, Surface, Microsoft 365, and Copilot. His scope spans enterprise, developer and consumer audiences, unifying messaging across sectors and scaling the adoption of Microsoft technologies worldwide. Since the debut of Copilot, a generative AI assistant that helps users write, summarize, analyze, code and create using large language models and Microsoft’s proprietary data, Numoto has led its rollout across core products like Word, Excel, Outlook and Windows, including the release to a billion Windows 10 users last fall. Numoto’s marketing emphasizes innovation and impact, spotlighted in campaigns like “Work Trend Index” and “Future of Work with AI” and real-world stories like the 500 public school teachers in Lima, Peru, who now use Copilot to design lesson plans and improve classroom engagement. At this year’s Microsoft Build, Numoto is also helping drive developer excitement around new tools like NLWeb and Windows AI Foundry, positioning Microsoft at the center of the agent-powered future of work. For the Quarter ending in March, Microsoft reported revenues had increased nearly 14% YoY, and the company’s stock was, as of June 6th, up over 12% YTD. Todd Kaplan Kaplan is leading the creative and commercial reboot of one of America’s most recognizable food companies—a $22 billion portfolio including iconic brands Heinz, Kraft Mac & Cheese, Oscar Mayer and Philadelphia Cream Cheese. Since joining the company in mid-2024 from PepsiCo, Kaplan has driven a mix of cultural fluency and business discipline. Focused reestablishing the company’s brands as category leaders by modernizing its marketing engine and balancing emotional relevance with everyday utility, Kaplan oversees media and digital efforts, including the in-house content studio, "The Kitchen," and managing strategic innovation partnerships with NotCo and Just Spices. In the past year, he spearheaded one of Kraft Mac & Cheese’s most buzzworthy campaigns to date: a limited-edition “Forever Macaroni Necklace” made of 14k gold, launched in partnership with luxury jeweler Ring Concierge for Mother’s Day. Priced at $25—a nod to Kraft’s legacy of affordability—the necklace was positioned as the only "blue box" moms needed, turning a childhood staple into a lifestyle statement and elevating the emotional role of the brand in modern family life. Kaplan’s approach prioritizes high-impact storytelling and cultural specificity while reinforcing measurable outcomes. He advocates for marketing strategies that drive both long-term brand equity and near-term ROI—an increasingly essential balance in a tariff- and price-sensitive grocery landscape. Fabiola Torres With oversight of marketing, creative, visual merchandising and retail experience across Gap’s portfolio, Torres is leading the marketing charge to restore cultural heat and relevance to one of the category’s most iconic brands. Drawing on her marketing leadership experience at Nike, PepsiCo and Apple, Torres is reclaiming Gap’s creative legacy through campaigns like the recent “Feels Like Gap,” a nostalgia-tinged but still thoroughly modern anthem fronted by Parker Posey, reinforcing the brand’s celebration of individuality and ease. Torres has also doubled down on fashion and cultural relevance through buzzy collaborations with Malbon, Harlem’s Fashion Row and the return of Gap x Dôen, which helped introduce an expanded menswear and baby apparel assortment while showcasing gender-neutral silhouettes and vintage-inspired denim, all produced through Gap’s gender-equity-focused RISE program. As the eponymous cornerstone of the company’s portfolio (which also includes Banana Republic, Athleta and Old Navy), Gap is gaining cultural and commercial momentum: In Q1 2025, the company reported its 6th consecutive quarter of positive comparable sales. Mike Katz Katz has oversight of how, where and when America’s second-largest wireless carrier by market share delivers products, experiences and messages across its digital, product, supply chain, and wholesale platforms. Reinforcing T-Mobile’s position in the telecommunications industry while also extending its influence beyond wireless and into adjacent sectors like retail media and advertising technology, Katz has leveraged the company’s scale to create a marketing engine that’s measurable, modern and built to compete well beyond telecom, merging brand, data and retail with precision. In the past year, he’s overseen the introduction of restructured wireless plan architectures, replacing legacy offerings with simplified tiers bundling premium streaming, high-speed hotspot data and satellite connectivity, anchored by a five-year price guarantee. This not only sharpened T-Mobile’s value proposition but also elevated wireless from a utility to a lifestyle offering, anchored in perks that drive customer retention and brand differentiation. Katz has also accelerated the company’s media ambitions through T-Mobile Advertising Solutions, building on its $1 billion-plus ad business with the acquisitions of Vistar Media and Blis. These strategic moves expanded T-Mobile’s digital out-of-home and omnichannel capabilities. A Google campaign utilizing T-Ads’s near-store activation strategy drove a 52% increase in Android device sales. In Q1 2025, T-Mobile reported a 7% revenue increase YoY. Ulrich-Klenke Klenke oversees global brand strategy, marketing communications and media, and is shaping one of the world’s most valuable telecommunications brands into a cultural force grounded in purpose, clarity and emotion. Under his marketing leadership and company influence, the German company has taken bold stances on social issues, most recently with the 2025 “Against Hate on the Net” campaign featuring Holocaust survivor Margot Friedländer, which reaffirmed the company’s human-centered approach to brand-building. He’s also sharpened Telekom’s presence at the intersection of media, sport, and technology: MagentaTV has secured exclusive rights to all matches in the 2026 Men’s and 2027 Women’s FIFA World Cups, backed by German household-name presenters Johannes B. Kerner and Wolff Fuss. Klenke has prioritized storytelling that resonates across Europe while maintaining a unified global identity, enabling the brand to stand for something greater than connectivity. Deutsche Telekom’s brand value surged 44% year-over-year in the 2025 Kantar BrandZ ranking, making it not only the most valuable German brand, but the top-ranked telco brand worldwide. Nicole Parlapiano Parlapiano’s influence has helped transform Tubi, part of FOX, into the most-watched free streaming service in the U.S. With creative courage and a viewer-first mindset, Parlapiano is creating new standards in the streaming space, redefining how and where a modern media brand engages its audiences. Over the past year, she’s amplified Tubi’s disruptive brand identity through risk-taking campaigns that treat marketing as entertainment, not interruption. She’s expanded Stubios—Tubi’s incubator for underrepresented creators—with new mentorship tracks and original short-form content, and led genre experimentation across the platform, tapping into niche communities through data-driven programming and culturally specific campaigns that speak directly to underserved audiences. In the past year, her team also activated high-impact tentpole moments around everything from horror drops to Black cinema, amplifying Tubi’s brand voice through partnerships, audience-resonant stunts, and social-first storytelling. Under her marketing leadership, Tubi’s monthly active users grew from 50 million (2022) to 100 million (as of June 2025), and the streamer now commands a greater percentage of total U.S. TV viewing time than Max, Peacock and Pluto TV. As the audience has grown, so have ad revenues, up 10% YoY for FY24. Jill Kramer With a remit spanning brand, advertising, content, media, sponsorships and performance marketing, Kramer leads a global team of more than 2,000 marketers for the world’s largest consulting firm by revenue and one of the largest and most influential operations in professional services. In an era defined by disruption, Kramer’s influence cuts across the firm and its clients. Over the past year, she has continued evolving the firm’s “Let There Be Change” platform and introducing AI-powered creative tools that deliver dynamic storytelling tailored to industries, clients and cultures worldwide. She’s also elevated Accenture’s cultural visibility with strategic media integrations and high-profile partnerships—like its World Economic Forum activations, featuring immersive demonstrations of responsible AI and sustainability at work. Announced last year as the official business and technology partner of the NFL, Kramer and Accenture highlighted the intersection of human potential and cutting-edge technology, helping reinforce the company’s position as a transformation partner to some of the world’s most ambitious organizations. For the quarter ending February 2025, the company reported YoY revenue increase of more than 5%. Sophia Colucci The architect of Molson Coors’s North American marketing transformation, Colucci leads brand strategy, creative, innovation, insights, digital and experiential across a portfolio that spans core beer giants like Coors Light and Miller Lite, heritage labels like Blue Moon and Coors Banquet, and a fast-expanding slate of spirits and non-alcoholic offerings. At the world’s fourth-largest brewer, Colucci has helped reposition the company as a more modern, culturally fluent beverage player, sharpening its creative edge and deepening its relevance across generations. In early 2025, Colucci transformed a deliberate misspelling in Coors Light's advertising—"Refershment" instead of "Refreshment"—into a multifaceted Super Bowl campaign. Embracing the concept of a "Case of the Mondays," the campaign featured limited-edition "Mondays Light" packaging, a Peloton partnership, and viral merchandise like the "Chill Face Roller," resonating with consumers experiencing post-Super Bowl sluggishness. The campaign culminated in a Super Bowl ad starring sloths navigating a slow Monday. Colucci also spearheaded a collaboration between Coors Banquet and Wrangler to produce "Beer Wash Jeans,” a limited-edition denim infused with Banquet beer that features co-branded details. This move reinforced Banquet’s Western heritage and contributed to its third consecutive year of growth. Looking ahead, she's orchestrating a U.S. relaunch of Peroni, including domestic production and a campaign tied to Formula 1 and its 0.0% alcohol offering. Under Colucci’s marketing leadership, Molson Coors continues sharpening its creative standards and pushing into new categories. in Q1 2025, the company reported sales had increased over 4% YoY. Will Brass Brass has helped the Premier League become a magnet for the world’s most iconic brands, deepening the cultural reach of the game well beyond the pitch. Overseeing all global commercial partnerships and media rights, he’s the architect behind the return of Coca-Cola as Official Soft Drink Partner starting in the 2025/26 season, a wide-ranging deal activating across Coke’s top brands and delivering exclusive fan experiences across the UK and Ireland. Just ahead of that, he helped secure the league’s first-ever global beer partnership with Guinness, a four-year agreement launching in the 2024/25 season and tapping into the brand’s storytelling prowess to amplify match-day rituals worldwide. With games now broadcast into 900 million homes across 189 countries, Brass’s commercial playbook continues to elevate the Premier League as both a sport and a global entertainment property. That strategy is paying off: League revenue rose 4.1% over the previous year, with commercial income rising 9% year-over-year thanks to expanded sponsorships and global activations. Bernd Körber At BMW, the world’s third most valuable car brand and a global benchmark for luxury automotive performance, Korber is redefining how brand and product come together to shape the future of driving. With oversight of global brand strategy, portfolio planning and experiential innovation, he’s integrated marketing and product development into a single strategic pipeline, ensuring every model, from concept to showroom, is built not just to perform, but to tell a compelling, values-driven story. This philosophy was on full display with the recent debut of the BMW Concept Speedtop at Concorso d’Eleganza Villa d’Este. Positioned at the crossroads of heritage and modernity, the shooting brake design blended performance engineering with elegant craftsmanship, including bespoke Schedoni luggage, while Koerber made headlines by confirming a limited production run of 70 units. At CES, Korber also unveiled the Vision Neue Klasse X and next-gen iDrive platform, showcasing how BMW is merging generative AI, adaptive UX, and immersive in-car entertainment to define mobility's emotional, digital future. Korber’s product-led brand strategy—where each launch functions as both a technological showcase and brand statement—has helped modernize BMW’s tone and broaden its appeal. The approach is delivering results: in Q1 2025, BMW posted record EV sales (up 27.9% YoY) and, as of June 6, the company’s stock was up nearly 10% YTD. Lisa McKnight McKnight is steering Mattel’s transformation from toymaker to IP-powered cultural force, redefining how legacy brands thrive. She has oversight of global brand strategy, creative, insights and licensing across the company’s entire portfolio, including for iconic brands like Barbie, Hot Wheels, UNO and Masters of the Universe. Under McKnight’s leadership, Mattel has adopted a newly flattened, collaborative model that fuses marketing, media, and design from the earliest stages, resulting in integrated brand narratives that build brand equity by updating the cultural context in which the individual equities show up. From viral Ken doll moments—such as the LeBron James “Kenbassador” collaboration—and Barbie’s art-world crossovers, to Hot Wheels’ limited-edition drops with artists like Daniel Arsham and MSCHF, and UNO’s resurgence fueled by TikTok debates and creator house rules, McKnight’s fan-first, multi-platform strategy taps into nostalgia with fresh creative energy. The result is a slate of reimagined brands that feel both timely and resonant, telling new stories that connect across generations. Her push into experiential marketing, design-driven collectibles via Mattel Creations, and premium brand partnerships has unlocked new revenue streams and pop culture traction, especially among kidults, who are now the company’s fastest-growing audience. In a market where many brands are retreating, McKnight is advancing Mattel’s brand purpose by repositioning toys as art objects, cultural statements, and vehicles for self-expression. As of June 2, Mattel’s stock was up 4% YoY. Elizabeth Rutledge With oversight of the iconic financial services brand’s global brand strategy, media, sponsorships, and customer marketing, Rutledge’s influence has sharpened the company’s all-important brand and identity around service, trust and small business support. Under her marketing influence and leadership, American Express has been building on a legacy purpose-led strategy to drive deeper customer connection and brand differentiation, extended its longstanding support of small businesses with grants delivered through their “Backing Small” platform, helping thousands of independent businesses rebuild from natural disasters and grow for the future. Over the past year, Rutledge has also continued advancing American Express’s presence in sports and entertainment with efforts that serve both B2C and B2B interests, including the brand’s high-visibility F1 Academy partnership, which spotlights women-owned businesses; and a revitalized NBA All-Star experience, including the debut of the company sponsored Community All-Star Award. Beyond cultural moments, Rutledge is ensuring American Express continues showing up in times of need, most recently by coordinating with Hilton to provide 20,000-plus free room nights to wildfire evacuees and first responders in California. The company closed Q1 2025 reporting a revenue increase of 9% YoY, and as of June 6, its stock was up 30% YTD. Mayur-Gupta Gupta is helping Kraken, a crypto-trading platform, usher in the age of crypto consumerism—at scale. As the company evolves from their origins into a full-fledged financial services brand, Gupta is steering a marketing strategy that’s equal parts performance engine and brand storyteller. At the heart of his approach is a product-led growth model tied tightly to data: Every user cohort, funnel stage and lifecycle trigger is measured, tested and optimized to drive accountable growth. This discipline has built trust internally, unlocking the ability to invest in brand-building moves that defy easy quantification, and ranging from emotional storytelling to high-profile cultural moments, like Kraken’s partnership with UEFA Europa League champions Tottenham Hotspur. His remit spans the entire marketing stack, blending PLG, lifecycle, performance and brand to create a unified growth system that resonates with crypto natives and newcomers alike. In the last year, Kraken’s revenues increased 128%. Patricia-Corsi Blending creative audacity with sharp commercial instincts, Corsi is reshaping how Kimberly-Clark’s iconic brands show up in the world. Under Corsi’s marketing leadership, the $20 billion global consumer goods giant—home to category leaders like Huggies, Kleenex, Kotex, and Poise—has seen its marketing engine evolve from a traditional, regionally siloed model to a more unified, creativity-led global one. Corsi has driven the company’s largest U.S. expansion in three decades while championing standout work that fused purpose and performance, like Huggies’s emotionally charged North American campaign with NBA star Giannis Antetokounmpo celebrating everyday parenting wins. Poise confronted healthcare inequality with its powerful “Drops of Hope” initiative, and Kotex deepened its global effort to dismantle period stigma through locally resonant storytelling. Under Corsi’s influence, the company has retooled its global creative model to better unite design, brand-building, and business outcomes. Her ethos reflects a culture shift where high-impact creative, not hierarchy, leads decision-making. As of June 2, Kimberly Clark’s stock price was up 5% YoY. Jill_Hazelbaker Hazelbaker is steering one of the world’s most recognizable and widely used tech brands through a new era of reputation, regulation and relevance across the company’s ride-hailing platform, delivery services and freight transport operations. Hazelbaker leads an integrated marketing function designed to ensure Uber shows up with one consistent voice across audiences and markets, and brings marketing, communications and public policy together—a rare structure among global tech firms. Over the past year, Hazelbaker led the launch of Uber’s first global brand platform, “On Our Way.” Debuting during the Paris Olympics with a 90-second in-house spot and a new sonic identity unifying the company’s rideshare and delivery businesses, the campaign marked a continuing shift in Uber’s marketing from more tactical, product-led messaging to emotionally resonant storytelling speaking to riders, regulators and the press alike. Her leadership and influence reflect a broader brand evolution, reframing Uber from a transactional service to an essential part of everyday life. For the quarter ending in March, Uber reported revenues had increased nearly 14% YoY. As of June 6, the company’s stock was up over 35% YTD. For a look at this year’s Forbes World’s Most Influential CMOs List: By The Numbers, click here. To see who we named this year’s The Unofficial #1 on the World’s Most Influential CMOs list, click here. With additional reporting by Laura Ratliff.
--------------------------------------------------

Title: Nvidia's AI empire: A look at its top startup investments | TechCrunch
URL: https://techcrunch.com/2025/06/19/nvidias-ai-empire-a-look-at-its-top-startup-investments/
Time Published: 2025-06-19T10:16:47Z
Full Content:
Latest AI Amazon Apps Biotech & Health Climate Cloud Computing Commerce Crypto Enterprise EVs Fintech Fundraising Gadgets Gaming Google Government & Policy Hardware Instagram Layoffs Media & Entertainment Meta Microsoft Privacy Robotics Security Social Space Startups TikTok Transportation Venture Events Startup Battlefield StrictlyVC Newsletters Podcasts Videos Partner Content TechCrunch Brand Studio Crunchboard Contact Us No company has capitalized on the AI revolution more dramatically than Nvidia. Its revenue, profitability, and cash reserves have skyrocketed since the introduction of ChatGPT over two years ago — and the many competitive generative AI services that have launched since. And its stock price soared. During that period, the world’s leading high-performance GPU maker has used its ballooning fortunes to significantly increase investments in all sorts of startups but particularly in AI startups. The chip giant ramped up its venture capital activity in 2024, participating in 49 funding rounds for AI companies, a sharp increase from 34 in 2023, according to PitchBook data. It’s a dramatic surge in investment compared to the previous four years combined, during which Nvidia funded only 38 AI deals. Note that these investments exclude those made by its formal corporate VC fund, NVentures, which also significantly ramped up its investing in the last two years. (PitchBook says NVentures engaged in 24 deals in 2024, compared to just 2 in 2022.) In 2025, Nvidia has already participated in seven rounds. Nvidia has stated that the goal of its corporate investing is to expand the AI ecosystem by backing startups it considers to be “game changers and market makers.” Below is a list of startups that raised rounds exceeding $100 million where Nvidia is a named participant since 2023, including new ones it has backed so far in 2025, organized from the highest amount to lowest raised in the round. OpenAI: Nvidia backed the ChatGPT maker for the first time in October, reportedly writing a $100 million check toward a colossal $6.6 billion round that valued the company at $157 billion. The chipmaker’s investment was dwarfed by OpenAI’s other backers, notably Thrive, which according to the New York Times invested $1.3 billion. xAI: Nvidia participated in the $6 billion round of Elon Musk’s xAI. The deal revealed that not all of OpenAI’s investors followed its request to refrain from backing any of its direct competitors. After investing in the ChatGPT maker in October, Nvidia joined xAI’s cap table a few months later. Inflection: One of Nvidia’s first significant AI investments also had one of the most unusual outcomes. In June 2023, Nvidia was one of several lead investors in Inflection’s $1.3 billion round, a company founded by Mustafa Suleyman, who earlier founded DeepMind. Less than a year later, Microsoft hired Inflection AI’s founders, paying $620 million for a non-exclusive technology license, leaving the company with a significantly diminished workforce and a less defined future. Wayve: In May, Nvidia participated in a $1.05 billion round for the U.K.-based startup, which is developing a self-learning system for autonomous driving. The company is testing its vehicles in the U.K. and the San Francisco Bay Area. Scale AI: In May 2024, Nvidia joined Accel and other tech giants Amazon and Meta to invest $1 billion in Scale AI, which provides data-labeling services to companies for training AI models. The round valued the San Francisco-based company at nearly $14 billion. Crusoe: A startup building data centers reportedly to be leased to Oracle, Microsoft, and OpenAI raised $686 million in late November, according to an SEC filing. The investment was led by Founders Fund, and the long list of other investors included Nvidia. Figure AI: In February 2024, AI robotics startup Figure raised a $675 million Series B from Nvidia, OpenAI Startup Fund, Microsoft, and others. The round valued the company at $2.6 billion. Mistral AI: Nvidia invested in Mistral for the second time when the French-based large language model developer raised a $640 million Series B at a $6 billion valuation in June. Lambda: AI cloud provider Lambda, which provides services for model training, raised a $480 million Series D at a reported $2.5 billion valuation in February. The round was co-led by SGW and Andra Capital Lambda, and joined by Nvidia, ARK Invest, and others. A significant part of Lambda’s business involves renting servers powered by Nvidia’s GPUs. Cohere: In June, Nvidia invested in Cohere’s $500 million round, a large language model provider serving enterprises. The chipmaker first backed the Toronto-based startup in 2023. Perplexity: Nvidia first invested in Perplexity in November of 2023 and has participated in every subsequent round of the AI search engine startup, including the $500 million round in December, which values the company at $9 billion, according to PitchBook data. Poolside: In October, the AI coding assistant startup Poolside announced it raised $500 million led by Bain Capital Ventures. Nvidia participated in the round, which valued the AI startup at $3 billion. CoreWeave: Nvidia invested in the AI cloud computing provider in April 2023, when CoreWeave raised $221 million in funding. Since then, CoreWeave’s valuation has jumped from about $2 billion to $19 billion, and the company has filed for an IPO. CoreWeave allows its customers to rent Nvidia GPUs on an hourly basis. Together AI: In February, Nvidia participated in the $305 million Series B of this company, which offers cloud-based infrastructure for building AI models. The round valued Together AI at $3.3 billion and was co-led by Prosperity7, a Saudi Arabian venture firm, and General Catalyst. Nvidia backed the company for the first time in 2023. Sakana AI: In September, Nvidia invested in the Japan-based startup, which trains low-cost generative AI models using small datasets. The startup raised a massive Series A round of about $214 million at a valuation of $1.5 billion. Imbue: The AI research lab that claims to be developing AI systems that can reason and code raised a $200 million round in September 2023 from investors, including Nvidia, Astera Institute, and former Cruise CEO Kyle Vogt. Waabi: In June, the autonomous trucking startup raised a $200 million Series B round co-led by existing investors Uber and Khosla Ventures. Other investors included Nvidia, Volvo Group Venture Capital, and Porsche Automobil Holding SE. Ayar Labs: In December, Nvidia invested in the $155 million round of Ayar Labs, a company developing optical interconnects to improve AI compute and power efficiency. This was the third time Nvidia backed the startup. Kore.ai: The startup developing enterprise-focused AI chatbots raised $150 million in December of 2023. In addition to Nvidia, investors participating in the funding included FTV Capital, Vistara Growth, and Sweetwater Private Equity. Sandbox AQ: In April, Nvidia, alongside Google, BNP Paribas, and others, invested $150 million in Sandbox AQ, a startup developing large quantitative models (LQMs) for handling complex numerical analysis and statistical calculations. The investment increased Sandbox AQ’s Series E round to $450 million and the company’s valuation to $5.75 billion. Hippocratic AI: This startup, which is developing large language models for healthcare, announced in January that it raised a $141 million Series B at a valuation of $1.64 billion led by Kleiner Perkins. Nvidia participated in the round, along with returning investors Andreessen Horowitz, General Catalyst, and others. The company claims that its AI solutions can handle non-diagnostic patient-facing tasks such as pre-operating procedures, remote patient monitoring, and appointment preparation. Weka: In May, Nvidia invested in a $140 million round for AI-native data management platform Weka. The round valued the Silicon Valley company at $1.6 billion. Runway: In June of 2023, Runway, a startup building generative AI tools for multimedia content creators, raised a $141 million Series C extension from investors, including Nvidia, Google, and Salesforce. Bright Machines: In June 2024, Nvidia participated in a $126 million Series C of Bright Machines, a smart robotics and AI-driven software startup. Enfabrica: In September 2023, Nvidia invested in networking chips designer Enfabrica’s $125 million Series B. Although the startup raised another $115 million in November, Nvidia didn’t participate in the round. Editor’s note: A previous version of this story incorrectly stated that Nvidia is a backer of Safe Superintelligence and an investor in Vast Data’s Series E round. Nvidia hasn’t invested in Vast Data since the company’s Series D. Topics Reporter, Venture From seed to Series C and beyond—founders and VCs of all stages are heading to Boston. Be part of the conversation. Save $200+ now and tap into powerful takeaways, peer insights, and game-changing connections. OpenAI pulls promotional materials around Jony Ive deal due to court order Tesla launches robotaxi rides in Austin with big promises and unanswered questions Why Danny Boyle shot ‘28 Years Later’ on iPhones The stablecoin evangelist: Katie Haun’s fight for digital dollars Moratorium on state AI regulation clears Senate hurdle LinkedIn CEO says AI writing assistant is not as popular as expected Last day to save on your TechCrunch All Stage pass — prices go up tonight © 2025 TechCrunch Media LLC.
--------------------------------------------------

Title: Nvidia’s AI empire: A look at its top startup investments
URL: https://finance.yahoo.com/news/nvidia-ai-empire-look-top-101200402.html
Time Published: 2025-06-19T10:12:00Z
Description: Over the last two years, Nvidia has used its ballooning fortunes to invest in over 80 AI startups. Here are the giant semiconductor's largest investments.
--------------------------------------------------

Title: Deals for Today: Kirby, Donkey Kong, and Big Tech Discounts
URL: https://www.ign.com/articles/best-deals-for-june-18-2025
Time Published: 2025-06-18T17:45:00Z
Description: As of June 17, Kirby and Donkey Kong Bananza preorders are live for Switch 2. Get deals on MacBook Air M3 for $699, the Samsung Neo G9 for $1549.99, and more.
--------------------------------------------------

Title: Why Hollywood studios are still downsizing
URL: https://www.bostonherald.com/2025/06/18/hollywood-studios-downsizing/
Time Published: 2025-06-18T17:29:32Z
Full Content:
By Samantha Masunaga, Los Angeles Times Hollywood’s workforce just needed to “survive ’til ’25.” That was last year’s hopeful mantra for entertainment industry pros battered by layoffs and limited film and TV production. But now as the year approaches its halfway point, a bleaker saying seems apt: “Exist ’til ’26.” Rosy projections of a robust recovery this year have not materialized. If anything, the downturn, at least in terms of employment at the studios, has continued. In recent weeks, three media and entertainment giants — Walt Disney Co., Warner Bros. Discovery and Paramount Global — have said they will lay off staffers. Disney cut several hundred employees in the U.S. and abroad, while Paramount shed hundreds of its domestic workforce and Warner Bros. eliminated several dozen positions. It is yet another sign that the industry is still recovering from the effects of the pandemic and the dual writers’ and actors’ strikes of 2023, while also trying to navigate the changing media landscape. As people continue to cut the cord and viewership of traditional broadcast television declines — taking with it valuable ad dollars — companies are reallocating resources to their streaming platforms. They’re cutting back on spending after massive investments during the so-called streaming wars. And now, economic uncertainty from President Trump’s tariffs has rattled the markets, creating a difficult overall business environment. “We’re going through this squeezing of our ecosystem in Hollywood,” said J. Christopher Hamilton, a practicing entertainment attorney and a professor at Syracuse University who focuses on the business of media. Companies are “trying to find a new normal, adjust to the financial pressures that the global economy is under and also figure out what is the smartest business model and path forward.” It’s a far cry from the hints of optimism some in the industry had toward the end of last year. With the strikes finally in the rearview mirror, and delayed films debuting in theaters and production slowly coming back, the thought was “we’re out of the strikes, we’ll be able to go back to the market, sell and buy,” Hamilton said. Instead, many of the recent conversations he’s had with clients and media executives have been centered on fear and uncertainty. People will tell him that it’s hard to sell a TV show, or that they don’t know if their job will be around in two weeks. The international market has also become more favorable to local content, meaning U.S.-made shows are now heavily competing with homegrown series. “It’s a horrible time in the business from the content creation, content production standpoint,” Hamilton said. “People don’t want to take risks. They’re fearful of losing their jobs.” The idea of “survive ’til ’25” was always a myth, said Stephen Galloway, dean of Chapman University’s Dodge College of Film and Media Arts. The issues the industry is facing are long term and disruptive. “The industry is retrenching,” he said. “And there’s going to be a shake-up that lasts for quite a while.” The continued decline of linear TV is one issue nearly all studios are grappling with. Though viewership is down and can drag on a company’s stock price, traditional broadcast TV still makes money, making it important to manage costs and generate profit for as long as possible. That also means job cuts in those areas. Disney’s layoffs hit its film and television marketing teams, television publicity, casting and development as well as corporate financial operations. Warner Bros. cut employees from its cable TV channels. While Paramount did not disclose the departments affected by the layoffs, its co-chief executives acknowledged in a note to staff that the decision came as the company navigates “continued industry-wide linear declines.” Linear TV’s struggles have led media companies to spin off their traditional television assets, including cable networks, into separate entities. Santa Monica-based Lionsgate got the ball rolling in 2023 when it said it would sever its film and TV studio business from its pay cable unit Starz, a transaction that was completed this year. Late last year, Comcast Corp. said it would make a new company consisting of its cable channels, including CNBC, MSNBC and USA Network. Then on Monday, Warner Bros. said it too would split into two publicly traded companies — one entity called Streaming & Studios and a second called Global Networks, that would consist of its cable channels such as CNN, TNT and Discovery. The Warner Bros. split is “an acknowledgment that the idea of building something big enough to compete in the streaming war didn’t work,” said Peter Murrieta, a writer and deputy director of the Sidney Poitier New American Film School at Arizona State University. Moreover, Netflix’s dominance in the streaming space has made many companies reevaluate their plans. “There were already signs pointing to the unsustainability of the number of shows and the number of streamers,” he said. “It’s the aftereffects of trying to compete at the streaming level and thinking that’s the future. Resources were put there, and now they have to retrench.” Disney Chief Executive Bob Iger has said as much in comments to Wall Street, acknowledging that the House of Mouse pumped out too many shows and movies to compete against Netflix. The company has since pulled back amid Iger’s call to focus on quality over quantity and to reach profitability in its streaming services, which it achieved last year. The company’s latest job postings now include a number of openings for software engineers. The larger economic environment, too, is of concern to those in Hollywood. In addition to industry-specific concerns about artificial intelligence and the decline of traditional TV and cable, the entertainment business is also grappling with domestic and global financial uncertainty. Paramount’s executives cited the “dynamic macro-economic environment” in its note to employees. “Right now, there is an absolute sense of terror among people in the business that they’ll be out of a job, that the old models aren’t working, that they won’t earn what they once did,” said Galloway of Chapman. “They’re not wrong to be afraid. I think they’re wrong to be as afraid as they are because it’s a retrenchment, and it’s a retrenchment following a gigantic expansion.” White-collar jobs in other industries are also being threatened by technological change, greater investment in AI and retrenchments after pandemic-era hiring sprees. Earlier this year, tech companies such as payment firm Square, Meta, Google and Workday said they would lay off employees. But Hollywood has always been a boom-and-bust industry, Galloway said, noting that in times of change, new opportunities always arise. Jobs in virtual production or AI are becoming more numerous. As studios cut back on their staff, they will still need producers to shepherd shows and films, said Susan Sprung, chief executive of the Producers Guild of America trade group. “These companies aren’t getting out of the business of producing great programming, movies and television,” she said. “If you don’t have as large of an executive team that can help supplement that, it makes it even more important that you have good producers working on every one of your projects.” While the current environment is tough, the industry has always been difficult, and people in this business are resourceful and intentional about their work, said Murrieta of Arizona State. Though it is a trying time, he said, “there’s got to be hope.” ©2025 Los Angeles Times. Visit at latimes.com. Distributed by Tribune Content Agency, LLC.
--------------------------------------------------

Title: There’s Still an ‘Enormous’ Reason to Buy Nvidia Stock in 2025
URL: https://www.barchart.com/story/news/32943553/theres-still-an-enormous-reason-to-buy-nvidia-stock-in-2025
Time Published: 2025-06-18T16:58:21Z
Description: While Nvidia stock has delivered game-changing returns to shareholders over the past decade, the chip maker still trades at a discount to consensus price...
--------------------------------------------------

Title: INVESTOR ALERT: Pomerantz Law Firm Investigates Claims On Behalf of Investors of Meta Platforms, Inc. - META
URL: https://www.globenewswire.com/news-release/2025/06/18/3101797/1087/en/INVESTOR-ALERT-Pomerantz-Law-Firm-Investigates-Claims-On-Behalf-of-Investors-of-Meta-Platforms-Inc-META.html
Time Published: 2025-06-18T16:16:00Z
Full Content:
June 18, 2025 12:16 ET | Source: Pomerantz LLP Pomerantz LLP NEW YORK, June 18, 2025 (GLOBE NEWSWIRE) -- Pomerantz LLP is investigating claims on behalf of investors of Meta Platforms, Inc. (“Meta” or the “Company”) (NASDAQ: META). Such investors are advised to contact Danielle Peyton at newaction@pomlaw.com or 646-581-9980, ext. 7980. The investigation concerns whether Meta and certain of its officers and/or directors have engaged in securities fraud or other unlawful business practices. [Click here for information about joining the class action] On May 15, 2025, the Wall Street Journal published an article entitled “Meta Is Delaying the Rollout of Its Flagship AI Model.” Citing “people familiar with the matter”, the article reported, in relevant part, that “[c]ompany engineers are struggling to significantly improve the capabilities of its “Behemoth” large-language model, leading to staff questions about whether the improvements over prior versions are significant enough to justify public release[.]” The article further reported that while originally “Behemoth was internally slated for an April release”, Meta subsequently “pushed an internal target for . . . Behemoth’s release to June” before “delay[ing] . . . to fall or later.” On this news, Meta’s stock price fell $19.02 per share, or 2.88%, over the following two trading sessions, to close at $640.34 per share on May 16, 2025. Pomerantz LLP, with offices in New York, Chicago, Los Angeles, London, Paris, and Tel Aviv, is acknowledged as one of the premier firms in the areas of corporate, securities, and antitrust class litigation. Founded by the late Abraham L. Pomerantz, known as the dean of the class action bar, Pomerantz pioneered the field of securities class actions. Today, more than 85 years later, Pomerantz continues in the tradition he established, fighting for the rights of the victims of securities fraud, breaches of fiduciary duty, and corporate misconduct. The Firm has recovered numerous multimillion-dollar damages awards on behalf of class members. See www.pomlaw.com. Attorney advertising. Prior results do not guarantee similar outcomes. CONTACT:Danielle PeytonPomerantz LLPdpeyton@pomlaw.com646-581-9980 ext. 7980 NEW YORK, June 18, 2025 (GLOBE NEWSWIRE) -- Pomerantz LLP is investigating claims on behalf of investors of The Boeing Company (“Boeing” or the “Company”) (NYSE: BA). Such investors are advised to... NEW YORK, June 18, 2025 (GLOBE NEWSWIRE) -- Pomerantz LLP is investigating claims on behalf of investors of United Natural Foods, Inc. (“United Natural” or the “Company”) (NYSE: UNFI). Such...
--------------------------------------------------

Title: US Stock market today: Dow jumps 250 points, S&P 500 and Nasdaq rise as Tesla, Amazon, JPMorgan, Nvidia and Enphase rally ahead of Fed decision and Middle East crisis escalates
URL: https://economictimes.indiatimes.com/news/international/us/us-stock-market-today-dow-jumps-250-points-sp-500-and-nasdaq-rise-as-tesla-amazon-jpmorgan-nvidia-and-enphase-rally-ahead-of-fed-decision-and-middle-east-crisis-escalates/articleshow/121935107.cms
Time Published: 2025-06-18T15:19:27Z
Full Content:
(Catch all the US News, UK News, Canada News, International Breaking News Events, and Latest News Updates on The Economic Times.) Download The Economic Times News App to get Daily International News Updates. (Catch all the US News, UK News, Canada News, International Breaking News Events, and Latest News Updates on The Economic Times.) Download The Economic Times News App to get Daily International News Updates. Explore More Stories Canada vs Honduras: Tajon Buchanan scores a brace as Canada thrash Honduras 6-0 in CONCACAF Gold Cup Canada Strong Pass allows free entry to national parks, historic sites for 2025 summer season—check details Netanyahu says campaign 'changing face of Middle East' as Israel, Iran trade strikes amid tension Man presumed drowned after he goes missing in Metro Vancouver lake, say police Canadian F-18 Hornet fighter jets intercept civilian plane violating airspace during G7 Summit Canadian GP: George Russell claims first win of F1 season after McLaren's Piastri-Norris collide Married? You just lost 40 points; How Canada’s immigration system is rewarding singles and punishing families Canada’s groundbreaking $2,400 disability benefit launches June 20; Who qualifies, how to apply, and what they’re not telling you Carney to meet Trump in Alberta as G7 summit begins with trade, tariffs, and security talks on the table Meet Canada’s oldest history student; He’s 76, just graduated and already enrolled for his next degree Israel-Iran conflict: Canadian national rescued from Tel Aviv building hit by Iranian missile barrage G7 in Canada: What’s at stake for Canada as Carney hosts Trump, Modi, Zelenskyy amid trade wars, global crisis, and tensions Meet Quebec’s new Liberal leader, Pablo Rodriguez, as he steps in to rebuild his party 'Iran won’t surrender…' ‘UT with an assembly is worst form of government’ Israel-Iran War: 'Don't get directly involved, else…,' Iran warns US PM Modi rejects US mediation in call with Trump US avoids direct answer on Kashmir Kristi Noem rushed to hospital by ambulance State Dept warns Americans over Iran crisis Trump issues chilling threat to Khamenei Sen. Padilla breaks down over being handcuffed Google launches 'safety charter' to save Indians from online frauds Hot on Web In Case you missed it Top Searched Companies Top Calculators Top Prime Articles Top Commodities Top Slideshow Private Companies Top Story Listing Top Definitions Latest News Follow us on: Find this comment offensive? Choose your reason below and click on the Report button. This will alert our moderators to take action Reason for reporting: Your Reason has been Reported to the admin. Log In/Connect with: Will be displayed Will not be displayed Will be displayed Stories you might be interested in
--------------------------------------------------

Title: DeepSeek Inside: Origins, Technology, and Impact
URL: http://cacm.acm.org/opinion/deepseek-inside-origins-technology-and-impact/
Time Published: 2025-06-18T15:15:39Z
Full Content:
The release of DeepSeek V3 and R1 in January 2025 caused steep declines in the stock prices of companies that provide generative artificial intelligence (GenAI) infrastructure technology and datacenter services.28 These two large language models (LLMs) came from a little-known Chinese startup with approximately 200 employees versus at least 3,500 for industry-leader OpenAI.2,14 DeepSeek seemed to have developed this powerful technology much more cheaply than previously thought possible. If true, DeepSeek had the potential to disrupt the economics of the entire GenAI ecosystem and the dominance of U.S. companies ranging from OpenAI to Nvidia.5,6 DeepSeek-R1 defines itself as “an artificial intelligence language model developed by OpenAI, specifically based on the generative pre-trained transformer (GPT) architecture.”a Here, DeepSeek acknowledges that the transformer researchers (who published their landmark paper while at Google in 2017) and OpenAI developed its basic technology. Nonetheless, V3 and R1 display impressive skills in neural-network system design, engineering, and optimization, and DeepSeek’s publications provide rare insights into how the technology actually works. This column reviews, for the non-expert reader, what we know about DeepSeek’s origins, technology, and impact so far. The parent of DeepSeek is High-Flyer, a quant hedge fund founded in 2015 in the city of Hangzhou, China.b It relies on AI and machine learning (ML) for stock-trading decisions. The cofounder, Liang Wenfeng (born 1985), is a graduate of Zhejiang University. He studied machine vision and started the company with two classmates after researching the topic since 2008. High-Flyer is reported to have 113 employees and $59 million in revenues while managing $8 billion in assets.11,c During 2019–2022, High-Flyer spent approximately $139 million and stockpiled 10,000 Nvidia A100 GPUs to build a supercomputer. The A100 is lower in performance than the datacenter-standard Nvidia H100 (the U.S. government banned both for export to China in October 2023).9,24,29 In 2021, the Chinese government began a regulatory crackdown on high-frequency speculative stock trading. In response, Liang created a second team of researchers to focus on fundamental AI and ML research. He hired graduates from top Chinese universities and worked closely with Chinese academics. The team evaded government scrutiny because it was separate from the investment group and not focused on consumer AI.9,25 In 2023, High-Flyer spun off this second team as DeepSeek (see the accompanying table). One year later, the new company released products and reports that attracted worldwide attention. (In March 2025, the Chinese government also named DeepSeek a “national treasure” and placed travel restrictions on key employees.26) What made headlines was DeepSeek’s claim, based on a technical report published on its website dated December 27, 2024, that the company spent merely $5.6 million training V3. DeepSeek also claimed V3 approximated or exceeded the performance of other leading LLMs (Qwen 2.5–Alibaba, Llama 3.1–Meta, GPT-4o–OpenAI, Claude 3.5–Anthropic). The cost was so low because V3 required only 2.788 million hours of pre-training and post-training, done on a cluster of 2,000 Nvidia H800 GPUs (the lower-bandwidth version of H100, permissible for export to China), at an estimated cost of $2/hour. By contrast, to train GPT-4, it is reported that OpenAI used a cluster of 16,000 Nvidia H100 GPUs and spent at least $100 million.12,29 It had generally been accepted that companies need to spend $100 million to $1 billion to train their LLMs.11 The higher number covers variations, such as the nine different versions of Meta’s Lama 3.d It probably did not cost much to develop R1 once DeepSeek had V3.1 However, DeepSeek has not revealed the separate development costs for R1 or its predecessors and variants. We also do not know how much hardware High-Flyer and DeepSeek had access to in addition to the supercomputer. The research firm SemiAnalysis estimates DeepSeek had access to as many as 50,000 Hopper-class (probably H800) Nvidia GPUs and, for V3/R1, spent more than $500 million on GPU hardware and about $1.3 billion in total development costs.9 These estimates, which seem to be approximate guesses made in hindsight, would be comparable to development costs for the reasoning GPT models from OpenAI and the Llama 3 series from Meta. The December 2024 technical report also states that, “During pre-training, we train [sic] DeepSeek-V3 on 14.8T high-quality and diverse tokens.”8 One token equals approximately four characters or 0.75 English words. Fifteen billion tokens are approximately the amount of high-quality text available on the English-language Internet. It is also the estimate for pre-training tokens Meta used for Llama 3 and twice the estimate for OpenAI’s GPT-4 of 6.5 trillion tokens.10 In other words, training on DeepSeek-V3 reportedly took many fewer hours and much less money than comparable LLMs but covered a similar or much higher level of content. Sasha Rush concludes as well that V3’s performance is comparable to OpenAI GPT-4o but with substantially less training costs, while R1 resembles an open source version of OpenAI-o1, which had been the market leader for reasoning LLMs.22 Reasoning LLMs generate better answers if they run more computations in the inference (question-answering) stage. The reasoning approach works particularly well when there are correct answers the system can check against and provide rewards for, like in mathematical modeling, coding, or logical reasoning.22 DeepSeek built R1 as a reasoning version of V3 and released two smaller versions of R1 based on distillations of the open source Llama 3 (Meta) and Qwen 2.5 (Alibaba).7,21,e V3 consumed the bulk of the engineering work but R1 is important because it showed DeepSeek that “reasoning emerges as a behavior from pure reinforcement learning.”19 Here we see a difference in training strategy. OpenAI built its reasoning models by starting with human-supervised fine-tuning and then using reinforcement learning, followed again by extensive human fine-tuning. By contrast, DeepSeek skipped human pre-training and allowed the model to improve its reasoning capabilities by learning on its own (that is, reinforcement learning with rewards) and then a few hours of human post-training. As it built R1, DeepSeek also enhanced V3 through rounds of reinforcement learning, with rewards and verifications of answers. V3 and R1 used the same training data, and the V3-base model is inside R1. However, R1 benefitted from this “distillation” of learning from V3. Moreover, designing R1 to show the reasoning process made it easier to fine-tune.22 Part of the explanation for the low-cost, high-performance of V3/R1 is DeepSeek’s follower position and access to open source technology.20 But equally important seems to be DeepSeek’s technology and training strategy. Most experts cite the clever architecture and multistage training, with human fine-tuning only in a post-training phase. In particular, three complementary approaches and supporting techniques balanced engineering cost and system performance: Mixture of experts, reinforcement learning, and distillation. Mixture of experts (MoE) and supporting techniques. MoE architectures use several small specialized language models to spread out the data analysis and training load. Different prompts or “weights” call up specialized experts that, of the total parameters available, access only a small subset, such as 37 billion out of 671 billion parameters in R1. Accessing a subset of parameters, called Sparse Neural Network Training, avoids redundant or unnecessary calculations. By contrast, GPT-4 appears as a “dense” neural network with access to 1.8 trillion parameters for every operation.16 The MoE concept is not new but has been difficult to scale.22 The French startup Mistral AI did release in December 2023 the “open-weight” MoE LLM 8x7B, with eight experts (two operational at any given time), each accessing a total of 166 billion parameters and resembling a “scaled-down GPT-4.” Apparently, it was innovative and efficient but did not garner the same attention as the efficient and low-cost DeepSeek V3/R1.13 DeepSeek relied on specific techniques to minimize compute resources needed to share data across the smaller experts. It used parallelization to coordinate the computational tasks running on different clusters of networked computers (GPUs). It used quantization to improve computational efficiency by limiting the precision of calculations (decimal points) to the lowest level necessary for a specific computation.22 Examples would be converting 32-bit floating-point numbers to 16-bit, 8-bit, or even integer (whole-number) formats. Reinforcement learning (RL) and supporting techniques. The RL approach focuses on ML via trial and error with rewards for particular outcomes, in R1’s case, accuracy and format of the answers. OpenAI and other reasoning LLMs also use reinforcement learning and rewards.18 However, OpenAI has relied heavily on supervised training by human experts that requires enormous amounts of data and time for pre-labeling the data sets and feeding the system questions and correct answers.16 DeepSeek says it used human supervision only in post-training to fine-tune its models and spent very few hours.8 In general, the analogy would be to train a computer to play chess by giving it the rules on how to move pieces and then letting the machine learn mostly by playing matches rather than pretraining with insights from a human grandmaster.11 Other techniques complemented RL. Chain-of-thought (CoT) reasoning divides a large, complex problem into intermediate steps that are easier to analyze and refine.17 DeepSeek used RL and CoT training to turn V3 from a relatively simple LLM into the more sophisticated reasoning R1 by asking it to show the steps used to analyze and answer questions.21 Another complementary technique is group relative policy optimization (GRPO). Many LLMs incorporate a slow and expensive training approach with a “policy model” (rules or guidelines) to decide on actions and then a separate “critic model” to evaluate those actions. GRPO skips the critic model step by taking groups of scores (data from several actions) and learning by comparing the scores.29 In the R1 white paper, DeepSeek reported: “we use DeepSeek-V3-Bases as the base model and employ GRPO as the RL framework to improve model performance in reasoning … We directly apply RL to the base model without relying on supervised fine-tuning (SFT) as a preliminary step. This approach allows the model to explore chain-of-thought (CoT) for solving complex problems.”7 DeepSeek also used multi-token prediction (MTP) during V3 pretraining to improve data efficiency, noting: “Instead of predicting just the next single token, DeepSeek-V3 predicts the next two tokens through the MTP technique … which we have observed to enhance the overall performance on evaluation benchmarks.”8 Distillation. This approach uses a large “teacher” model to transfer knowledge to train or fine-tune a smaller “student” model. The smaller model requires much less memory and compute time to operate, and can be faster during the inference stage. For example, the teacher model can transfer prediction outputs that serve as instructions for how to answer specific types of questions, saving the student model from the extensive training and computations normally required to arrive at those instructions.17 There have been suggestions that DeepSeek distilled outputs or acquired proprietary data from OpenAI models, but there is no evidence of this.22,23 DeepSeek used a distillation of R1 for post-training of V3 to add some reasoning capability and it used V3 to help train R1.8 DeepSeek also experimented with small versions of R1 trained on distillations of the open source Qwen 2.5 and Llama 3. These distilled versions performed better than a preliminary model (DeepSeek-R1-Zero), despite being much smaller, though they did not perform as well as R1.19 The DeepSeek team offered two conclusions regarding this combination of distillation and reinforcement learning as well as the limitations of their approach: “First, distilling more powerful models into smaller ones yields excellent results, whereas smaller models relying on the large-scale RL … require enormous computational power and may not even achieve the performance of distillation. Second, while distillation strategies are both economical and effective, advancing beyond the boundaries of intelligence may still require more powerful base models and larger-scale reinforcement learning.”7 DeepSeek optimized V3 and R1 for different tasks. V3 does very well on standard benchmarking tests for logic problems and code writing. R1 is better at deeper reasoning and math.12,16 Both V3 and R1 are said to be comparable or better than LLMs from Anthropic (Claude) and xAI (Grok), though still behind Google (Gemini).11 Chatbot Arena at University of California Berkeley publishes a ranking where R1 came in third, matching the performance of ChatGPT-4o.3 The cost to access V3 and R1 application programming interfaces (APIs) is so low that DeepSeek has disrupted the economics of the LLM API market.4 In early 2025, DeepSeek priced V3 at $0.07 per million input tokens and $0.11 per million output tokens, and R1 at $0.55 for input and $2.19 per million output tokens. By contrast, OpenAI priced GPT-4o at $15 per million input and $60 per million output tokens (prices that were approximately half of what OpenAI had charged earlier).29 Price-performance has made DeepSeek very popular among open source developers and all major cloud service providers support access. In China, car manufacturers, local governments, hospitals, state-owned enterprises, and private companies have embedded DeepSeek into their applications. Tencent has incorporated DeepSeek into its search engine for WeChat and the Chinese version Weixin. Baidu uses DeepSeek in its search engine. Other major companies such as Huawei, NetEase, Bytedance/TikTok are also users.15 In the U.S., AMD has integrated DeepSeek-V3 into its Instinct MI300X GPUs to optimize AI inference and GPU performance.28 However, some countries (the U.S., Australia, South Korea, India, Italy, and Taiwan) have warned about Chinese ownership or prohibited usage on government devices.27 There has been concern that DeepSeek’s low prices could commoditize GenAI technology and lead to steep drops in company sales. But another potential outcome is Jevons Paradox—the observation that improvements in efficiency and lower prices do not necessarily lead to falling revenues.3 If demand is sensitive to price, then usage and sales could increase dramatically as more people access the less expensive product or service. So far, Jevons Paradox seems to be holding up: Demand for GenAI software and GPU hardware continues to rise. Reasoning LLMs are improving and likely to find many more applications. Debates continue around the significance of DeepSeek’s innovations. Dario Amodei, cofounder of Anthropic and former VP of Research at OpenAI, describes DeepSeek’s achievement as mainly an important advance in engineering efficiency. He sees V3/R1 as part of a shift already underway from a focus during 2020–2023 on expensive and time-consuming pretraining, running software on ever-more-powerful and expensive hardware, to more economical machine-based reinforcement learning, sometimes with less than state-of-the-art hardware.1 However we view DeepSeek, it seems noteworthy that a Chinese startup, operating under American export constraints, has demonstrated clever ways to balance cost and performance in LLM development. DeepSeek’s open source code and sharing of detailed information has already made GenAI technology more accessible and understandable.
--------------------------------------------------

Title: “...In Kiambu county, there are different things being done”: A qualitative exploration of healthcare workers’ experiences with cord care practices
URL: https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0326506
Time Published: 2025-06-18T14:00:00Z
Full Content:
Neonatal sepsis (NNS) continues to be a leading cause of neonatal mortality in low-resource settings. NNS can occur secondary to umbilical stump infections (omphalitis) and this requires preventative cord care practices. To address this, the World Health Organization (WHO) issued context-specific recommendations for the use of 7.1% chlorhexidine (CHX) solution in areas with high neonatal mortality. Despite adoption of this policy, monitoring and evaluation of this guidance is lacking. This study describes the experiences of healthcare workers (HCWs) regarding cord care practices in Kiambu County, Kenya. We employed an exploratory qualitative design. Key informant interviews were conducted with 38 HCWs between October 6th and November 9th 2022 in six healthcare facilities in Kiambu County. Data were analyzed thematically using NVivo software. While Ministry of Health guidelines endorse WHO’s recommendation for the nation-wide use of CHX for neonatal cord care, its implementation in Kiambu county remains varied. HCWs continue to favour surgical spirit, and one of the healthcare facilities in our study adopted a facility-based policy of dry cord care. HCWs also relayed that mothers often combined modern and traditional methods. Some HCWs reported high satisfaction with CHX due to its perceived effectiveness, ease of use, and faster stump healing. However, systemic and product-specific barriers to uptake were noted. Systemic issues included frequent CHX stock-outs and high out-of-pocket costs due to inconsistent county-level supply and lack of insurance coverage. Product-specific concerns such as difficulty of application and reported adverse effects (e.g., delayed cord detachment, sepsis, burns) further impeded use. Knowledge gaps and contrary instructions among and between both the HCWs and mothers also undermined CHX use. Despite CHX being the recommended intervention for cord care in Kenya, its inconsistent use in Kiambu county reflects gaps in policy enforcement, supply chain reliability, and health education. The persistence of outdated or non-recommended cord care practices underscores a critical lack of oversight. To realize CHX’s full public health potential, urgent policy action is needed to ensure consistent availability, enforcement of national neonatal guidelines, and investment into inclusive IEC materials. Bridging the gap between policy and practice is essential for reducing neonatal morbidity and achieving equitable progress towards Kenya’s goal of Universal Health Coverage. Citation: Githinji JM, Chepchirchir A, Nyanchoka BO, Juttla PK, Nduati R (2025) “...In Kiambu county, there are different things being done”: A qualitative exploration of healthcare workers’ experiences with cord care practices. PLoS One 20(6): e0326506. https://doi.org/10.1371/journal.pone.0326506 Editor: Sojib Zaman, James Madison University, UNITED STATES OF AMERICA Received: April 2, 2025; Accepted: May 30, 2025; Published: June 18, 2025 Copyright: © 2025 Githinji et al. This is an open access article distributed under the terms of the Creative Commons Attribution License, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited. Data Availability: All relevant data are within the paper and its Supporting Information files. Funding: This study was funded by NIH Fogarty Grant R 25TW011212 awarded to Prof. Ruth Nduati. The opinions and conclusions are by the authors and do not necessarily represent the funding institution position. Competing interests: The authors have declared that no competing interests exist. Neonatal sepsis (NNS) is a significant cause of neonatal mortality during the first month of life [1]. One of the primary contributors to NNS is the development of omphalitis, which is the infection of the umbilical stump [2]. This infection often arises as a result of improper and/or inadequate umbilical cord care practices, which can ultimately lead to neonatal mortality in up to 15% of cases [1]. While this is relatively uncommon in developed nations, it is a significant contributor to neonatal mortality in developing nations [1], such as Kenya. Due to this burden of NNS secondary to omphalitis, the World Health Organization (WHO) has provided context-specific recommendations for newborns in settings where: (1) harmful traditional substances are prevalent and (2) the neonatal mortality rate (NMR) exceeds 30 in 1000 live births [3]. This recommendation is based on a meta-analysis of individual patient data, involving 177 neonates from five trials with a total of 129,391 newborns [3]. CHX for cord care has been shown to reduce NMR by up to 23% and prevents infection by 38–68% [4]. Furthermore, observational studies from low-income countries suggest that replacing harmful traditional cord care practices with antiseptics could save many newborn lives use [5,6]. However, this recommendation remains tentative due to the lack of data on sepsis and an inadequately described search strategy in the systemic review cited [5,6]. Moreover, the exclusion of observational studies from low-income settings (due to the absence of randomized controlled trials) limits its relevance for LMICs. The recommendation of dry cord care for LMICs that otherwise meet the criteria is therefore questionable, especially since the Cochrane review itself found no significant difference in infection rates between placebo and antiseptic use [5,7]. Kenya has a 29.3% prevalence of NNS [8], and the incidence rate of omphalitis is estimated at between 20–77 of every 1000 live births of newborns delivered within healthcare facilities [9]. The incidence rate of omphalitis is purported to be higher in at-home births [9]. The NMR has been documented 21 deaths per 1,000 live births, accounting for 66% of infant deaths and 51% of under-5 deaths [10]. However, this NMR varies widely between the counties of Kenya. A 2018 study conducted in Machakos County revealed that, of all the admissions in the newborn unit, 34% constituted cases of NNS and were associated with 15% of the deaths reported [9]. WHO’s recommendation for the contextual use of CHX for cord care is a transition from the previous recommendation of the use of surgical spirit [11], a recommendation which was also reflected in Kenya’s 2009 National Guidelines for Quality Perinatal Care [12]. Surgical spirit is no longer recommended for umbilical cord care due to its limited efficacy in preventing infections, potential to irritate newborn skin, and the availability of safer, more effective alternatives like CHX [11,13–15]. In 2016, however, the Government of Kenya recommended the use of CHX in all births to ensure equal standards in healthcare provision for all citizens of the country [16], therefore adopting the new WHO guidelines nation-wide [17]. Since Kenya’s adoption of the WHO recommendation on the use of CHX in all neonates in 2016, the implementation has been set to take three phases: (1) preparation, (2) planning, and (3) execution. Expounded, this process includes the alignment of policy, developing guidelines, introducing the product, training of service providers, generating demand for the product, and finally, monitoring and evaluation (M&E). A 2016 study by Muriuki et al. found that HCWs in rural Kenya widely accepted the use of CHX for umbilical cord care, citing benefits such as faster healing, reduced infections, ease of use, and positive community feedback [18]. For successful scale-up, they emphasized the need for community sensitization, proper training, consistent supply, clear guidelines, and inclusive service delivery approaches [18]. However, a 2021 cross-sectional study at Kangundo Level 4 Hospital found that while most mothers received some education on CHX use, both mothers and HCWs demonstrated poor understanding of its proper application [9]. Different counties are expected to have achieved different levels of adoption given that healthcare in Kenya is devolved to the county level with the national level providing policy guidance. Given that Kenya has a goal to further increase the uptake of CHX treatment to above 80% in all health care facilities by 2026 [4], the adoption of CHX for cord care has yet to undergo M&E through the perspectives of HCWs. The CHX uptake in Kiambu county is 40.1% [18], and therefore, understanding HCW experiences with cord care practices in the county would be essential to shape health policy and highlighting gaps in its implementation. The study adopted an exploratory qualitative design using key informant interviews (KIIs) guided by semi-structured question guides, and which were conducted between 6th October 2022–9th November 2022. The data was collected from six health facilities in Kiambu County. This study was carried out in Kiambu County, Kenya, which has a population of over 2.4 million people. The location coordinates are 10 10’S 36050’E, and it neighbors six other counties, namely Nairobi City and Kajiado Counties to the South, Machakos to the East, Murang’a to the North East, Nyandarua to the North west, and Nakuru County to the West [19]. The county is 60% urban and 40% rural due to its proximity to the capital city Nairobi. The county has 505 health facilities, comprising 108 public, 64 faith-based, and 333 privately owned facilities. In Kenya’s health system, Level 1 refers to community-based services (e.g., health promotion and preventive care), Level 2 to dispensaries, Level 3 to health centers, Level 4 to sub-county hospitals, and Level 5 to county referral hospitals. Maternity services are typically offered at Level 3 (health centers) and above, including private and faith-based hospitals. Therefore, this study gathered insights from HCWs working in Level 3, 4, and 5 public facilities, as well as private hospitals. One of the Level 5 hospitals (Thika Level 5 Hospital) in this study also functions as a teaching hospital for medical and nursing students. CHX for newborn umbilical cord care is available in two formulations: gel and solution [20]. Both forms are recommended by the WHO and are included in the Kenya Essential Medicines List as well as in postnatal care guidelines [20–22]. In line with this, Kenya’s Ministry of Health (MoH) endorses the availability and use of both CHX formulations [20]. The choice between the dosage formulations used depends on what is acceptable to mothers, caregivers, HCWs and availability [23]. According to the national guidelines, immediately post-delivery, a HCW should apply CHX to the newborn’s umbilical cord using sterile gloves. The antiseptic is applied to the base, stump, and tip of the cord [20]. For gel formulations, the HCW uses their index finger to spread it; for the solution, the dropper is used to apply CHX directly. The CHX is not cleaned off after application. In the postnatal period, CHX should be applied once daily until the seventh day or until the cord naturally detaches: whichever happens first. Mothers and/or caregivers are instructed on how to apply CHX at home following the same procedures, but in lieu of sterile gloves, they are advised to thoroughly wash their hands before each application. The National Health Insurance Fund (NHIF), now defunct, but which was active during the period of the study, had a program called Linda Mama that covered the costs of antenatal care (ANC), delivery, and postnatal care (PNC) for all pregnant women [24]. However, it notably excluded the cost of CHX, and currently, there is no government-sponsored program providing CHX free of charge to mothers during the postnatal period. The study population consisted of over 2,600 HCWs providing health services in Kiambu County during the study period. No formal sample size was calculated and we applied the information saturation principle [25]. Two providers were targeted in every unit (with a target of 30 HCWs) during the study’s formulation, however some units were understaffed during the study and hence only had one HCW interviewed. The cadre and respective facility of the sample are presented in Table 1. https://doi.org/10.1371/journal.pone.0326506.t001 Inclusion criteria - HCWs who had direct interactions with neonates or were involved in providing or handling CHX cord antiseptic during the study period, and who had at least 6 months of experience with cord care. Exclusion criteria - HCWs who were not directly involved in newborn care or who declined to provide informed consent and who had less than 6 months of experience with cord care. A total of 38 KIIs were conducted between 6th October 2022 and 9th November 2022. All interviews were conducted by two members of the study team, JMG and BNO, both holding Bachelor of Pharmacy (BPharm) degrees. JMG serves as the Kiambu county pharmacist and holds a PhD in pharmacy, while BNO is a researcher with experience in qualitative data analysis. Both researchers received training prior to data collection to ensure consistency and quality. The interviews were conducted in English, but participants were allowed to respond in either English or Kiswahili. BNO, who is bilingual and fluent in both written and spoken English and Standard Kiswahili, translated the KIIs, which were audio-recorded and transcribed verbatim directly from Kiswahili into English when applicable. Each participant was assigned a unique index number (1–38), and quotations are referenced using the format: HospitalName_Cadre_IndexNumber. Kobo Toolbox software was used to collect and manage data, with all data coded to conceal the participants’ identities. To ensure data security, electronic data collected via KoboCollect were encrypted and password-protected on the devices. After transfer, data files were securely stored on password-protected computers and backed up on a secure cloud platform with restricted access. NVivo project files were similarly protected to maintain confidentiality and data integrity throughout the analysis process. Interview transcripts were imported into NVivo software to assist in the classification, sorting, and coding of data into central themes and subthemes. The coding process followed a two-cycle approach. In the first cycle, value coding was used to capture participants’ attitudes and values, reflecting their perceptions and experiences. The second cycle involved focused and pattern coding. Focused coding developed specific categories without focusing on their properties, while pattern coding grouped similar codes into meaningful units for theme identification [26–28]. NVivo’s platform played a crucial role in facilitating this multi-level coding process, ensuring consistency in the analysis framework by identifying recurring patterns and connections. The research questions and interview guide informed the coding frame, allowing for accurate classification of notable data segments to reveal dominant themes. The integration of value, focused, and pattern coding in both cycles ensured a comprehensive and structured analysis of the interview data [26–28].BNO, JMG, and PKJ also independently reviewed the transcripts to familiarize themselves with the data and identify initial codes. Discrepancies were resolved through discussion to ensure consistency and reliability. Upon arrival at the various study sites, verbal consent was initially sought from the manager of each facility unit, followed by written consent from the hospital medical superintendent. Prior to the initiation of data collection, participants were informed about the study’s objectives and their role as respondents. They were assured that participation was entirely voluntary and that they had the right to withdraw at any time. All data collected by the researchers were treated as confidential and utilized exclusively for this study. Access to the materials was restricted to the investigators, and stringent data management protocols were implemented to uphold the confidentiality of the study subjects. Approval was obtained at various administrative levels, including county and sub-county authorities before the study commenced. Ethical clearance was secured from the University of Nairobi/Kenyatta National Hospital Ethical Review Committee [P470/05/2022], County Government of Kiambu Department of Health Services, Kiambu County [KIAMBU/HRDU/22/09/14/RA_GITHINJI], and a research license was obtained from the National Commission for Science, Technology and Innovation [NACOSTI/P/22/20446]. A total of 38 HCWs were interviewed, as depicted in Table 1. The mean age of respondents was 35.6 years (Range: 23–57 years). The HCWs interviewed had a mean of 9.4 years of professional experience, with a median of 7.5 years, a mode of 7 years, and a range spanning from 0.5 to 30 years. In terms of time spent at their current stations, the average was 4.4 years, with a median of 3 years, a mode of 1 year, and a range from the minimum of 0.5 years to 22 years. Participants had an average practice duration of 9 years. The transcripts drawn from recordings of KIIs held with selected HCWs were analyzed, and themes emerged as 33 files with 52 references. Some themes mirrored the guiding questions in the semi-structured questionnaire, as shown in the coding tree as Fig 1. The numbers in brackets indicates the total number of individual references that mention that specific code within the files. The numbers in brackets indicates the total number of individual references that mention that specific code within the files. https://doi.org/10.1371/journal.pone.0326506.g001 1. National policy recommendation We sought to understand the general cord care practices in various health facilities across Kiambu County by interviewing HCWs. According to MoH guidelines, the use of CHX for cord care has been officially recommended, with the directive being disseminated from the central government to the county level. This was confirmed by a participant from Nazareth Hospital, who stated, “first of all, we have the policy that is an order that came from Kiambu County from the Ministry of Health that chlorhexidine should be used” (Nazareth_Pharmacist_25). The majority of participants acknowledged the existence of the MoH guidelines recommending CHX for cord care, confirmed that this policy had been communicated to health facilities and gave a description of the same policy in their responses. “So after birth, when you cut the cord, immediately we use the chlorhexidine, and after, we use it once a day, once a day after delivery until now the mothers goes home and you instruct them to use it until the cord dries off and falls off.” (Nazareth_Midwife_27) “…the next thing is to maintain hygiene of the cord, and this is done by applying an antiseptic. Commonly we use chlorhexidine, either the gel or the solution.” (Kiambu_ Paediatrician_36) “...The guys from the [MoH] when they come, they say, “No, you must use [CHX]. You must use [CHX]...” (Thika_Midwife_13) 2. Facility-level departures from national recommendations HCWs mentioned that surgical spirit remained the predominant choice in practice, indicating a reluctance to fully transition from previous guidelines. In fact, almost half (41.7%) of participants reported having prior experience with surgical spirit before being required to switch to CHX, which was a new product in their facilities. Some facilities reported not using CHX at all, relying solely on surgical spirit for cord care. This variation in practice highlights the need for further investigation into the slow adoption of CHX in these settings, despite the existence of formal guidelines. Furthermore, despite clear directives, Thika Level 5 Hospital actively deviated from the National Guidelines, opting instead to follow its own facility-based protocol of dry cord care. “Here in our health facility... We discussed with our pediatrician and we just decided to leave the cord just like that. Don’t put anything, don’t put water, don’t put the spirit, and don’t put chlorhexidine, as long as you keep it clean. And we have not had any case of sepsis... The guys from the [MoH] when they come, they say, “No, you must use [CHX]. You must use [CHX].” But then we are agreed for us, we don’t use it here, we have not been using it, and we have not had any cases of neonatal sepsis.” (Thika_Midwife_13) “So the current cord care practice in Thika Level 5 I would say, predominantly because that’s where I practice is dry cord care. I hardly do surgical spirit or chlorhexidine or any other medication directly with the cord.” (Thika_ Paediatrician_12) “And what I’ve noted, there is less uptake of chlorhexidine use for cord care compared to the surgical spirit.... the pediatrician and also other practitioners [are] persistent on the use of surgical spirit as opposed to chlorhexidine.” (Nazareth_ANC-nurse_23) “So currently, in Kiambu County, there are different things that are being done … some places and institutions that are using chlorhexidine for cord care. Then a number of institutions are using surgical spirit. There are some people who even believe on doing nothing to cord care. There are people who are using normal saline for cord care.” (Thika_ Paediatrician_37) “…I just know most of the time, they don’t even use that chlorhexidine. They use surgical spirit.” (Kihara_Pharmacist_18) 3. Mothers’ use of blended and traditional cord care methods A minor theme emerged in which some HCWs reported that mothers used multiple cord care methods, often influenced by either their past experiences or family advice, or both. For example, if surgical spirit had been ineffective with their first baby, they would switch to CHX for subsequent children, and vice versa. In some cases, mothers who delivered during the era of previous guidelines recommending surgical spirit continued to favour it. Other practices included the use of saliva, a traditional method still common in our context. “There is the use of … saliva, especially for the traditional mothers” (Ruiru_PNC-nurse_5) “One challenge is that mothers out there, they have other methods of doing cord care. When you teach them how to do it, they go at home and they’re taught by other relatives how to do it … Like they will buy spirit because the other baby they used spirit, or they will use another thing like savlon that’s hindering proper use of the chlorhexidine.” (Nazareth_ANC-nurse_23) “some mothers are resistant to change, especially those who delivered much earlier and chlorhexidine was not there before. So if they used spirit, they still want to use spirit … or even using saliva or cow dung.” (Nazareth_Midwife_27) “The common challenge that we face is that mothers believe in the use of some traditional methods like use of saliva.” (Ruiru_Midwife_6) The preferences that HCWs had for CHX in cord care were varied, largely shaped by their clinical and anecdotal experiences with different methods. Approximately half of the HCWs who expressed satisfaction with CHX did so primarily due to its perceived effectiveness in preventing omphalitis and NNS. This ultimately reduced the need for additional healthcare visits for both mothers and newborns. Many HCWs in favor of CHX also highlighted that it promoted quicker stump healing compared to other methods, provided that mothers followed proper instructions, maintained good hygiene, and began cord care immediately or shortly after birth. Additionally, CHX was praised for being easy to use, contributing to its widespread adoption and positive outcomes. “So far, the outcomes have been good. We have had limited cases of sepsis after the use of chlorhexidine.” (Kiambu_Midwife_22) “… those who practice, okay, cord care with chlorhexidine as they are instructed, the outcome is good.” (Kihara_Midwife_16) “The use of chlorhexidine for cord care has made work easier in Kiambu since it’s easy to use and its availability, its efficacy being high has made it easier for us to manage the newborns and their mothers are even happy with the healing process using chlorhexidine gel.” (Kiambu_Pharmacist_34) “The effectiveness of cord care is better compared with [traditional or surgical spirit] methods … in comparison with the mothers that have been using the surgical spirit and the cord care, during the postnatal checkup one week post-delivery, the mothers who have been using the chlorhexidine, the cords are healed faster compared with other methods.” (Ruiru_PNC-nurse_5) 1. Systemic barriers One of the most significant barriers to the adoption and provision of CHX for cord care was its inconsistent availability in government health facilities. This challenge of access was twofold: not only was there a shortage of government-supplied CHX to health facilities, and when it was available, its cost often priced consumers out of the market. Many mothers at the facility found the cost of CHX prohibitive. As a result, HCWs recommended more affordable alternatives, which hindered CHX’s widespread adoption and led mothers to choose cheaper options like surgical spirit. “…And then the erratic supplies for the county, particularly because of those financial constraints the counties have been having have made it easy for us to try out other things because in the absence of chlorhexidine, what else was being done to allow cords to heal... the supplies and the county, it’s quite irregular. The stock-outs are very, very, very common because of the budgetary constraints in the county.” (Thika_ Paediatrician _12) “The first challenge is limited resources from the county. That is, when receiving our delivery from KEMSA, we might also be able to receive chlorhexidine. Another challenge is from the patients. Once the drug is prescribed, some patients may not be able to purchase from the pharmacies outside.” (Kihara_Pharmacist_24) “The challenges of provision of chlorhexidine gel, first of all, I’d say it’s not readily available. As in, even if I sent a mother outside here to buy, I don’t think it’s as available as there rest. Secondly, the cost. It’s a challenge because the mothers are not able to afford it” (Githunguri_ANC-nurse_33) 2. Perceived product-specific disadvantages Some HCWs associated CHX use with delayed cord healing, sepsis, and prolonged cord detachment. In a few instances, they reported that neonates had returned to the hospital with infections after its use. Concerns also emerged over the varying CHX formulations, which caused confusion, particularly due to its resemblance to tetracycline eye ointment and challenges in proper application. The drop formulation was especially scrutinized, with some HCWs believing it contributed to sepsis and soft tissue burns. Their perceptions of CHX's effectiveness were largely shaped by mothers’ feedback. These second-hand accounts reinforced the belief that CHX was less effective than other cord care methods, ultimately influencing its use within health facilities. “…The [CHX] drops, the mothers are coming back with septic cords. I don’t know whether it’s the hygiene at home or what. I don’t get. But when we get a mother that comes and then we take the history, they say they bought the drops. But with the gel, no, not much sepsis. But with the drops, there is.” (Kiambu_Midwife_35) “Now, the problem with the gel was that either it was too thick and it kept leaving the cord moist, and so it would take longer for the cord to drop off … So, a lot of children would come with delayed cord dropping.” (Thika_Paediatrician_12) “Initially, we used to use the chlorhexidine gel, which was a bit difficult to use because it required one to wash their hands or change their gloves, apply the gel on their finger, and then spread the gel on the cord and surrounding skin. The gel could also be confused with tetracycline eye ointment because of the kind of packaging it came in. However, with the solution, it's much easier to use because all one needs to do is to drop a few drops on the umbilical cord and leave the baby's cord to dry. The packaging is also very different from the tetracycline eye ointment, so confusion is reduced.” (Kiambu_Paediatrician_36) 3. Inconsistent use instructions The data corpus revealed a significant knowledge gap among HCWs and mothers regarding the use of CHX for cord care, with some indicating that it should be applied once a day but others recommending it twice a day. HCWs often demonstrated preferences for alternative practices, reflecting a reluctance towards the adoption of CHX. These gaps were primarily due to insufficient HCW training on CHX application, leading to a lack of awareness among mothers about proper usage. “… the mothers need an education. There are mothers who will not want to use chlorhexidine gel because of mythical thoughts or superstition, or that’s not what they were taught by their mothers to use. So, sensitization is needed … we need to sensitize the healthcare workers because sometimes we have found mothers who have not used chlorhexidine gel because the physician who was working with the mother did not believe in the working of chlorhexidine gel.” (Kiambu_Pharmacist_34) 4. Inertia Among HCWs, the knowledge gap regarding CHX use is further complicated by resistance to switch from surgical spirit, which many have successfully used in the past. This resistance is often rooted in personal experiences with both products. HCWs tend to favor surgical spirit, largely due to their familiarity with it and the perceived shortcomings of CHX. “I think the fact that most of the healthcare workers were used to surgical spirit, the switch to chlorhexidine and the fact that it takes time, the cord takes time to heal, I think most people are still reluctant to start mothers on the gel. They’ll prefer surgical spirit.” (Kihara_PNC-nurse_15) HCWs underscored the need for increased awareness and education among both HCWs and patients, citing persistent knowledge gaps regarding CHX’s benefits and proper usage. Many recommended improving accessibility by including CHX in maternity packages or ensuring its consistent availability in hospital pharmacies, thereby enabling timely application immediately after delivery, which is a critical factor for its efficacy. Affordability also emerged as a central concern, with suggestions to reduce the cost of CHX and incorporate it into health insurance schemes such as (formerly) Linda Mama to alleviate the financial burden on mothers. Furthermore, HCWs advocated for comprehensive training programs targeting midwives, doctors, and pediatricians to deepen their understanding of CHX. Such training would enable healthcare providers to more effectively counsel patients, thereby promoting greater uptake of CHX in cord care practices. “Yes. So number one, it’s the cost. It is readily available to them considering that it is covered by NHIF, number one...” (Nazareth_Midwife_27) “Suggest that the hospital should source for more of the drug to ensure that it’s constantly available for use to increase its uptake. Interviewer: If it was available, do you think everybody would use. Interviewee: Yeah.” (Kiambu_Midwife_22) “I think we need proper training for the staff, especially in maternity, even for us working in the postnatal clinics, because I understand the gel should be started immediately after birth.” (Kihara_PNC-nurse_15) “The other one is educating, first of all, the healthcare worker on how to use it so that the healthcare worker is empowered to also educate the mothers on how to use it.” (Thika_Pharmacist_11) IEC materials depicting the application of CHX were found to be largely unavailable and inadequate in healthcare facilities. A significant majority of respondents (86.1%) reported that these materials were inaccessible in most hospital units, resulting in ineffective promotion of CHX utilization. In cases where materials did exist, they were often not suitable for illiterate women, who frequently resorted to traditional methods of cord care. To address this gap, HCWs suggested developing more inclusive IEC materials, such as pictorials and patient-friendly infographics, to ensure that all mothers could benefit from the health education provided. These materials included charts, pictograms, and illustrations that use inclusive language. using accessible language. These patient-friendly IEC materials should be strategically placed in locations such as antenatal clinics and labor wards, so that mothers are informed about the importance of CHX and can prepare to obtain it before delivery. HCWs also recommended tailoring resources specifically for their needs, including physical charts as reminders at workstations, along with Continuous Medical Education (CME) sessions and training programs. Observations made by the participants included the following: “But in the facility in Githunguri, I’ve not seen any [IECs]. And I think CME is about the chlorhexidine would really help in creating awareness… everywhere, in every ward, in the postnatal rooms, and in labor ward, and also here in antenatal.” (Githunguri_PNC-nurse_29) “On the issue of IEC materials, they’re not available in our facility. If they can be effective and brought down to the facilities, I would recommend they be more pictorial. By a glance, someone is able to know what it is and how it can be used and the readings big enough to be legible.” (Githunguri_ANC-nurse_33) “The IEC material would help the staff here be at least more conversant for those who are not conversant with chlorhexidine gel, its use, its application, the period which the patient is supposed to use... Through the information the staff acquire, they’ll be able to make more informed decisions of even escalating the matter to facilitate the increase of the supply of the chlorhexidine gel in the facility and also acts a refresher …as opposed to other previous methods that were used of cord care…The IECs are not available at the facility at the moment...” (Kiambu_Midwife_22) “For the charts, they should be bigger, and they should provide more charts so that we can put maybe in the wards and to educate the mothers. And for those mothers who are illiterate who cannot read, the wordings are many than the pictures. The pictures are better illustrating of how to use the chlorhexidine.” (Nazareth_Midwife_27) This study explored the experiences of HCWs in Kiambu County regarding newborn cord care and revealed significant deviations from Kenya’s national guidelines which recommends the blanket use of CHX for all neonates nationwide. Despite the increasing adoption of CHX, with 41.7% of HCWs reported transitioning from surgical spirit, outdated and potentially harmful practices such as the use of surgical or methylated spirit persisted in our set-up. One facility in our study, Thika Level 5 Hospital, adopted its own facility-based practice of dry cord care. Our findings suggests that the national policy on CHX has not been fully implemented or embraced in practice, underscoring the need for strengthened policy adherence and education. The participants in this study reported diverse experiences with the use of CHX for cord care. Key concerns included the cost of CHX products, delayed healing, and varying perceptions of its effectiveness. The cost of CHX, which was quoted between Ksh. 120–200 (USD 0.93 to 1.55), was perceived as expensive by some clients, particularly when compared to more affordable alternatives such as methylated spirit (Ksh. 50, USD 0.34) or dry cord care, which incurs no cost. This contrasts with the findings of Opanga et al., who reported that CHX gel was available at less than Ksh 40 in private facilities and pharmacies, and was free in public hospitals, yet with only a minimal uptake of 1.3% [29]. Another study conducted in rural Bungoma county found that CHX was provided free of charge to mothers after delivery, but noted that improper use and misunderstandings regarding its application negatively impacted uptake, along with echoing concerns about delayed cord separation [30]. The variations in participants’ experiences with CHX use in Kiambu County may reflect the unique socio-economic and health system dynamics of a peri-urban area situated near the capital city. While Kiambu’s proximity to Nairobi may suggest better access to health information and services, it also presents a complex interplay between urban and rural health-seeking behaviours. Unlike rural Bungoma, where CHX was provided free and uptake issues were mainly due to poor understanding or instructions, Kiambu residents may encounter CHX more frequently through private pharmacies or clinics where it is sold at significantly higher prices, making it prohibitive to lower-income households despite theoretical availability. Furthermore, price discrepancies between public and private sectors may indicate a lack of standardized pricing or public awareness about where to obtain CHX for free. This is supported by the findings of Opanga et al., which noted low uptake despite free availability in public hospitals [29]. This demonstrates a disconnect between policy and implementation, possibly fueled by inadequate dissemination of information, lack of health worker engagement, or supply chain challenges in public facilities. Despite these challenges, our results also highlighted positive feedback from HCWs, particularly around the ease of use, prevention of sepsis, and faster cord separation, suggests potential benefits. This echoes a participant in Opanga et al.‘s study who reported early cord separation, with the cord drying and detaching after just three days, highlighting the promise of CHX in improving neonatal outcomes when used appropriately [29]. The majority of HCWs interviewed indicated challenges in the provision of CHX due to systemic challenges of unavailability. The inclusion of CHX in the Kenya Essential Medicines List was intended to enhance its availability in the public sector, and this highlights a gap in enforcement of this directive in our context [22]. The overarching goal of healthcare systems is to ensure that all patients have consistent access to a comprehensive range of suitable, high-quality, and affordable essential medicines, as emphasized by the WHO [31]. Essential medicines are critical components of healthcare, recognized alongside clean water, safe food supply, and adequate housing as fundamental necessities; their absence constitutes a failure to uphold universal human rights [32,31]. However, essential medicines frequently experience stock-outs in developing countries [32,31]. In Kenya, where health services are devolved (the national government “shares” government functions with smaller county governments), the impact of these stock-outs varies across the different counties. To mitigate the occurrence of stock-outs for essential medications on the package list, it is crucial for public sector facilities to ensure timely payments to the Kenya Medical Supplies Authority (KEMSA) for their orders [33,34]. Conversely, non-public facilities report infrequent stock-outs due to differing and strengthened procurement processes. Stock-outs were also identified as a significant concern by Ambale et al. at Kangundo Hospital [16]. Consequently, participants reported a lack of sustained experience with the products, which undermined their confidence in persuading mothers to purchase them upon leaving the healthcare facilities. Furthermore, to achieve optimal coverage, particularly for economically disadvantaged families, subsidization may be necessary [35]. The aforementioned issue raises a critical discussion about the disconnect between policy and implementation under Kenya’s devolved health system. It highlights that simply listing a drug as essential is not enough without effective supply chain management, accountability structures, and financing mechanisms at the county level. The situation in Kiambu highlights how inconsistent availability of essential medicines like CHX undermines provider confidence, policy adherence, and public trust, all of which contribute to missed opportunities for preventing neonatal infections and deaths. Moreover, the inequity between public and non-public facilities, where the latter have more consistent procurement systems, underscores the urgency of reforming public sector logistics and financing flows: particularly timely disbursement of funds to suppliers. Without these structural changes, the promise of universal health coverage and improved neonatal outcomes will remain unrealized. This discussion also sets the stage for recommending policy enforcement mechanisms, decentralized budgeting reforms, and stronger accountability for county health departments, as essential steps toward resolving persistent stock-outs of life-saving commodities. HCWs reported inadequate training in CHX cord care, leading to significant knowledge gaps and unfamiliarity with recommended guidelines. This resulted in variations in the reported frequency of CHX application. This finding aligns with another Kenyan study, which linked the lack of training and clear instructions to the ineffectiveness of CHX gel [16]. To address research-driven shifts, standardized guidelines for CHX use are essential. Ongoing medical education for all cord care personnel is crucial. Participants also emphasized the need for increased media publicity to enhance consumer knowledge, in line with the sensitization efforts recommended by Opanga et al. [29]. According to the Kenya Demographic and Health Survey (KDHS), 89.2% of births in Kiambu County occurred in hospitals, with 98% of these deliveries attended by medical professionals [36]. This rate is notably higher than the 54% and 64% reported in Pemba (Tanzania) and Zambia, respectively [37,38]. However, having a medically assisted delivery does not necessarily guarantee a reduced risk of infection, as many medical centers in our context fail to meet minimal infection prevention standards [39]. Furthermore, potentially hazardous procedures that raise concerns in home delivery settings are often performed on women and infants before they are discharged within hours of birth [15]. While Kiambu’s high institutional delivery rate might suggest optimal conditions for newborn cord care, this can create a false sense of security if not paired with stringent infection prevention and control (IPC) measures. It challenges the assumption that health facility births inherently reduce neonatal infections and points to the critical role of CHX as a safeguard, even within supposedly safer environments. This further reinforces the WHO’s position on universal CHX application, emphasizing that the presence of a skilled birth attendant does not automatically equate to safe neonatal outcomes: especially in under-resourced or overstretched facilities. Integrating CHX as a routine part of postnatal care, regardless of delivery setting, can act as a simple, cost-effective buffer against systemic IPC failures, especially in high-volume facilities that discharge mothers and newborns within hours of delivery. Most HCWs in our study suggested several strategies to enhance the uptake of CHX. IEC is crucial for ensuring correct usage, infection control, patient safety, and adherence to best practices. Participants emphasized the importance of recommending CHX to mothers and providing education on its proper use. These sentiments are echoed in the existing literature as this resistance to CHX has been previously described in similar settings [13,30,40–42]. Both the quantity and quality of IEC materials on CHX need improvement. Visual aids and illustrations should be prioritized over text to enhance mothers’ understanding of proper CHX use. Our study found that, while most health facilities had some IEC materials on CHX, these resources were limited and lacked engaging illustrations to support learning. This finding aligns with those of the Bungoma County study [30], and further highlights a pressing need to improve these materials for HCWs. While participants rightly identified the aforementioned methods as key to increasing CHX uptake, these strategies cannot succeed without a robust and context-sensitive health communication framework. The limited, often text-heavy IEC materials reported in this study reveal a missed opportunity to engage mothers, many of whom may have low health literacy or limited formal education, in ways that resonate with their daily realities. This challenge calls for a shift from generic IEC content to co-designed, visual, and language-appropriate tools that accommodate all literacy levels. Devolution in Kenya offers both a challenge and an opportunity: counties like Kiambu can tailor CHX strategies to their unique population needs, but this must be done in alignment with national guidelines and messaging, to ensure consistency and avoid confusion. This requires capacity-building for local health workers, investment in community engagement strategies, and partnerships with trusted media outlets to amplify accurate, culturally resonant messages on CHX use. Ultimately, the effectiveness of CHX as a public health intervention depends not just on availability, but on how well it is communicated, understood, and trusted at the community level. The mixed perceptions, inconsistent use of CHX for cord care and the use of alternative cord care methods in Kiambu County reveal a deeper systemic issue that extends beyond individual preferences: it points to critical gaps in policy enforcement, supply chain reliability, and health communication. The fact that one of the facilities included in our study practice cord care contrary to national guidelines is particularly concerning and highlights a lack of oversight and accountability in guideline implementation. To ensure CHX fulfills its potential as a low-cost, high-impact intervention for preventing neonatal infections, there is an urgent need for policy action at both county and national levels. This includes: (1) strengthening the enforcement of national neonatal care protocols across all facilities, (2) ensuring uninterrupted availability of CHX through timely procurement and subsidization, and (3) developing and disseminating culturally appropriate, visually driven IEC materials to improve community understanding and uptake. As Kenya advances toward Universal Health Coverage, it is imperative that essential medicines like CHX are not only listed on paper but made reliably available and appropriately used at the point of care. A unified, well-supported CHX strategy will not only align with WHO recommendations but also directly contribute to reducing neonatal morbidity and mortality: especially among the most vulnerable populations. This must begin with aligning policy intent with health system practice. This document contains the transcriptions of the IDIs and the indices used for each participant. https://doi.org/10.1371/journal.pone.0326506.s001 (PDF)
--------------------------------------------------

Title: 3 Big AI Dividends Cashing In On The Next Big Leap
URL: https://www.forbes.com/sites/brettowens/2025/06/18/3-big-ai-dividends-cashing-in-on-the-next-big-leap/
Time Published: 2025-06-18T13:58:00Z
Full Content:
ByBrett Owens ByBrett Owens, Contributor. Young Asian couple managing finance and investment online, analyzing stock market trades with mobile ... More app on laptop and smartphone. Making financial plans. Banking and finance, investment, financial trading, mobile banking concept Still wondering if artificial intelligence will replace human workers? Well, you can stop. Because it’s already happening—and boosting corporate profits (and AI dividends) as it does. That’s tough news for workers, of course. But there’s a silver lining for those of us investing for dividends. Because the “growth-without-hiring” trend AI has touched off is setting up one of the strongest income opportunities I’ve seen in years. (I’ll name three AI plays yielding up to 8.5% below.) Wait, AI is setting the stage for big dividends? I know. AI is known for a lot of things—many of which have been, er, less than helpful, such as infringing on copyrights and forcing McNuggets on pleading McDonald’s (MCD) drive-thru customers. But dividends? Most people will tell you that AI stocks are a dividend desert. They’re not exactly wrong. Nvidia (NVDA), Microsoft (MSFT), Alphabet (GOOGL) and Meta Platforms (META) pay somewhere between nothing and almost nothing. But we contrarians know to look deeper. For starters, the real AI magic isn’t in chatbots like ChatGPT. That’s surface-level stuff. It’s in applications, like the FedEx (FDX) Surround system, which uses AI to monitor and shift, if necessary, time-sensitive shipments. It’s in Meta’s recent proposal to use AI to run entire ad campaigns (including creative) based on an image of a client’s product and a budget. That could let smaller businesses access agency-level marketing, boosting their profits (and Meta’s, of course). As we mentioned earlier, yes, these changes will result in fewer hires. That’s already showing up in the numbers: Over the past year, Meta, for example, has raised revenues by 22% while only hiring 10% more people. Alphabet grew revenues by 14% without any net new hires. Sure, Nvidia did grow headcount by 13%, but for good reason—sales exploded by 126%. Microsoft, meantime, saw 16% revenue growth on just a 3% headcount increase. Tech firms are the thin edge of the wedge here. Other companies are going this way, too. This is where dividends come in because we can easily buy this trend through closed-end funds (CEFs) that: Here are three you can blend to get this sweet income (and gain!) setup. We’ll start with a “pure” tech fund and move through to one focused more on AI users than providers. The Columbia Seligman Premium Technology Growth Fund (STK) focuses on tech stocks, with Broadcom (AVGO), Microsoft, Nvidia, Alphabet and Apple (AAPL) among its top holdings. STK also holds Visa (V) and fuel-cell-maker Bloom Energy (BE). Let’s call those “tech-adjacent.” STK sells call options on part of its portfolio, which generates extra income to support its 6.3% dividend. This strategy works well with tech stocks, as they tend to be more volatile. Moreover, portfolio manager Paul Wick has 38 years of experience and it shows: In the last five years STK’s total return has outpaced the NASDAQ, which we all know has been on a tear: STK Total Returns One thing to remember is that STK is on investors’ radar, so it trades at a premium to NAV. But that premium is well below the peaks it’s hit in recent years, making STK something of a bargain in disguise. That premium could turn some folks who don’t know STK’s history away, providing an opportunity to step in. The Nuveen NASDAQ 100 Dynamic Overwrite Fund (QQQX), as the name says, holds NASDAQ stocks. But unlike index funds, it pays a big dividend: 8.5%. Like STK, QQQX fuels its payout, in part, through option sales. QQQX’s portfolio of NASDAQ stocks includes the tech kingpins, plus firms like travel site operator Booking Holdings (BKG) that also benefit from “growth without hiring.” The fund’s 5.7% discount gives us another tailwind as it narrows and (likely, in my view) flips to a premium—something it’s long overdue for: QQQX Discount NAV Now let’s add more “tech-adjacent” holdings with … The Gabelli Dividend & Income Trust (GDV) rounds out our trio with a focus on innovators from across the economy—particularly finance stocks—set to cash in as they integrate AI into their businesses. Top holdings include Mastercard (MA), JPMorgan Chase & Co. (JPM) and American Express (AXP). GDV yields 6.5% and is the steadiest payer of the bunch, with a payout that hasn’t been cut since the 2009 financial crisis. The fund’s discount has been stuck in double digits in recent years, but it has been narrowing lately. I expect that discount to keep shrinking as AI optimizes sectors like finance. That would slingshot the fund’s price higher, adding gains to that 6.5% payout. Brett Owens is Chief Investment Strategist for Contrarian Outlook. For more great income ideas, get your free copy his latest special report: How to Live off Huge Monthly Dividends (up to 8.7%) — Practically Forever. Disclosure: none
--------------------------------------------------

Title: INVESTOR DEADLINE APPROACHING: Faruqi & Faruqi, LLP Investigates Claims on Behalf of Investors of DoubleVerify
URL: https://www.globenewswire.com/news-release/2025/06/18/3101371/683/en/INVESTOR-DEADLINE-APPROACHING-Faruqi-Faruqi-LLP-Investigates-Claims-on-Behalf-of-Investors-of-DoubleVerify.html
Time Published: 2025-06-18T11:44:00Z
Full Content:
June 18, 2025 07:44 ET | Source: Faruqi & Faruqi LLP Faruqi & Faruqi LLP Faruqi & Faruqi, LLP Securities Litigation Partner James (Josh) Wilson Encourages Investors Who Suffered Losses Exceeding $75,000 In DoubleVerify To Contact Him Directly To Discuss Their Options If you suffered losses exceeding $75,000 in DoubleVerify between November 10, 2023 and February 27, 2025 and would like to discuss your legal rights, call Faruqi & Faruqi partner Josh Wilson directly at 877-247-4292 or 212-983-9330 (Ext. 1310). [You may also click here for additional information] NEW YORK,, June 18, 2025 (GLOBE NEWSWIRE) -- Faruqi & Faruqi, LLP, a leading national securities law firm, is investigating potential claims against DoubleVerify Holdings, Inc. (“DoubleVerify” or the “Company”) (NYSE: DV) and reminds investors of the July 21, 2025 deadline to seek the role of lead plaintiff in a federal securities class action that has been filed against the Company. Faruqi & Faruqi is a leading national securities law firm with offices in New York, Pennsylvania, California and Georgia. The firm has recovered hundreds of millions of dollars for investors since its founding in 1995. See www.faruqilaw.com. As detailed below, the complaint alleges that the Company and its executives violated federal securities laws by making false and/or misleading statements and/or failing to disclose that: (a) DoubleVerify’s customers were shifting their ad spending from open exchanges to closed platforms, where the Company’s technological capabilities were limited and competed directly with native tools provided by platforms like Meta Platforms and Amazon; (b) DoubleVerify’s ability to monetize on Activation Services, the Company’s high-margin advertising optimization services segment, was limited because the development of its technology for closed platforms was significantly more expensive and time-consuming than disclosed to investors; (c) DoubleVerify’s Activation Services in connection with certain closed platforms would take several years to monetize; (d) DoubleVerify’s competitors were better positioned to incorporate AI into their offerings on closed platforms, which impaired DoubleVerify’s ability to compete effectively and adversely impacted the Company’s profits; (e) DoubleVerify systematically overbilled its customers for ad impressions served to declared bots operating out of known data center server farms; (f) DoubleVerify’s risk disclosures were materially false and misleading because they characterized adverse facts that had already materialized as mere possibilities; and (g) as a result of the foregoing, Defendants’ positive statements about the Company’s business, operations, and prospects were materially false and/or misleading or lacked a reasonable basis. The complaint alleges that the truth was revealed on February 27, 2025, when DoubleVerify reported lower-than-expected fourth quarter 2024 sales and earnings due in part to reduced customer spending and the suspension of DoubleVerify services by a large customer. Defendants also disclosed that the shift of ad dollars from open exchanges to closed platforms was negatively impacting the Company. On this news, DoubleVerify's stock price dropped $7.83 per share, or 36%, from a closing price of $21.73 on February 27, 2025, to a closing price of $13.90 on February 28, 2025. The court-appointed lead plaintiff is the investor with the largest financial interest in the relief sought by the class who is adequate and typical of class members who directs and oversees the litigation on behalf of the putative class. Any member of the putative class may move the Court to serve as lead plaintiff through counsel of their choice, or may choose to do nothing and remain an absent class member. Your ability to share in any recovery is not affected by the decision to serve as a lead plaintiff or not. Faruqi & Faruqi, LLP also encourages anyone with information regarding DoubleVerify’s conduct to contact the firm, including whistleblowers, former employees, shareholders and others. To learn more about the DoubleVerify Holdings, Inc. class action, go to www.faruqilaw.com/DV or call Faruqi & Faruqi partner Josh Wilson directly at 877-247-4292 or 212-983-9330 (Ext. 1310). Follow us for updates on LinkedIn, on X, or on Facebook. Attorney Advertising. The law firm responsible for this advertisement is Faruqi & Faruqi, LLP (www.faruqilaw.com). Prior results do not guarantee or predict a similar outcome with respect to any future matter. We welcome the opportunity to discuss your particular case. All communications will be treated in a confidential manner. A photo accompanying this announcement is available at https://www.globenewswire.com/NewsRoom/AttachmentNg/6b00ceb6-af61-48aa-9e35-79aaef8cfa67 Faruqi & Faruqi, LLP Securities Litigation Partner James (Josh) Wilson Encourages Investors Who Suffered Losses Exceeding $100,000 In Krispy Kreme To Contact Him Directly To Discuss Their Options ... Faruqi & Faruqi, LLP Securities Litigation Partner James (Josh) Wilson Encourages Investors Who Suffered Losses Exceeding $100,000 In Civitas To Contact Him Directly To Discuss Their Options If...
--------------------------------------------------

Title: TD Cowen adds Gap to ’Best Smidcap Ideas’ list on brand momentum
URL: https://finance.yahoo.com/news/td-cowen-adds-gap-best-110604703.html
Time Published: 2025-06-18T11:06:04Z
Description: Investing.com -- TD Cowen has added Gap Inc (NYSE:GAP) to its “Best Smidcap Ideas” list, citing sustained momentum at its core Gap and Old Navy brands and...
--------------------------------------------------

Title: IAS Expands Tools To Help Meta Ads Perform Better On Facebook And Instagram
URL: https://finance.yahoo.com/news/ias-expands-tools-help-meta-100638182.html
Time Published: 2025-06-18T10:06:38Z
Description: Integral Ad Science (NASDAQ:IAS) on Wednesday announced the launch of new contextual category reporting for Meta Platforms (NASDAQ:META), expanding...
--------------------------------------------------

Title: SHAREHOLDER ALERT: Morris Kandinov Investigating VIRT, NSSC, DV, and TMCI; Shareholders are Encouraged to Contact the Firm
URL: https://www.globenewswire.com/news-release/2025/06/18/3101267/0/en/SHAREHOLDER-ALERT-Morris-Kandinov-Investigating-VIRT-NSSC-DV-and-TMCI-Shareholders-are-Encouraged-to-Contact-the-Firm.html
Time Published: 2025-06-18T10:01:00Z
Full Content:
June 18, 2025 06:01 ET | Source: Morris Kandinov, LLP Morris Kandinov, LLP SAN DIEGO, June 18, 2025 (GLOBE NEWSWIRE) -- National law firm Morris Kandinov is investigating Virtu Financial, Inc., Napco Security Technologies, Inc., DoubleVerify Holdings, Inc., and Treace Medical Concepts, Inc. If you are a current owner of shares, contact leo@moka.law or call (619) 780-3993. Virtu Financial, Inc. (NYSE: VIRT) Accused of Misleading Investors Morris Kandinov reminds investors that a securities class action lawsuit has commenced on behalf of investors of Virtu Financial, Inc. Morris Kandinov is investigating Virtu Financial regarding possible breaches of fiduciary duties and other violations of law on behalf of shareholders. The class action lawsuit alleges that: (i) the company maintained deficient policies and procedures with respect to its information access barriers; (ii) accordingly, Virtu had overstated the company’s operational and technological efficacy as well as its capacity to block the exchange of confidential information between departments or individuals within the company; (iii) the foregoing deficiencies increased the likelihood that the company would be subject to enhanced regulatory scrutiny; and (iv) as a result, defendants’ public statements were materially false and/or misleading at all relevant times. On March 17, 2025, Judge Nicholas G. Garaufis of the United States District Court for the Eastern District of New York issued an order denying in part the defendants’ motion to dismiss in the pending securities class action against Virtu Financial, paving the way for litigation to proceed. Morris Kandinov LLP is investigating possible breaches of fiduciary duties and other violations of law, on behalf of shareholders. To learn more about this investigation and your rights, visit: https://moka.law/case-contact-form/. All representation is on a contingency fee basis. Shareholders pay no fees or expenses. Napco Security Technologies, Inc. (NASDAQ: NSSC) Accused of Misleading Investors Morris Kandinov reminds investors that a securities class action lawsuit has commenced on behalf of investors of Napco Security Technologies, Inc. Morris Kandinov is investigating Napco Security Technologies regarding possible breaches of fiduciary duties and other violations of law on behalf of shareholders. To learn more about this investigation and your rights, visit: https://moka.law/case-contact-form/. All representation is on a contingency fee basis. Shareholders pay no fees or expenses. DoubleVerify Holdings, Inc. (NYSE: DV) Accused of Misleading Investors Morris Kandinov reminds investors that a securities class action lawsuit has commenced on behalf of investors of DoubleVerify Holdings, Inc. Morris Kandinov is investigating DoubleVerify Holdings regarding possible breaches of fiduciary duties and other violations of law on behalf of shareholders. The class action lawsuit alleges that defendants throughout the class period made false and/or misleading statements and/or failed to disclose that: (i) DoubleVerify’s customers were shifting their ad spending from open exchanges to closed platforms, where DoubleVerify’s technological capabilities were limited and competed directly with native tools provided by platforms like Meta Platforms and Amazon; (ii) DoubleVerify’s ability to monetize on its Activation Services was limited because the development of its technology for closed platforms was significantly more expensive and time-consuming than disclosed to investors; (iii) DoubleVerify’s Activation Services in connection with certain closed platforms would take several years to monetize; (iv) DoubleVerify’s competitors were better positioned to incorporate AI into their offerings on closed platforms, which impaired DoubleVerify’s ability to compete effectively and adversely impacted DoubleVerify’s profits; (v) DoubleVerify systematically overbilled its customers for ad impressions served to declared bots operating out of known data center server farms; and (vi) DoubleVerify’s risk disclosures were materially false and misleading because they characterized adverse facts that had already materialized as mere possibilities. To learn more about this investigation and your rights, visit: https://moka.law/case-contact-form/. All representation is on a contingency fee basis. Shareholders pay no fees or expenses. Treace Medical Concepts, Inc. (NASDAQ: TMCI) Accused of Misleading Investors Morris Kandinov reminds investors that a securities class action lawsuit has commenced on behalf of investors of Treace Medical Concepts, Inc. Morris Kandinov is investigating Treace Medical Concepts regarding possible breaches of fiduciary duties and other violations of law on behalf of shareholders. The class action lawsuit alleges that the company and its executives violated federal securities laws by making false and/or misleading statements and/or failing to disclose that: (1) competition impacted the demand for and utilization of its primary product, the Lapiplasty 3D Bunion Correction System; (2) as a result, Treace Medical’s revenue declined and the company needed to accelerate its plans to offer a product that was an alternative to osteotomy (a surgical procedure that involves cutting and realigning a bone to improve its position or function); and (3) Defendants’ positive statements about the company’s business, operations, and prospects were materially misleading and/or lacked a reasonable basis. On May 7, 2024, after market hours, when the company issued a press release reporting, among other things, that it lowered its full-year 2024 revenue guidance from between $220 million and $225 million to between $201 million and $211 million. During the associated earnings call the same day, defendants revealed competition from minimally invasive osteotomy and Lapiplasty “knockoffs” created headwinds for Lapiplasty growth. On this news, the company’s stock price fell $6.95, or nearly 63%, to close at $4.17 per share on May 8, 2024, on unusually high trading volume. To learn more about this investigation and your rights, visit: https://moka.law/case-contact-form/. All representation is on a contingency fee basis. Shareholders pay no fees or expenses. Concerned shareholders are encouraged to contact Leo Kandinov to learn more: leo@moka.law(619) 780-3993moka.law Morris Kandinov LLP is a national law firm that specializes in recovering investment losses and protecting stockholder rights. We work on contingency (i.e., you do not pay our fees out-of-pocket), and our attorneys have made substantial recoveries for investors in jurisdictions across the country. The firm would be happy to further discuss these matters, and any legal rights or remedies potentially available to you, at no charge. Attorney Advertising. Past results do not guarantee a similar outcome. Contact: Leo Kandinov, Partnerleo@moka.law619-780-3993550 West B Street, 4th FloorSan Diego, CA 92101 SAN DIEGO, June 18, 2025 (GLOBE NEWSWIRE) -- National law firm Morris Kandinov is investigating iRhythm Technologies, Inc., Hayward Holdings, Inc., Methode Electronics, Inc., and Mercury Systems,... SAN DIEGO, June 03, 2025 (GLOBE NEWSWIRE) -- National law firm Morris Kandinov is investigating DoubleVerify Holdings, Inc., Manhattan Associates, Inc., Doximity, Inc., and SolarEdge Technologies,...
--------------------------------------------------